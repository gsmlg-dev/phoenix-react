var __create = Object.create;
var __getProtoOf = Object.getPrototypeOf;
var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS((exports, module) => {
  (function() {
    function defineDeprecationWarning(methodName, info) {
      Object.defineProperty(Component.prototype, methodName, {
        get: function() {
          console.warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
        }
      });
    }
    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== "object")
        return null;
      maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
      return typeof maybeIterable === "function" ? maybeIterable : null;
    }
    function warnNoop(publicInstance, callerName) {
      publicInstance = (publicInstance = publicInstance.constructor) && (publicInstance.displayName || publicInstance.name) || "ReactClass";
      var warningKey = publicInstance + "." + callerName;
      didWarnStateUpdateForUnmountedComponent[warningKey] || (console.error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, publicInstance), didWarnStateUpdateForUnmountedComponent[warningKey] = true);
    }
    function Component(props, context, updater) {
      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }
    function ComponentDummy() {
    }
    function PureComponent(props, context, updater) {
      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }
    function testStringCoercion(value) {
      return "" + value;
    }
    function checkKeyStringCoercion(value) {
      try {
        testStringCoercion(value);
        var JSCompiler_inline_result = false;
      } catch (e) {
        JSCompiler_inline_result = true;
      }
      if (JSCompiler_inline_result) {
        JSCompiler_inline_result = console;
        var JSCompiler_temp_const = JSCompiler_inline_result.error;
        var JSCompiler_inline_result$jscomp$0 = typeof Symbol === "function" && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        JSCompiler_temp_const.call(JSCompiler_inline_result, "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.", JSCompiler_inline_result$jscomp$0);
        return testStringCoercion(value);
      }
    }
    function getComponentNameFromType(type) {
      if (type == null)
        return null;
      if (typeof type === "function")
        return type.$$typeof === REACT_CLIENT_REFERENCE$2 ? null : type.displayName || type.name || null;
      if (typeof type === "string")
        return type;
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PORTAL_TYPE:
          return "Portal";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
      }
      if (typeof type === "object")
        switch (typeof type.tag === "number" && console.error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            return (type.displayName || "Context") + ".Provider";
          case REACT_CONSUMER_TYPE:
            return (type._context.displayName || "Context") + ".Consumer";
          case REACT_FORWARD_REF_TYPE:
            var innerType = type.render;
            type = type.displayName;
            type || (type = innerType.displayName || innerType.name || "", type = type !== "" ? "ForwardRef(" + type + ")" : "ForwardRef");
            return type;
          case REACT_MEMO_TYPE:
            return innerType = type.displayName || null, innerType !== null ? innerType : getComponentNameFromType(type.type) || "Memo";
          case REACT_LAZY_TYPE:
            innerType = type._payload;
            type = type._init;
            try {
              return getComponentNameFromType(type(innerType));
            } catch (x) {
            }
        }
      return null;
    }
    function isValidElementType(type) {
      return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_OFFSCREEN_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_CONSUMER_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) ? true : false;
    }
    function disabledLog() {
    }
    function disableLogs() {
      if (disabledDepth === 0) {
        prevLog = console.log;
        prevInfo = console.info;
        prevWarn = console.warn;
        prevError = console.error;
        prevGroup = console.group;
        prevGroupCollapsed = console.groupCollapsed;
        prevGroupEnd = console.groupEnd;
        var props = {
          configurable: true,
          enumerable: true,
          value: disabledLog,
          writable: true
        };
        Object.defineProperties(console, {
          info: props,
          log: props,
          warn: props,
          error: props,
          group: props,
          groupCollapsed: props,
          groupEnd: props
        });
      }
      disabledDepth++;
    }
    function reenableLogs() {
      disabledDepth--;
      if (disabledDepth === 0) {
        var props = { configurable: true, enumerable: true, writable: true };
        Object.defineProperties(console, {
          log: assign({}, props, { value: prevLog }),
          info: assign({}, props, { value: prevInfo }),
          warn: assign({}, props, { value: prevWarn }),
          error: assign({}, props, { value: prevError }),
          group: assign({}, props, { value: prevGroup }),
          groupCollapsed: assign({}, props, { value: prevGroupCollapsed }),
          groupEnd: assign({}, props, { value: prevGroupEnd })
        });
      }
      0 > disabledDepth && console.error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    function describeBuiltInComponentFrame(name) {
      if (prefix === undefined)
        try {
          throw Error();
        } catch (x) {
          var match = x.stack.trim().match(/\n( *(at )?)/);
          prefix = match && match[1] || "";
          suffix = -1 < x.stack.indexOf(`
    at`) ? " (<anonymous>)" : -1 < x.stack.indexOf("@") ? "@unknown:0:0" : "";
        }
      return `
` + prefix + name + suffix;
    }
    function describeNativeComponentFrame(fn, construct) {
      if (!fn || reentry)
        return "";
      var frame = componentFrameCache.get(fn);
      if (frame !== undefined)
        return frame;
      reentry = true;
      frame = Error.prepareStackTrace;
      Error.prepareStackTrace = undefined;
      var previousDispatcher = null;
      previousDispatcher = ReactSharedInternals.H;
      ReactSharedInternals.H = null;
      disableLogs();
      try {
        var RunInRootFrame = {
          DetermineComponentFrameRoot: function() {
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    var control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x$0) {
                    control = x$0;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x$1) {
                  control = x$1;
                }
                (Fake = fn()) && typeof Fake.catch === "function" && Fake.catch(function() {
                });
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string")
                return [sample.stack, control.stack];
            }
            return [null, null];
          }
        };
        RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
        var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, "name");
        namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, "name", { value: "DetermineComponentFrameRoot" });
        var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
        if (sampleStack && controlStack) {
          var sampleLines = sampleStack.split(`
`), controlLines = controlStack.split(`
`);
          for (_RunInRootFrame$Deter = namePropDescriptor = 0;namePropDescriptor < sampleLines.length && !sampleLines[namePropDescriptor].includes("DetermineComponentFrameRoot"); )
            namePropDescriptor++;
          for (;_RunInRootFrame$Deter < controlLines.length && !controlLines[_RunInRootFrame$Deter].includes("DetermineComponentFrameRoot"); )
            _RunInRootFrame$Deter++;
          if (namePropDescriptor === sampleLines.length || _RunInRootFrame$Deter === controlLines.length)
            for (namePropDescriptor = sampleLines.length - 1, _RunInRootFrame$Deter = controlLines.length - 1;1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter && sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]; )
              _RunInRootFrame$Deter--;
          for (;1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter; namePropDescriptor--, _RunInRootFrame$Deter--)
            if (sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]) {
              if (namePropDescriptor !== 1 || _RunInRootFrame$Deter !== 1) {
                do
                  if (namePropDescriptor--, _RunInRootFrame$Deter--, 0 > _RunInRootFrame$Deter || sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]) {
                    var _frame = `
` + sampleLines[namePropDescriptor].replace(" at new ", " at ");
                    fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName));
                    typeof fn === "function" && componentFrameCache.set(fn, _frame);
                    return _frame;
                  }
                while (1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter);
              }
              break;
            }
        }
      } finally {
        reentry = false, ReactSharedInternals.H = previousDispatcher, reenableLogs(), Error.prepareStackTrace = frame;
      }
      sampleLines = (sampleLines = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(sampleLines) : "";
      typeof fn === "function" && componentFrameCache.set(fn, sampleLines);
      return sampleLines;
    }
    function describeUnknownElementTypeFrameInDEV(type) {
      if (type == null)
        return "";
      if (typeof type === "function") {
        var prototype = type.prototype;
        return describeNativeComponentFrame(type, !(!prototype || !prototype.isReactComponent));
      }
      if (typeof type === "string")
        return describeBuiltInComponentFrame(type);
      switch (type) {
        case REACT_SUSPENSE_TYPE:
          return describeBuiltInComponentFrame("Suspense");
        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame("SuspenseList");
      }
      if (typeof type === "object")
        switch (type.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return type = describeNativeComponentFrame(type.render, false), type;
          case REACT_MEMO_TYPE:
            return describeUnknownElementTypeFrameInDEV(type.type);
          case REACT_LAZY_TYPE:
            prototype = type._payload;
            type = type._init;
            try {
              return describeUnknownElementTypeFrameInDEV(type(prototype));
            } catch (x) {
            }
        }
      return "";
    }
    function getOwner() {
      var dispatcher = ReactSharedInternals.A;
      return dispatcher === null ? null : dispatcher.getOwner();
    }
    function hasValidKey(config) {
      if (hasOwnProperty.call(config, "key")) {
        var getter = Object.getOwnPropertyDescriptor(config, "key").get;
        if (getter && getter.isReactWarning)
          return false;
      }
      return config.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
      function warnAboutAccessingKey() {
        specialPropKeyWarningShown || (specialPropKeyWarningShown = true, console.error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)", displayName));
      }
      warnAboutAccessingKey.isReactWarning = true;
      Object.defineProperty(props, "key", {
        get: warnAboutAccessingKey,
        configurable: true
      });
    }
    function elementRefGetterWithDeprecationWarning() {
      var componentName = getComponentNameFromType(this.type);
      didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = true, console.error("Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."));
      componentName = this.props.ref;
      return componentName !== undefined ? componentName : null;
    }
    function ReactElement(type, key, self2, source, owner, props) {
      self2 = props.ref;
      type = {
        $$typeof: REACT_ELEMENT_TYPE,
        type,
        key,
        props,
        _owner: owner
      };
      (self2 !== undefined ? self2 : null) !== null ? Object.defineProperty(type, "ref", {
        enumerable: false,
        get: elementRefGetterWithDeprecationWarning
      }) : Object.defineProperty(type, "ref", { enumerable: false, value: null });
      type._store = {};
      Object.defineProperty(type._store, "validated", {
        configurable: false,
        enumerable: false,
        writable: true,
        value: 0
      });
      Object.defineProperty(type, "_debugInfo", {
        configurable: false,
        enumerable: false,
        writable: true,
        value: null
      });
      Object.freeze && (Object.freeze(type.props), Object.freeze(type));
      return type;
    }
    function cloneAndReplaceKey(oldElement, newKey) {
      newKey = ReactElement(oldElement.type, newKey, undefined, undefined, oldElement._owner, oldElement.props);
      newKey._store.validated = oldElement._store.validated;
      return newKey;
    }
    function validateChildKeys(node, parentType) {
      if (typeof node === "object" && node && node.$$typeof !== REACT_CLIENT_REFERENCE) {
        if (isArrayImpl(node))
          for (var i = 0;i < node.length; i++) {
            var child = node[i];
            isValidElement(child) && validateExplicitKey(child, parentType);
          }
        else if (isValidElement(node))
          node._store && (node._store.validated = 1);
        else if (i = getIteratorFn(node), typeof i === "function" && i !== node.entries && (i = i.call(node), i !== node))
          for (;!(node = i.next()).done; )
            isValidElement(node.value) && validateExplicitKey(node.value, parentType);
      }
    }
    function isValidElement(object) {
      return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function validateExplicitKey(element, parentType) {
      if (element._store && !element._store.validated && element.key == null && (element._store.validated = 1, parentType = getCurrentComponentErrorInfo(parentType), !ownerHasKeyUseWarning[parentType])) {
        ownerHasKeyUseWarning[parentType] = true;
        var childOwner = "";
        element && element._owner != null && element._owner !== getOwner() && (childOwner = null, typeof element._owner.tag === "number" ? childOwner = getComponentNameFromType(element._owner.type) : typeof element._owner.name === "string" && (childOwner = element._owner.name), childOwner = " It was passed a child from " + childOwner + ".");
        var prevGetCurrentStack = ReactSharedInternals.getCurrentStack;
        ReactSharedInternals.getCurrentStack = function() {
          var stack = describeUnknownElementTypeFrameInDEV(element.type);
          prevGetCurrentStack && (stack += prevGetCurrentStack() || "");
          return stack;
        };
        console.error('Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.', parentType, childOwner);
        ReactSharedInternals.getCurrentStack = prevGetCurrentStack;
      }
    }
    function getCurrentComponentErrorInfo(parentType) {
      var info = "", owner = getOwner();
      owner && (owner = getComponentNameFromType(owner.type)) && (info = `

Check the render method of \`` + owner + "`.");
      info || (parentType = getComponentNameFromType(parentType)) && (info = `

Check the top-level render call using <` + parentType + ">.");
      return info;
    }
    function escape(key) {
      var escaperLookup = { "=": "=0", ":": "=2" };
      return "$" + key.replace(/[=:]/g, function(match) {
        return escaperLookup[match];
      });
    }
    function getElementKey(element, index) {
      return typeof element === "object" && element !== null && element.key != null ? (checkKeyStringCoercion(element.key), escape("" + element.key)) : index.toString(36);
    }
    function noop$1() {
    }
    function resolveThenable(thenable) {
      switch (thenable.status) {
        case "fulfilled":
          return thenable.value;
        case "rejected":
          throw thenable.reason;
        default:
          switch (typeof thenable.status === "string" ? thenable.then(noop$1, noop$1) : (thenable.status = "pending", thenable.then(function(fulfilledValue) {
            thenable.status === "pending" && (thenable.status = "fulfilled", thenable.value = fulfilledValue);
          }, function(error) {
            thenable.status === "pending" && (thenable.status = "rejected", thenable.reason = error);
          })), thenable.status) {
            case "fulfilled":
              return thenable.value;
            case "rejected":
              throw thenable.reason;
          }
      }
      throw thenable;
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
      var type = typeof children;
      if (type === "undefined" || type === "boolean")
        children = null;
      var invokeCallback = false;
      if (children === null)
        invokeCallback = true;
      else
        switch (type) {
          case "bigint":
          case "string":
          case "number":
            invokeCallback = true;
            break;
          case "object":
            switch (children.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                invokeCallback = true;
                break;
              case REACT_LAZY_TYPE:
                return invokeCallback = children._init, mapIntoArray(invokeCallback(children._payload), array, escapedPrefix, nameSoFar, callback);
            }
        }
      if (invokeCallback) {
        invokeCallback = children;
        callback = callback(invokeCallback);
        var childKey = nameSoFar === "" ? "." + getElementKey(invokeCallback, 0) : nameSoFar;
        isArrayImpl(callback) ? (escapedPrefix = "", childKey != null && (escapedPrefix = childKey.replace(userProvidedKeyEscapeRegex, "$&/") + "/"), mapIntoArray(callback, array, escapedPrefix, "", function(c) {
          return c;
        })) : callback != null && (isValidElement(callback) && (callback.key != null && (invokeCallback && invokeCallback.key === callback.key || checkKeyStringCoercion(callback.key)), escapedPrefix = cloneAndReplaceKey(callback, escapedPrefix + (callback.key == null || invokeCallback && invokeCallback.key === callback.key ? "" : ("" + callback.key).replace(userProvidedKeyEscapeRegex, "$&/") + "/") + childKey), nameSoFar !== "" && invokeCallback != null && isValidElement(invokeCallback) && invokeCallback.key == null && invokeCallback._store && !invokeCallback._store.validated && (escapedPrefix._store.validated = 2), callback = escapedPrefix), array.push(callback));
        return 1;
      }
      invokeCallback = 0;
      childKey = nameSoFar === "" ? "." : nameSoFar + ":";
      if (isArrayImpl(children))
        for (var i = 0;i < children.length; i++)
          nameSoFar = children[i], type = childKey + getElementKey(nameSoFar, i), invokeCallback += mapIntoArray(nameSoFar, array, escapedPrefix, type, callback);
      else if (i = getIteratorFn(children), typeof i === "function")
        for (i === children.entries && (didWarnAboutMaps || console.warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = true), children = i.call(children), i = 0;!(nameSoFar = children.next()).done; )
          nameSoFar = nameSoFar.value, type = childKey + getElementKey(nameSoFar, i++), invokeCallback += mapIntoArray(nameSoFar, array, escapedPrefix, type, callback);
      else if (type === "object") {
        if (typeof children.then === "function")
          return mapIntoArray(resolveThenable(children), array, escapedPrefix, nameSoFar, callback);
        array = String(children);
        throw Error("Objects are not valid as a React child (found: " + (array === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : array) + "). If you meant to render a collection of children, use an array instead.");
      }
      return invokeCallback;
    }
    function mapChildren(children, func, context) {
      if (children == null)
        return children;
      var result = [], count = 0;
      mapIntoArray(children, result, "", "", function(child) {
        return func.call(context, child, count++);
      });
      return result;
    }
    function lazyInitializer(payload) {
      if (payload._status === -1) {
        var ctor = payload._result;
        ctor = ctor();
        ctor.then(function(moduleObject) {
          if (payload._status === 0 || payload._status === -1)
            payload._status = 1, payload._result = moduleObject;
        }, function(error) {
          if (payload._status === 0 || payload._status === -1)
            payload._status = 2, payload._result = error;
        });
        payload._status === -1 && (payload._status = 0, payload._result = ctor);
      }
      if (payload._status === 1)
        return ctor = payload._result, ctor === undefined && console.error(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))

Did you accidentally put curly braces around the import?`, ctor), "default" in ctor || console.error(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))`, ctor), ctor.default;
      throw payload._result;
    }
    function resolveDispatcher() {
      var dispatcher = ReactSharedInternals.H;
      dispatcher === null && console.error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.`);
      return dispatcher;
    }
    function noop() {
    }
    function enqueueTask(task) {
      if (enqueueTaskImpl === null)
        try {
          var requireString = ("require" + Math.random()).slice(0, 7);
          enqueueTaskImpl = (module && module[requireString]).call(module, "timers").setImmediate;
        } catch (_err) {
          enqueueTaskImpl = function(callback) {
            didWarnAboutMessageChannel === false && (didWarnAboutMessageChannel = true, typeof MessageChannel === "undefined" && console.error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."));
            var channel = new MessageChannel;
            channel.port1.onmessage = callback;
            channel.port2.postMessage(undefined);
          };
        }
      return enqueueTaskImpl(task);
    }
    function aggregateErrors(errors) {
      return 1 < errors.length && typeof AggregateError === "function" ? new AggregateError(errors) : errors[0];
    }
    function popActScope(prevActQueue, prevActScopeDepth) {
      prevActScopeDepth !== actScopeDepth - 1 && console.error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
      actScopeDepth = prevActScopeDepth;
    }
    function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
      var queue = ReactSharedInternals.actQueue;
      if (queue !== null)
        if (queue.length !== 0)
          try {
            flushActQueue(queue);
            enqueueTask(function() {
              return recursivelyFlushAsyncActWork(returnValue, resolve, reject);
            });
            return;
          } catch (error) {
            ReactSharedInternals.thrownErrors.push(error);
          }
        else
          ReactSharedInternals.actQueue = null;
      0 < ReactSharedInternals.thrownErrors.length ? (queue = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, reject(queue)) : resolve(returnValue);
    }
    function flushActQueue(queue) {
      if (!isFlushing) {
        isFlushing = true;
        var i = 0;
        try {
          for (;i < queue.length; i++) {
            var callback = queue[i];
            do {
              ReactSharedInternals.didUsePromise = false;
              var continuation = callback(false);
              if (continuation !== null) {
                if (ReactSharedInternals.didUsePromise) {
                  queue[i] = callback;
                  queue.splice(0, i);
                  return;
                }
                callback = continuation;
              } else
                break;
            } while (1);
          }
          queue.length = 0;
        } catch (error) {
          queue.splice(0, i + 1), ReactSharedInternals.thrownErrors.push(error);
        } finally {
          isFlushing = false;
        }
      }
    }
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
    var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    Symbol.for("react.provider");
    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, didWarnStateUpdateForUnmountedComponent = {}, ReactNoopUpdateQueue = {
      isMounted: function() {
        return false;
      },
      enqueueForceUpdate: function(publicInstance) {
        warnNoop(publicInstance, "forceUpdate");
      },
      enqueueReplaceState: function(publicInstance) {
        warnNoop(publicInstance, "replaceState");
      },
      enqueueSetState: function(publicInstance) {
        warnNoop(publicInstance, "setState");
      }
    }, assign = Object.assign, emptyObject = {};
    Object.freeze(emptyObject);
    Component.prototype.isReactComponent = {};
    Component.prototype.setState = function(partialState, callback) {
      if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null)
        throw Error("takes an object of state variables to update or a function which returns an object of state variables.");
      this.updater.enqueueSetState(this, partialState, callback, "setState");
    };
    Component.prototype.forceUpdate = function(callback) {
      this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
    };
    var deprecatedAPIs = {
      isMounted: [
        "isMounted",
        "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
      ],
      replaceState: [
        "replaceState",
        "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
      ]
    }, fnName;
    for (fnName in deprecatedAPIs)
      deprecatedAPIs.hasOwnProperty(fnName) && defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    ComponentDummy.prototype = Component.prototype;
    deprecatedAPIs = PureComponent.prototype = new ComponentDummy;
    deprecatedAPIs.constructor = PureComponent;
    assign(deprecatedAPIs, Component.prototype);
    deprecatedAPIs.isPureReactComponent = true;
    var isArrayImpl = Array.isArray, REACT_CLIENT_REFERENCE$2 = Symbol.for("react.client.reference"), ReactSharedInternals = {
      H: null,
      A: null,
      T: null,
      S: null,
      actQueue: null,
      isBatchingLegacy: false,
      didScheduleLegacyUpdate: false,
      didUsePromise: false,
      thrownErrors: [],
      getCurrentStack: null
    }, hasOwnProperty = Object.prototype.hasOwnProperty, REACT_CLIENT_REFERENCE$1 = Symbol.for("react.client.reference"), disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
    disabledLog.__reactDisabledLog = true;
    var prefix, suffix, reentry = false;
    var componentFrameCache = new (typeof WeakMap === "function" ? WeakMap : Map);
    var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), specialPropKeyWarningShown, didWarnAboutOldJSXRuntime;
    var didWarnAboutElementRef = {};
    var ownerHasKeyUseWarning = {}, didWarnAboutMaps = false, userProvidedKeyEscapeRegex = /\/+/g, reportGlobalError = typeof reportError === "function" ? reportError : function(error) {
      if (typeof window === "object" && typeof window.ErrorEvent === "function") {
        var event = new window.ErrorEvent("error", {
          bubbles: true,
          cancelable: true,
          message: typeof error === "object" && error !== null && typeof error.message === "string" ? String(error.message) : String(error),
          error
        });
        if (!window.dispatchEvent(event))
          return;
      } else if (typeof process === "object" && typeof process.emit === "function") {
        process.emit("uncaughtException", error);
        return;
      }
      console.error(error);
    }, didWarnAboutMessageChannel = false, enqueueTaskImpl = null, actScopeDepth = 0, didWarnNoAwaitAct = false, isFlushing = false, queueSeveralMicrotasks = typeof queueMicrotask === "function" ? function(callback) {
      queueMicrotask(function() {
        return queueMicrotask(callback);
      });
    } : enqueueTask;
    exports.Children = {
      map: mapChildren,
      forEach: function(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
          forEachFunc.apply(this, arguments);
        }, forEachContext);
      },
      count: function(children) {
        var n = 0;
        mapChildren(children, function() {
          n++;
        });
        return n;
      },
      toArray: function(children) {
        return mapChildren(children, function(child) {
          return child;
        }) || [];
      },
      only: function(children) {
        if (!isValidElement(children))
          throw Error("React.Children.only expected to receive a single React element child.");
        return children;
      }
    };
    exports.Component = Component;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.Profiler = REACT_PROFILER_TYPE;
    exports.PureComponent = PureComponent;
    exports.StrictMode = REACT_STRICT_MODE_TYPE;
    exports.Suspense = REACT_SUSPENSE_TYPE;
    exports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactSharedInternals;
    exports.act = function(callback) {
      var prevActQueue = ReactSharedInternals.actQueue, prevActScopeDepth = actScopeDepth;
      actScopeDepth++;
      var queue = ReactSharedInternals.actQueue = prevActQueue !== null ? prevActQueue : [], didAwaitActCall = false;
      try {
        var result = callback();
      } catch (error) {
        ReactSharedInternals.thrownErrors.push(error);
      }
      if (0 < ReactSharedInternals.thrownErrors.length)
        throw popActScope(prevActQueue, prevActScopeDepth), callback = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, callback;
      if (result !== null && typeof result === "object" && typeof result.then === "function") {
        var thenable = result;
        queueSeveralMicrotasks(function() {
          didAwaitActCall || didWarnNoAwaitAct || (didWarnNoAwaitAct = true, console.error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"));
        });
        return {
          then: function(resolve, reject) {
            didAwaitActCall = true;
            thenable.then(function(returnValue) {
              popActScope(prevActQueue, prevActScopeDepth);
              if (prevActScopeDepth === 0) {
                try {
                  flushActQueue(queue), enqueueTask(function() {
                    return recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  });
                } catch (error$2) {
                  ReactSharedInternals.thrownErrors.push(error$2);
                }
                if (0 < ReactSharedInternals.thrownErrors.length) {
                  var _thrownError = aggregateErrors(ReactSharedInternals.thrownErrors);
                  ReactSharedInternals.thrownErrors.length = 0;
                  reject(_thrownError);
                }
              } else
                resolve(returnValue);
            }, function(error) {
              popActScope(prevActQueue, prevActScopeDepth);
              0 < ReactSharedInternals.thrownErrors.length ? (error = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, reject(error)) : reject(error);
            });
          }
        };
      }
      var returnValue$jscomp$0 = result;
      popActScope(prevActQueue, prevActScopeDepth);
      prevActScopeDepth === 0 && (flushActQueue(queue), queue.length !== 0 && queueSeveralMicrotasks(function() {
        didAwaitActCall || didWarnNoAwaitAct || (didWarnNoAwaitAct = true, console.error("A component suspended inside an `act` scope, but the `act` call was not awaited. When testing React components that depend on asynchronous data, you must await the result:\n\nawait act(() => ...)"));
      }), ReactSharedInternals.actQueue = null);
      if (0 < ReactSharedInternals.thrownErrors.length)
        throw callback = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, callback;
      return {
        then: function(resolve, reject) {
          didAwaitActCall = true;
          prevActScopeDepth === 0 ? (ReactSharedInternals.actQueue = queue, enqueueTask(function() {
            return recursivelyFlushAsyncActWork(returnValue$jscomp$0, resolve, reject);
          })) : resolve(returnValue$jscomp$0);
        }
      };
    };
    exports.cache = function(fn) {
      return function() {
        return fn.apply(null, arguments);
      };
    };
    exports.cloneElement = function(element, config, children) {
      if (element === null || element === undefined)
        throw Error("The argument must be a React element, but you passed " + element + ".");
      var props = assign({}, element.props), key = element.key, owner = element._owner;
      if (config != null) {
        var JSCompiler_inline_result;
        a: {
          if (hasOwnProperty.call(config, "ref") && (JSCompiler_inline_result = Object.getOwnPropertyDescriptor(config, "ref").get) && JSCompiler_inline_result.isReactWarning) {
            JSCompiler_inline_result = false;
            break a;
          }
          JSCompiler_inline_result = config.ref !== undefined;
        }
        JSCompiler_inline_result && (owner = getOwner());
        hasValidKey(config) && (checkKeyStringCoercion(config.key), key = "" + config.key);
        for (propName in config)
          !hasOwnProperty.call(config, propName) || propName === "key" || propName === "__self" || propName === "__source" || propName === "ref" && config.ref === undefined || (props[propName] = config[propName]);
      }
      var propName = arguments.length - 2;
      if (propName === 1)
        props.children = children;
      else if (1 < propName) {
        JSCompiler_inline_result = Array(propName);
        for (var i = 0;i < propName; i++)
          JSCompiler_inline_result[i] = arguments[i + 2];
        props.children = JSCompiler_inline_result;
      }
      props = ReactElement(element.type, key, undefined, undefined, owner, props);
      for (key = 2;key < arguments.length; key++)
        validateChildKeys(arguments[key], props.type);
      return props;
    };
    exports.createContext = function(defaultValue) {
      defaultValue = {
        $$typeof: REACT_CONTEXT_TYPE,
        _currentValue: defaultValue,
        _currentValue2: defaultValue,
        _threadCount: 0,
        Provider: null,
        Consumer: null
      };
      defaultValue.Provider = defaultValue;
      defaultValue.Consumer = {
        $$typeof: REACT_CONSUMER_TYPE,
        _context: defaultValue
      };
      defaultValue._currentRenderer = null;
      defaultValue._currentRenderer2 = null;
      return defaultValue;
    };
    exports.createElement = function(type, config, children) {
      if (isValidElementType(type))
        for (var i = 2;i < arguments.length; i++)
          validateChildKeys(arguments[i], type);
      else {
        i = "";
        if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0)
          i += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
        if (type === null)
          var typeString = "null";
        else
          isArrayImpl(type) ? typeString = "array" : type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE ? (typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", i = " Did you accidentally export a JSX literal instead of a component?") : typeString = typeof type;
        console.error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, i);
      }
      var propName;
      i = {};
      typeString = null;
      if (config != null)
        for (propName in didWarnAboutOldJSXRuntime || !("__self" in config) || "key" in config || (didWarnAboutOldJSXRuntime = true, console.warn("Your app (or one of its dependencies) is using an outdated JSX transform. Update to the modern JSX transform for faster performance: https://react.dev/link/new-jsx-transform")), hasValidKey(config) && (checkKeyStringCoercion(config.key), typeString = "" + config.key), config)
          hasOwnProperty.call(config, propName) && propName !== "key" && propName !== "__self" && propName !== "__source" && (i[propName] = config[propName]);
      var childrenLength = arguments.length - 2;
      if (childrenLength === 1)
        i.children = children;
      else if (1 < childrenLength) {
        for (var childArray = Array(childrenLength), _i = 0;_i < childrenLength; _i++)
          childArray[_i] = arguments[_i + 2];
        Object.freeze && Object.freeze(childArray);
        i.children = childArray;
      }
      if (type && type.defaultProps)
        for (propName in childrenLength = type.defaultProps, childrenLength)
          i[propName] === undefined && (i[propName] = childrenLength[propName]);
      typeString && defineKeyPropWarningGetter(i, typeof type === "function" ? type.displayName || type.name || "Unknown" : type);
      return ReactElement(type, typeString, undefined, undefined, getOwner(), i);
    };
    exports.createRef = function() {
      var refObject = { current: null };
      Object.seal(refObject);
      return refObject;
    };
    exports.forwardRef = function(render) {
      render != null && render.$$typeof === REACT_MEMO_TYPE ? console.error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).") : typeof render !== "function" ? console.error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render) : render.length !== 0 && render.length !== 2 && console.error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
      render != null && render.defaultProps != null && console.error("forwardRef render functions do not support defaultProps. Did you accidentally pass a React component?");
      var elementType = { $$typeof: REACT_FORWARD_REF_TYPE, render }, ownName;
      Object.defineProperty(elementType, "displayName", {
        enumerable: false,
        configurable: true,
        get: function() {
          return ownName;
        },
        set: function(name) {
          ownName = name;
          render.name || render.displayName || (Object.defineProperty(render, "name", { value: name }), render.displayName = name);
        }
      });
      return elementType;
    };
    exports.isValidElement = isValidElement;
    exports.lazy = function(ctor) {
      return {
        $$typeof: REACT_LAZY_TYPE,
        _payload: { _status: -1, _result: ctor },
        _init: lazyInitializer
      };
    };
    exports.memo = function(type, compare) {
      isValidElementType(type) || console.error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
      compare = {
        $$typeof: REACT_MEMO_TYPE,
        type,
        compare: compare === undefined ? null : compare
      };
      var ownName;
      Object.defineProperty(compare, "displayName", {
        enumerable: false,
        configurable: true,
        get: function() {
          return ownName;
        },
        set: function(name) {
          ownName = name;
          type.name || type.displayName || (Object.defineProperty(type, "name", { value: name }), type.displayName = name);
        }
      });
      return compare;
    };
    exports.startTransition = function(scope) {
      var prevTransition = ReactSharedInternals.T, currentTransition = {};
      ReactSharedInternals.T = currentTransition;
      currentTransition._updatedFibers = new Set;
      try {
        var returnValue = scope(), onStartTransitionFinish = ReactSharedInternals.S;
        onStartTransitionFinish !== null && onStartTransitionFinish(currentTransition, returnValue);
        typeof returnValue === "object" && returnValue !== null && typeof returnValue.then === "function" && returnValue.then(noop, reportGlobalError);
      } catch (error) {
        reportGlobalError(error);
      } finally {
        prevTransition === null && currentTransition._updatedFibers && (scope = currentTransition._updatedFibers.size, currentTransition._updatedFibers.clear(), 10 < scope && console.warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.")), ReactSharedInternals.T = prevTransition;
      }
    };
    exports.unstable_useCacheRefresh = function() {
      return resolveDispatcher().useCacheRefresh();
    };
    exports.use = function(usable) {
      return resolveDispatcher().use(usable);
    };
    exports.useActionState = function(action, initialState, permalink) {
      return resolveDispatcher().useActionState(action, initialState, permalink);
    };
    exports.useCallback = function(callback, deps) {
      return resolveDispatcher().useCallback(callback, deps);
    };
    exports.useContext = function(Context) {
      var dispatcher = resolveDispatcher();
      Context.$$typeof === REACT_CONSUMER_TYPE && console.error("Calling useContext(Context.Consumer) is not supported and will cause bugs. Did you mean to call useContext(Context) instead?");
      return dispatcher.useContext(Context);
    };
    exports.useDebugValue = function(value, formatterFn) {
      return resolveDispatcher().useDebugValue(value, formatterFn);
    };
    exports.useDeferredValue = function(value, initialValue) {
      return resolveDispatcher().useDeferredValue(value, initialValue);
    };
    exports.useEffect = function(create, deps) {
      return resolveDispatcher().useEffect(create, deps);
    };
    exports.useId = function() {
      return resolveDispatcher().useId();
    };
    exports.useImperativeHandle = function(ref, create, deps) {
      return resolveDispatcher().useImperativeHandle(ref, create, deps);
    };
    exports.useInsertionEffect = function(create, deps) {
      return resolveDispatcher().useInsertionEffect(create, deps);
    };
    exports.useLayoutEffect = function(create, deps) {
      return resolveDispatcher().useLayoutEffect(create, deps);
    };
    exports.useMemo = function(create, deps) {
      return resolveDispatcher().useMemo(create, deps);
    };
    exports.useOptimistic = function(passthrough, reducer) {
      return resolveDispatcher().useOptimistic(passthrough, reducer);
    };
    exports.useReducer = function(reducer, initialArg, init) {
      return resolveDispatcher().useReducer(reducer, initialArg, init);
    };
    exports.useRef = function(initialValue) {
      return resolveDispatcher().useRef(initialValue);
    };
    exports.useState = function(initialState) {
      return resolveDispatcher().useState(initialState);
    };
    exports.useSyncExternalStore = function(subscribe, getSnapshot, getServerSnapshot) {
      return resolveDispatcher().useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    };
    exports.useTransition = function() {
      return resolveDispatcher().useTransition();
    };
    exports.version = "19.0.0";
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
  })();
});

// node_modules/react/index.js
var require_react = __commonJS((exports, module) => {
  var react_development = __toESM(require_react_development(), 1);
  if (false) {
  } else {
    module.exports = react_development;
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS((exports) => {
  if (true) {
    (function() {
      var hasSymbol = typeof Symbol === "function" && Symbol.for;
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
      var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
      var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
      var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
      var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
      function isValidElementType(type) {
        return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
      }
      function typeOf(object) {
        if (typeof object === "object" && object !== null) {
          var $$typeof = object.$$typeof;
          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type;
              switch (type) {
                case REACT_ASYNC_MODE_TYPE:
                case REACT_CONCURRENT_MODE_TYPE:
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                  return type;
                default:
                  var $$typeofType = type && type.$$typeof;
                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;
                    default:
                      return $$typeof;
                  }
              }
            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }
        return;
      }
      var AsyncMode = REACT_ASYNC_MODE_TYPE;
      var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element2 = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false;
      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true;
            console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, " + "and will be removed in React 17+. Update your code to use " + "ReactIs.isConcurrentMode() instead. It has the exact same API.");
          }
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
      }
      function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
      }
      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }
      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }
      function isElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }
      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }
      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }
      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }
      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }
      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }
      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }
      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }
      exports.AsyncMode = AsyncMode;
      exports.ConcurrentMode = ConcurrentMode;
      exports.ContextConsumer = ContextConsumer;
      exports.ContextProvider = ContextProvider;
      exports.Element = Element2;
      exports.ForwardRef = ForwardRef;
      exports.Fragment = Fragment;
      exports.Lazy = Lazy;
      exports.Memo = Memo;
      exports.Portal = Portal;
      exports.Profiler = Profiler;
      exports.StrictMode = StrictMode;
      exports.Suspense = Suspense;
      exports.isAsyncMode = isAsyncMode;
      exports.isConcurrentMode = isConcurrentMode;
      exports.isContextConsumer = isContextConsumer;
      exports.isContextProvider = isContextProvider;
      exports.isElement = isElement;
      exports.isForwardRef = isForwardRef;
      exports.isFragment = isFragment;
      exports.isLazy = isLazy;
      exports.isMemo = isMemo;
      exports.isPortal = isPortal;
      exports.isProfiler = isProfiler;
      exports.isStrictMode = isStrictMode;
      exports.isSuspense = isSuspense;
      exports.isValidElementType = isValidElementType;
      exports.typeOf = typeOf;
    })();
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS((exports, module) => {
  var react_is_development = __toESM(require_react_is_development(), 1);
  if (false) {
  } else {
    module.exports = react_is_development;
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS((exports, module) => {
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;
  function toObject(val) {
    if (val === null || val === undefined) {
      throw new TypeError("Object.assign cannot be called with null or undefined");
    }
    return Object(val);
  }
  function shouldUseNative() {
    try {
      if (!Object.assign) {
        return false;
      }
      var test1 = new String("abc");
      test1[5] = "de";
      if (Object.getOwnPropertyNames(test1)[0] === "5") {
        return false;
      }
      var test2 = {};
      for (var i = 0;i < 10; i++) {
        test2["_" + String.fromCharCode(i)] = i;
      }
      var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
        return test2[n];
      });
      if (order2.join("") !== "0123456789") {
        return false;
      }
      var test3 = {};
      "abcdefghijklmnopqrst".split("").forEach(function(letter) {
        test3[letter] = letter;
      });
      if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
        return false;
      }
      return true;
    } catch (err) {
      return false;
    }
  }
  module.exports = shouldUseNative() ? Object.assign : function(target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for (var s = 1;s < arguments.length; s++) {
      from = Object(arguments[s]);
      for (var key in from) {
        if (hasOwnProperty.call(from, key)) {
          to[key] = from[key];
        }
      }
      if (getOwnPropertySymbols) {
        symbols = getOwnPropertySymbols(from);
        for (var i = 0;i < symbols.length; i++) {
          if (propIsEnumerable.call(from, symbols[i])) {
            to[symbols[i]] = from[symbols[i]];
          }
        }
      }
    }
    return to;
  };
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS((exports, module) => {
  var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
  module.exports = ReactPropTypesSecret;
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS((exports, module) => {
  module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS((exports, module) => {
  var printWarning = function() {
  };
  if (true) {
    ReactPropTypesSecret = require_ReactPropTypesSecret();
    loggedTypeFailures = {};
    has = require_has();
    printWarning = function(text) {
      var message = "Warning: " + text;
      if (typeof console !== "undefined") {
        console.error(message);
      }
      try {
        throw new Error(message);
      } catch (x) {
      }
    };
  }
  var ReactPropTypesSecret;
  var loggedTypeFailures;
  var has;
  function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    if (true) {
      for (var typeSpecName in typeSpecs) {
        if (has(typeSpecs, typeSpecName)) {
          var error;
          try {
            if (typeof typeSpecs[typeSpecName] !== "function") {
              var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
              err.name = "Invariant Violation";
              throw err;
            }
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
          } catch (ex) {
            error = ex;
          }
          if (error && !(error instanceof Error)) {
            printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker " + "function must return `null` or an `Error` but returned a " + typeof error + ". " + "You may have forgotten to pass an argument to the type checker " + "creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and " + "shape all require an argument).");
          }
          if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : "";
            printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
          }
        }
      }
    }
  }
  checkPropTypes.resetWarningCache = function() {
    if (true) {
      loggedTypeFailures = {};
    }
  };
  module.exports = checkPropTypes;
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS((exports, module) => {
  var ReactIs = __toESM(require_react_is(), 1);
  var assign = require_object_assign();
  var ReactPropTypesSecret = require_ReactPropTypesSecret();
  var has = require_has();
  var checkPropTypes = require_checkPropTypes();
  var printWarning = function() {
  };
  if (true) {
    printWarning = function(text) {
      var message = "Warning: " + text;
      if (typeof console !== "undefined") {
        console.error(message);
      }
      try {
        throw new Error(message);
      } catch (x) {
      }
    };
  }
  function emptyFunctionThatReturnsNull() {
    return null;
  }
  module.exports = function(isValidElement, throwOnDirectAccess) {
    var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
      var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
      if (typeof iteratorFn === "function") {
        return iteratorFn;
      }
    }
    var ANONYMOUS = "<<anonymous>>";
    var ReactPropTypes = {
      array: createPrimitiveTypeChecker("array"),
      bigint: createPrimitiveTypeChecker("bigint"),
      bool: createPrimitiveTypeChecker("boolean"),
      func: createPrimitiveTypeChecker("function"),
      number: createPrimitiveTypeChecker("number"),
      object: createPrimitiveTypeChecker("object"),
      string: createPrimitiveTypeChecker("string"),
      symbol: createPrimitiveTypeChecker("symbol"),
      any: createAnyTypeChecker(),
      arrayOf: createArrayOfTypeChecker,
      element: createElementTypeChecker(),
      elementType: createElementTypeTypeChecker(),
      instanceOf: createInstanceTypeChecker,
      node: createNodeChecker(),
      objectOf: createObjectOfTypeChecker,
      oneOf: createEnumTypeChecker,
      oneOfType: createUnionTypeChecker,
      shape: createShapeTypeChecker,
      exact: createStrictShapeTypeChecker
    };
    function is(x, y) {
      if (x === y) {
        return x !== 0 || 1 / x === 1 / y;
      } else {
        return x !== x && y !== y;
      }
    }
    function PropTypeError(message, data) {
      this.message = message;
      this.data = data && typeof data === "object" ? data : {};
      this.stack = "";
    }
    PropTypeError.prototype = Error.prototype;
    function createChainableTypeChecker(validate) {
      if (true) {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
      }
      function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
        componentName = componentName || ANONYMOUS;
        propFullName = propFullName || propName;
        if (secret !== ReactPropTypesSecret) {
          if (throwOnDirectAccess) {
            var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. " + "Use `PropTypes.checkPropTypes()` to call them. " + "Read more at http://fb.me/use-check-prop-types");
            err.name = "Invariant Violation";
            throw err;
          } else if (typeof console !== "undefined") {
            var cacheKey = componentName + ":" + propName;
            if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
              printWarning("You are manually calling a React.PropTypes validation " + "function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated " + "and will throw in the standalone `prop-types` package. " + "You may be seeing this warning due to a third-party PropTypes " + "library. See https://fb.me/react-warning-dont-call-proptypes " + "for details.");
              manualPropTypeCallCache[cacheKey] = true;
              manualPropTypeWarningCount++;
            }
          }
        }
        if (props[propName] == null) {
          if (isRequired) {
            if (props[propName] === null) {
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
            }
            return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
          }
          return null;
        } else {
          return validate(props, propName, componentName, location, propFullName);
        }
      }
      var chainedCheckType = checkType.bind(null, false);
      chainedCheckType.isRequired = checkType.bind(null, true);
      return chainedCheckType;
    }
    function createPrimitiveTypeChecker(expectedType) {
      function validate(props, propName, componentName, location, propFullName, secret) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== expectedType) {
          var preciseType = getPreciseType(propValue);
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."), { expectedType });
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createAnyTypeChecker() {
      return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }
    function createArrayOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== "function") {
          return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
        }
        var propValue = props[propName];
        if (!Array.isArray(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
        }
        for (var i = 0;i < propValue.length; i++) {
          var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createElementTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        if (!isValidElement(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createElementTypeTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        if (!ReactIs.isValidElementType(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createInstanceTypeChecker(expectedClass) {
      function validate(props, propName, componentName, location, propFullName) {
        if (!(props[propName] instanceof expectedClass)) {
          var expectedClassName = expectedClass.name || ANONYMOUS;
          var actualClassName = getClassName(props[propName]);
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createEnumTypeChecker(expectedValues) {
      if (!Array.isArray(expectedValues)) {
        if (true) {
          if (arguments.length > 1) {
            printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. " + "A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
          } else {
            printWarning("Invalid argument supplied to oneOf, expected an array.");
          }
        }
        return emptyFunctionThatReturnsNull;
      }
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        for (var i = 0;i < expectedValues.length; i++) {
          if (is(propValue, expectedValues[i])) {
            return null;
          }
        }
        var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
          var type = getPreciseType(value);
          if (type === "symbol") {
            return String(value);
          }
          return value;
        });
        return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
      }
      return createChainableTypeChecker(validate);
    }
    function createObjectOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== "function") {
          return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
        }
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== "object") {
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
        }
        for (var key in propValue) {
          if (has(propValue, key)) {
            var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createUnionTypeChecker(arrayOfTypeCheckers) {
      if (!Array.isArray(arrayOfTypeCheckers)) {
        printWarning("Invalid argument supplied to oneOfType, expected an instance of array.");
        return emptyFunctionThatReturnsNull;
      }
      for (var i = 0;i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (typeof checker !== "function") {
          printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but " + "received " + getPostfixForTypeWarning(checker) + " at index " + i + ".");
          return emptyFunctionThatReturnsNull;
        }
      }
      function validate(props, propName, componentName, location, propFullName) {
        var expectedTypes = [];
        for (var i2 = 0;i2 < arrayOfTypeCheckers.length; i2++) {
          var checker2 = arrayOfTypeCheckers[i2];
          var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
          if (checkerResult == null) {
            return null;
          }
          if (checkerResult.data && has(checkerResult.data, "expectedType")) {
            expectedTypes.push(checkerResult.data.expectedType);
          }
        }
        var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
        return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
      }
      return createChainableTypeChecker(validate);
    }
    function createNodeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        if (!isNode(props[propName])) {
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function invalidValidatorError(componentName, location, propFullName, key, type) {
      return new PropTypeError((componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + type + "`.");
    }
    function createShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== "object") {
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
        }
        for (var key in shapeTypes) {
          var checker = shapeTypes[key];
          if (typeof checker !== "function") {
            return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
          }
          var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
          if (error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createStrictShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== "object") {
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
        }
        var allKeys = assign({}, props[propName], shapeTypes);
        for (var key in allKeys) {
          var checker = shapeTypes[key];
          if (has(shapeTypes, key) && typeof checker !== "function") {
            return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
          }
          if (!checker) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`." + `
Bad object: ` + JSON.stringify(props[propName], null, "  ") + `
Valid keys: ` + JSON.stringify(Object.keys(shapeTypes), null, "  "));
          }
          var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
          if (error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function isNode(propValue) {
      switch (typeof propValue) {
        case "number":
        case "string":
        case "undefined":
          return true;
        case "boolean":
          return !propValue;
        case "object":
          if (Array.isArray(propValue)) {
            return propValue.every(isNode);
          }
          if (propValue === null || isValidElement(propValue)) {
            return true;
          }
          var iteratorFn = getIteratorFn(propValue);
          if (iteratorFn) {
            var iterator = iteratorFn.call(propValue);
            var step;
            if (iteratorFn !== propValue.entries) {
              while (!(step = iterator.next()).done) {
                if (!isNode(step.value)) {
                  return false;
                }
              }
            } else {
              while (!(step = iterator.next()).done) {
                var entry = step.value;
                if (entry) {
                  if (!isNode(entry[1])) {
                    return false;
                  }
                }
              }
            }
          } else {
            return false;
          }
          return true;
        default:
          return false;
      }
    }
    function isSymbol(propType, propValue) {
      if (propType === "symbol") {
        return true;
      }
      if (!propValue) {
        return false;
      }
      if (propValue["@@toStringTag"] === "Symbol") {
        return true;
      }
      if (typeof Symbol === "function" && propValue instanceof Symbol) {
        return true;
      }
      return false;
    }
    function getPropType(propValue) {
      var propType = typeof propValue;
      if (Array.isArray(propValue)) {
        return "array";
      }
      if (propValue instanceof RegExp) {
        return "object";
      }
      if (isSymbol(propType, propValue)) {
        return "symbol";
      }
      return propType;
    }
    function getPreciseType(propValue) {
      if (typeof propValue === "undefined" || propValue === null) {
        return "" + propValue;
      }
      var propType = getPropType(propValue);
      if (propType === "object") {
        if (propValue instanceof Date) {
          return "date";
        } else if (propValue instanceof RegExp) {
          return "regexp";
        }
      }
      return propType;
    }
    function getPostfixForTypeWarning(value) {
      var type = getPreciseType(value);
      switch (type) {
        case "array":
        case "object":
          return "an " + type;
        case "boolean":
        case "date":
        case "regexp":
          return "a " + type;
        default:
          return type;
      }
    }
    function getClassName(propValue) {
      if (!propValue.constructor || !propValue.constructor.name) {
        return ANONYMOUS;
      }
      return propValue.constructor.name;
    }
    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS((exports, module) => {
  var ReactIs = __toESM(require_react_is(), 1);
  if (true) {
    throwOnDirectAccess = true;
    module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
  } else {
  }
  var throwOnDirectAccess;
});

// node_modules/classnames/index.js
var require_classnames = __commonJS((exports, module) => {
  /*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  */
  (function() {
    var hasOwn = {}.hasOwnProperty;
    function classNames() {
      var classes = "";
      for (var i = 0;i < arguments.length; i++) {
        var arg = arguments[i];
        if (arg) {
          classes = appendClass(classes, parseValue(arg));
        }
      }
      return classes;
    }
    function parseValue(arg) {
      if (typeof arg === "string" || typeof arg === "number") {
        return arg;
      }
      if (typeof arg !== "object") {
        return "";
      }
      if (Array.isArray(arg)) {
        return classNames.apply(null, arg);
      }
      if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
        return arg.toString();
      }
      var classes = "";
      for (var key in arg) {
        if (hasOwn.call(arg, key) && arg[key]) {
          classes = appendClass(classes, key);
        }
      }
      return classes;
    }
    function appendClass(value, newClass) {
      if (!newClass) {
        return value;
      }
      if (value) {
        return value + " " + newClass;
      }
      return value + newClass;
    }
    if (typeof module !== "undefined" && module.exports) {
      classNames.default = classNames;
      module.exports = classNames;
    } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
      define("classnames", [], function() {
        return classNames;
      });
    } else {
      window.classNames = classNames;
    }
  })();
});

// node_modules/balanced-match/index.js
var require_balanced_match = __commonJS((exports, module) => {
  module.exports = balanced;
  function balanced(a, b, str) {
    if (a instanceof RegExp)
      a = maybeMatch(a, str);
    if (b instanceof RegExp)
      b = maybeMatch(b, str);
    var r = range(a, b, str);
    return r && {
      start: r[0],
      end: r[1],
      pre: str.slice(0, r[0]),
      body: str.slice(r[0] + a.length, r[1]),
      post: str.slice(r[1] + b.length)
    };
  }
  function maybeMatch(reg, str) {
    var m = str.match(reg);
    return m ? m[0] : null;
  }
  balanced.range = range;
  function range(a, b, str) {
    var begs, beg, left, right, result;
    var ai = str.indexOf(a);
    var bi = str.indexOf(b, ai + 1);
    var i = ai;
    if (ai >= 0 && bi > 0) {
      begs = [];
      left = str.length;
      while (i >= 0 && !result) {
        if (i == ai) {
          begs.push(i);
          ai = str.indexOf(a, i + 1);
        } else if (begs.length == 1) {
          result = [begs.pop(), bi];
        } else {
          beg = begs.pop();
          if (beg < left) {
            left = beg;
            right = bi;
          }
          bi = str.indexOf(b, i + 1);
        }
        i = ai < bi && ai >= 0 ? ai : bi;
      }
      if (begs.length) {
        result = [left, right];
      }
    }
    return result;
  }
});

// node_modules/reduce-function-call/node_modules/balanced-match/index.js
var require_balanced_match2 = __commonJS((exports, module) => {
  module.exports = balanced;
  function balanced(a, b, str) {
    if (a instanceof RegExp)
      a = maybeMatch(a, str);
    if (b instanceof RegExp)
      b = maybeMatch(b, str);
    var r = range(a, b, str);
    return r && {
      start: r[0],
      end: r[1],
      pre: str.slice(0, r[0]),
      body: str.slice(r[0] + a.length, r[1]),
      post: str.slice(r[1] + b.length)
    };
  }
  function maybeMatch(reg, str) {
    var m = str.match(reg);
    return m ? m[0] : null;
  }
  balanced.range = range;
  function range(a, b, str) {
    var begs, beg, left, right, result;
    var ai = str.indexOf(a);
    var bi = str.indexOf(b, ai + 1);
    var i = ai;
    if (ai >= 0 && bi > 0) {
      if (a === b) {
        return [ai, bi];
      }
      begs = [];
      left = str.length;
      while (i >= 0 && !result) {
        if (i == ai) {
          begs.push(i);
          ai = str.indexOf(a, i + 1);
        } else if (begs.length == 1) {
          result = [begs.pop(), bi];
        } else {
          beg = begs.pop();
          if (beg < left) {
            left = beg;
            right = bi;
          }
          bi = str.indexOf(b, i + 1);
        }
        i = ai < bi && ai >= 0 ? ai : bi;
      }
      if (begs.length) {
        result = [left, right];
      }
    }
    return result;
  }
});

// node_modules/reduce-function-call/index.js
var require_reduce_function_call = __commonJS((exports, module) => {
  var balanced = require_balanced_match2();
  module.exports = reduceFunctionCall;
  function reduceFunctionCall(string, functionRE, callback) {
    var call = string;
    return getFunctionCalls(string, functionRE).reduce(function(string2, obj) {
      return string2.replace(obj.functionIdentifier + "(" + obj.matches.body + ")", evalFunctionCall(obj.matches.body, obj.functionIdentifier, callback, call, functionRE));
    }, string);
  }
  function getFunctionCalls(call, functionRE) {
    var expressions = [];
    var fnRE = typeof functionRE === "string" ? new RegExp("\\b(" + functionRE + ")\\(") : functionRE;
    do {
      var searchMatch = fnRE.exec(call);
      if (!searchMatch) {
        return expressions;
      }
      if (searchMatch[1] === undefined) {
        throw new Error("Missing the first couple of parenthesis to get the function identifier in " + functionRE);
      }
      var fn = searchMatch[1];
      var startIndex = searchMatch.index;
      var matches = balanced("(", ")", call.substring(startIndex));
      if (!matches || matches.start !== searchMatch[0].length - 1) {
        throw new SyntaxError(fn + "(): missing closing ')' in the value '" + call + "'");
      }
      expressions.push({ matches, functionIdentifier: fn });
      call = matches.post;
    } while (fnRE.test(call));
    return expressions;
  }
  function evalFunctionCall(string, functionIdentifier, callback, call, functionRE) {
    return callback(reduceFunctionCall(string, functionRE, callback), functionIdentifier, call);
  }
});

// node_modules/math-expression-evaluator/src/math_function.js
var require_math_function = __commonJS((exports, module) => {
  var Mexp = function(parsed) {
    this.value = parsed;
  };
  Mexp.math = {
    isDegree: true,
    acos: function(x) {
      return Mexp.math.isDegree ? 180 / Math.PI * Math.acos(x) : Math.acos(x);
    },
    add: function(a, b) {
      return a + b;
    },
    asin: function(x) {
      return Mexp.math.isDegree ? 180 / Math.PI * Math.asin(x) : Math.asin(x);
    },
    atan: function(x) {
      return Mexp.math.isDegree ? 180 / Math.PI * Math.atan(x) : Math.atan(x);
    },
    acosh: function(x) {
      return Math.log(x + Math.sqrt(x * x - 1));
    },
    asinh: function(x) {
      return Math.log(x + Math.sqrt(x * x + 1));
    },
    atanh: function(x) {
      return Math.log((1 + x) / (1 - x));
    },
    C: function(n, r) {
      var pro = 1;
      var other = n - r;
      var choice = r;
      if (choice < other) {
        choice = other;
        other = r;
      }
      for (var i = choice + 1;i <= n; i++) {
        pro *= i;
      }
      return pro / Mexp.math.fact(other);
    },
    changeSign: function(x) {
      return -x;
    },
    cos: function(x) {
      if (Mexp.math.isDegree)
        x = Mexp.math.toRadian(x);
      return Math.cos(x);
    },
    cosh: function(x) {
      return (Math.pow(Math.E, x) + Math.pow(Math.E, -1 * x)) / 2;
    },
    div: function(a, b) {
      return a / b;
    },
    fact: function(n) {
      if (n % 1 !== 0)
        return "NaN";
      var pro = 1;
      for (var i = 2;i <= n; i++) {
        pro *= i;
      }
      return pro;
    },
    inverse: function(x) {
      return 1 / x;
    },
    log: function(i) {
      return Math.log(i) / Math.log(10);
    },
    mod: function(a, b) {
      return a % b;
    },
    mul: function(a, b) {
      return a * b;
    },
    P: function(n, r) {
      var pro = 1;
      for (var i = Math.floor(n) - Math.floor(r) + 1;i <= Math.floor(n); i++) {
        pro *= i;
      }
      return pro;
    },
    Pi: function(low, high, ex) {
      var pro = 1;
      for (var i = low;i <= high; i++) {
        pro *= Number(ex.postfixEval({
          n: i
        }));
      }
      return pro;
    },
    pow10x: function(e) {
      var x = 1;
      while (e--) {
        x *= 10;
      }
      return x;
    },
    sigma: function(low, high, ex) {
      var sum = 0;
      for (var i = low;i <= high; i++) {
        sum += Number(ex.postfixEval({
          n: i
        }));
      }
      return sum;
    },
    sin: function(x) {
      if (Mexp.math.isDegree)
        x = Mexp.math.toRadian(x);
      return Math.sin(x);
    },
    sinh: function(x) {
      return (Math.pow(Math.E, x) - Math.pow(Math.E, -1 * x)) / 2;
    },
    sub: function(a, b) {
      return a - b;
    },
    tan: function(x) {
      if (Mexp.math.isDegree)
        x = Mexp.math.toRadian(x);
      return Math.tan(x);
    },
    tanh: function(x) {
      return Mexp.sinha(x) / Mexp.cosha(x);
    },
    toRadian: function(x) {
      return x * Math.PI / 180;
    },
    and: function(a, b) {
      return a & b;
    }
  };
  Mexp.Exception = function(message) {
    this.message = message;
  };
  module.exports = Mexp;
});

// node_modules/math-expression-evaluator/src/lexer.js
var require_lexer = __commonJS((exports, module) => {
  var Mexp = require_math_function();
  function inc(arr, val) {
    for (var i2 = 0;i2 < arr.length; i2++) {
      arr[i2] += val;
    }
    return arr;
  }
  var tokens = [
    { token: "sin", show: "sin", type: 0, value: Mexp.math.sin },
    { token: "cos", show: "cos", type: 0, value: Mexp.math.cos },
    { token: "tan", show: "tan", type: 0, value: Mexp.math.tan },
    { token: "pi", show: "&pi;", type: 3, value: "PI" },
    { token: "(", show: "(", type: 4, value: "(" },
    { token: ")", show: ")", type: 5, value: ")" },
    { token: "P", show: "P", type: 10, value: Mexp.math.P },
    { token: "C", show: "C", type: 10, value: Mexp.math.C },
    { token: " ", show: " ", type: 14, value: " ".anchor },
    { token: "asin", show: "asin", type: 0, value: Mexp.math.asin },
    { token: "acos", show: "acos", type: 0, value: Mexp.math.acos },
    { token: "atan", show: "atan", type: 0, value: Mexp.math.atan },
    { token: "7", show: "7", type: 1, value: "7" },
    { token: "8", show: "8", type: 1, value: "8" },
    { token: "9", show: "9", type: 1, value: "9" },
    { token: "int", show: "Int", type: 0, value: Math.floor },
    { token: "cosh", show: "cosh", type: 0, value: Mexp.math.cosh },
    { token: "acosh", show: "acosh", type: 0, value: Mexp.math.acosh },
    { token: "ln", show: " ln", type: 0, value: Math.log },
    { token: "^", show: "^", type: 10, value: Math.pow },
    { token: "root", show: "root", type: 0, value: Math.sqrt },
    { token: "4", show: "4", type: 1, value: "4" },
    { token: "5", show: "5", type: 1, value: "5" },
    { token: "6", show: "6", type: 1, value: "6" },
    { token: "/", show: "&divide;", type: 2, value: Mexp.math.div },
    { token: "!", show: "!", type: 7, value: Mexp.math.fact },
    { token: "tanh", show: "tanh", type: 0, value: Mexp.math.tanh },
    { token: "atanh", show: "atanh", type: 0, value: Mexp.math.atanh },
    { token: "Mod", show: " Mod ", type: 2, value: Mexp.math.mod },
    { token: "1", show: "1", type: 1, value: "1" },
    { token: "2", show: "2", type: 1, value: "2" },
    { token: "3", show: "3", type: 1, value: "3" },
    { token: "*", show: "&times;", type: 2, value: Mexp.math.mul },
    { token: "sinh", show: "sinh", type: 0, value: Mexp.math.sinh },
    { token: "asinh", show: "asinh", type: 0, value: Mexp.math.asinh },
    { token: "e", show: "e", type: 3, value: "E" },
    { token: "log", show: " log", type: 0, value: Mexp.math.log },
    { token: "0", show: "0", type: 1, value: "0" },
    { token: ".", show: ".", type: 6, value: "." },
    { token: "+", show: "+", type: 9, value: Mexp.math.add },
    { token: "-", show: "-", type: 9, value: Mexp.math.sub },
    { token: ",", show: ",", type: 11, value: "," },
    { token: "Sigma", show: "&Sigma;", type: 12, value: Mexp.math.sigma },
    { token: "n", show: "n", type: 13, value: "n" },
    { token: "Pi", show: "&Pi;", type: 12, value: Mexp.math.Pi },
    { token: "pow", show: "pow", type: 8, value: Math.pow, numberOfArguments: 2 },
    { token: "&", show: "&", type: 9, value: Mexp.math.and }
  ];
  var preced = {
    0: 11,
    1: 0,
    2: 3,
    3: 0,
    4: 0,
    5: 0,
    6: 0,
    7: 11,
    8: 11,
    9: 1,
    10: 10,
    11: 0,
    12: 11,
    13: 0,
    14: -1,
    15: 11
  };
  for (i = 0;i < tokens.length; i++) {
    tokens[i].precedence = preced[tokens[i].type];
  }
  var i;
  var type0 = {
    0: true,
    1: true,
    3: true,
    4: true,
    6: true,
    8: true,
    9: true,
    12: true,
    13: true,
    14: true,
    15: true
  };
  var type1 = {
    0: true,
    1: true,
    2: true,
    3: true,
    4: true,
    5: true,
    6: true,
    7: true,
    8: true,
    9: true,
    10: true,
    11: true,
    12: true,
    13: true,
    15: true
  };
  var type1Asterick = {
    0: true,
    3: true,
    4: true,
    8: true,
    12: true,
    13: true,
    15: true
  };
  var empty = {};
  var type3Asterick = {
    0: true,
    1: true,
    3: true,
    4: true,
    6: true,
    8: true,
    12: true,
    13: true,
    15: true
  };
  var type6 = {
    1: true
  };
  var newAr = [
    [],
    [
      "1",
      "2",
      "3",
      "7",
      "8",
      "9",
      "4",
      "5",
      "6",
      "+",
      "-",
      "*",
      "/",
      "(",
      ")",
      "^",
      "!",
      "P",
      "C",
      "e",
      "0",
      ".",
      ",",
      "n",
      " ",
      "&"
    ],
    ["pi", "ln", "Pi"],
    ["sin", "cos", "tan", "Del", "int", "Mod", "log", "pow"],
    ["asin", "acos", "atan", "cosh", "root", "tanh", "sinh"],
    ["acosh", "atanh", "asinh", "Sigma"]
  ];
  function match(str1, str2, i2, x) {
    for (var f = 0;f < x; f++) {
      if (str1[i2 + f] !== str2[f]) {
        return false;
      }
    }
    return true;
  }
  Mexp.tokenTypes = {
    FUNCTION_WITH_ONE_ARG: 0,
    NUMBER: 1,
    BINARY_OPERATOR_HIGH_PRECENDENCE: 2,
    CONSTANT: 3,
    OPENING_PARENTHESIS: 4,
    CLOSING_PARENTHESIS: 5,
    DECIMAL: 6,
    POSTFIX_FUNCTION_WITH_ONE_ARG: 7,
    FUNCTION_WITH_N_ARGS: 8,
    BINARY_OPERATOR_LOW_PRECENDENCE: 9,
    BINARY_OPERATOR_PERMUTATION: 10,
    COMMA: 11,
    EVALUATED_FUNCTION: 12,
    EVALUATED_FUNCTION_PARAMETER: 13,
    SPACE: 14
  };
  Mexp.addToken = function(newTokens) {
    for (var i2 = 0;i2 < newTokens.length; i2++) {
      var x = newTokens[i2].token.length;
      var temp = -1;
      if (newTokens[i2].type === Mexp.tokenTypes.FUNCTION_WITH_N_ARGS && newTokens[i2].numberOfArguments === undefined) {
        newTokens[i2].numberOfArguments = 2;
      }
      newAr[x] = newAr[x] || [];
      for (var y = 0;y < newAr[x].length; y++) {
        if (newTokens[i2].token === newAr[x][y]) {
          temp = indexOfToken(newAr[x][y], tokens);
          break;
        }
      }
      if (temp === -1) {
        tokens.push(newTokens[i2]);
        newTokens[i2].precedence = preced[newTokens[i2].type];
        if (newAr.length <= newTokens[i2].token.length) {
          newAr[newTokens[i2].token.length] = [];
        }
        newAr[newTokens[i2].token.length].push(newTokens[i2].token);
      } else {
        tokens[temp] = newTokens[i2];
        newTokens[i2].precedence = preced[newTokens[i2].type];
      }
    }
  };
  function indexOfToken(key, tokens2) {
    for (var search = 0;search < tokens2.length; search++) {
      if (tokens2[search].token === key)
        return search;
    }
    return -1;
  }
  function tokenize(string) {
    var nodes = [];
    var length = string.length;
    var key, x, y;
    for (var i2 = 0;i2 < length; i2++) {
      if (i2 < length - 1 && string[i2] === " " && string[i2 + 1] === " ") {
        continue;
      }
      key = "";
      for (x = string.length - i2 > newAr.length - 2 ? newAr.length - 1 : string.length - i2;x > 0; x--) {
        if (newAr[x] === undefined)
          continue;
        for (y = 0;y < newAr[x].length; y++) {
          if (match(string, newAr[x][y], i2, x)) {
            key = newAr[x][y];
            y = newAr[x].length;
            x = 0;
          }
        }
      }
      i2 += key.length - 1;
      if (key === "") {
        throw new Mexp.Exception("Can't understand after " + string.slice(i2));
      }
      nodes.push(tokens[indexOfToken(key, tokens)]);
    }
    return nodes;
  }
  var changeSignObj = {
    value: Mexp.math.changeSign,
    type: 0,
    pre: 21,
    show: "-"
  };
  var closingParObj = {
    value: ")",
    show: ")",
    type: 5,
    pre: 0
  };
  var openingParObj = {
    value: "(",
    type: 4,
    pre: 0,
    show: "("
  };
  Mexp.lex = function(inp, tokens2) {
    var str = [openingParObj];
    var ptc = [];
    var inpStr = inp;
    var allowed = type0;
    var bracToClose = 0;
    var asterick = empty;
    var prevKey = "";
    var i2;
    if (typeof tokens2 !== "undefined") {
      Mexp.addToken(tokens2);
    }
    var obj = {};
    var nodes = tokenize(inpStr);
    for (i2 = 0;i2 < nodes.length; i2++) {
      var node = nodes[i2];
      if (node.type === 14) {
        if (i2 > 0 && i2 < nodes.length - 1 && nodes[i2 + 1].type === 1 && (nodes[i2 - 1].type === 1 || nodes[i2 - 1].type === 6)) {
          throw new Mexp.Exception("Unexpected Space");
        }
        continue;
      }
      var cToken = node.token;
      var cType = node.type;
      var cEv = node.value;
      var cPre = node.precedence;
      var cShow = node.show;
      var pre = str[str.length - 1];
      var j;
      for (j = ptc.length;j--; ) {
        if (ptc[j] === 0) {
          if ([0, 2, 3, 4, 5, 9, 11, 12, 13].indexOf(cType) !== -1) {
            if (allowed[cType] !== true) {
              throw new Mexp.Exception(cToken + " is not allowed after " + prevKey);
            }
            str.push(closingParObj);
            allowed = type1;
            asterick = type3Asterick;
            ptc.pop();
          }
        } else
          break;
      }
      if (allowed[cType] !== true) {
        throw new Mexp.Exception(cToken + " is not allowed after " + prevKey);
      }
      if (asterick[cType] === true) {
        cType = 2;
        cEv = Mexp.math.mul;
        cShow = "&times;";
        cPre = 3;
        i2 = i2 - 1;
      }
      obj = {
        value: cEv,
        type: cType,
        pre: cPre,
        show: cShow,
        numberOfArguments: node.numberOfArguments
      };
      if (cType === 0) {
        allowed = type0;
        asterick = empty;
        inc(ptc, 2);
        str.push(obj);
        if (nodes[i2 + 1].type !== 4) {
          str.push(openingParObj);
          ptc.push(2);
        }
      } else if (cType === 1) {
        if (pre.type === 1) {
          pre.value += cEv;
          inc(ptc, 1);
        } else {
          str.push(obj);
        }
        allowed = type1;
        asterick = type1Asterick;
      } else if (cType === 2) {
        allowed = type0;
        asterick = empty;
        inc(ptc, 2);
        str.push(obj);
      } else if (cType === 3) {
        str.push(obj);
        allowed = type1;
        asterick = type3Asterick;
      } else if (cType === 4) {
        inc(ptc, 1);
        bracToClose++;
        allowed = type0;
        asterick = empty;
        str.push(obj);
      } else if (cType === 5) {
        if (!bracToClose) {
          throw new Mexp.Exception("Closing parenthesis are more than opening one, wait What!!!");
        }
        bracToClose--;
        allowed = type1;
        asterick = type3Asterick;
        str.push(obj);
        inc(ptc, 1);
      } else if (cType === 6) {
        if (pre.hasDec) {
          throw new Mexp.Exception("Two decimals are not allowed in one number");
        }
        if (pre.type !== 1) {
          pre = {
            value: 0,
            type: 1,
            pre: 0
          };
          str.push(pre);
        }
        allowed = type6;
        inc(ptc, 1);
        asterick = empty;
        pre.value += cEv;
        pre.hasDec = true;
      } else if (cType === 7) {
        allowed = type1;
        asterick = type3Asterick;
        inc(ptc, 1);
        str.push(obj);
      }
      if (cType === 8) {
        allowed = type0;
        asterick = empty;
        inc(ptc, node.numberOfArguments + 2);
        str.push(obj);
        if (nodes[i2 + 1].type !== 4) {
          str.push(openingParObj);
          ptc.push(node.numberOfArguments + 2);
        }
      } else if (cType === 9) {
        if (pre.type === 9) {
          if (pre.value === Mexp.math.add) {
            pre.value = cEv;
            pre.show = cShow;
            inc(ptc, 1);
          } else if (pre.value === Mexp.math.sub && cShow === "-") {
            pre.value = Mexp.math.add;
            pre.show = "+";
            inc(ptc, 1);
          }
        } else if (pre.type !== 5 && pre.type !== 7 && pre.type !== 1 && pre.type !== 3 && pre.type !== 13) {
          if (cToken === "-") {
            allowed = type0;
            asterick = empty;
            inc(ptc, 2).push(2);
            str.push(changeSignObj);
            str.push(openingParObj);
          }
        } else {
          str.push(obj);
          inc(ptc, 2);
        }
        allowed = type0;
        asterick = empty;
      } else if (cType === 10) {
        allowed = type0;
        asterick = empty;
        inc(ptc, 2);
        str.push(obj);
      } else if (cType === 11) {
        allowed = type0;
        asterick = empty;
        str.push(obj);
      } else if (cType === 12) {
        allowed = type0;
        asterick = empty;
        inc(ptc, 6);
        str.push(obj);
        if (nodes[i2 + 1].type !== 4) {
          str.push(openingParObj);
          ptc.push(6);
        }
      } else if (cType === 13) {
        allowed = type1;
        asterick = type3Asterick;
        str.push(obj);
      }
      inc(ptc, -1);
      prevKey = cToken;
    }
    for (j = ptc.length;j--; ) {
      str.push(closingParObj);
    }
    if (allowed[5] !== true) {
      throw new Mexp.Exception("complete the expression");
    }
    while (bracToClose--) {
      str.push(closingParObj);
    }
    str.push(closingParObj);
    return new Mexp(str);
  };
  module.exports = Mexp;
});

// node_modules/math-expression-evaluator/src/postfix.js
var require_postfix = __commonJS((exports, module) => {
  var Mexp = require_lexer();
  Mexp.prototype.toPostfix = function() {
    var post = [], elem, popped, prep, pre, ele;
    var stack = [{ value: "(", type: 4, pre: 0 }];
    var arr = this.value;
    for (var i = 1;i < arr.length; i++) {
      if (arr[i].type === 1 || arr[i].type === 3 || arr[i].type === 13) {
        if (arr[i].type === 1)
          arr[i].value = Number(arr[i].value);
        post.push(arr[i]);
      } else if (arr[i].type === 4) {
        stack.push(arr[i]);
      } else if (arr[i].type === 5) {
        while ((popped = stack.pop()).type !== 4) {
          post.push(popped);
        }
      } else if (arr[i].type === 11) {
        while ((popped = stack.pop()).type !== 4) {
          post.push(popped);
        }
        stack.push(popped);
      } else {
        elem = arr[i];
        pre = elem.pre;
        ele = stack[stack.length - 1];
        prep = ele.pre;
        var flag = ele.value == "Math.pow" && elem.value == "Math.pow";
        if (pre > prep)
          stack.push(elem);
        else {
          while (prep >= pre && !flag || flag && pre < prep) {
            popped = stack.pop();
            ele = stack[stack.length - 1];
            post.push(popped);
            prep = ele.pre;
            flag = elem.value == "Math.pow" && ele.value == "Math.pow";
          }
          stack.push(elem);
        }
      }
    }
    return new Mexp(post);
  };
  module.exports = Mexp;
});

// node_modules/math-expression-evaluator/src/postfix_evaluator.js
var require_postfix_evaluator = __commonJS((exports, module) => {
  var Mexp = require_postfix();
  Mexp.prototype.postfixEval = function(UserDefined) {
    UserDefined = UserDefined || {};
    UserDefined.PI = Math.PI;
    UserDefined.E = Math.E;
    var stack = [], pop1, pop2, pop3;
    var disp = [];
    var temp = "";
    var arr = this.value;
    var bool = typeof UserDefined.n !== "undefined";
    for (var i = 0;i < arr.length; i++) {
      if (arr[i].type === 1) {
        stack.push({ value: arr[i].value, type: 1 });
      } else if (arr[i].type === 3) {
        stack.push({ value: UserDefined[arr[i].value], type: 1 });
      } else if (arr[i].type === 0) {
        if (typeof stack[stack.length - 1].type === "undefined") {
          stack[stack.length - 1].value.push(arr[i]);
        } else
          stack[stack.length - 1].value = arr[i].value(stack[stack.length - 1].value);
      } else if (arr[i].type === 7) {
        if (typeof stack[stack.length - 1].type === "undefined") {
          stack[stack.length - 1].value.push(arr[i]);
        } else
          stack[stack.length - 1].value = arr[i].value(stack[stack.length - 1].value);
      } else if (arr[i].type === 8) {
        var popped = [];
        for (var x = 0;x < arr[i].numberOfArguments; x++) {
          popped.push(stack.pop().value);
        }
        stack.push({ type: 1, value: arr[i].value.apply(arr[i], popped.reverse()) });
      } else if (arr[i].type === 10) {
        pop1 = stack.pop();
        pop2 = stack.pop();
        if (typeof pop2.type === "undefined") {
          pop2.value = pop2.concat(pop1);
          pop2.value.push(arr[i]);
          stack.push(pop2);
        } else if (typeof pop1.type === "undefined") {
          pop1.unshift(pop2);
          pop1.push(arr[i]);
          stack.push(pop1);
        } else {
          stack.push({ type: 1, value: arr[i].value(pop2.value, pop1.value) });
        }
      } else if (arr[i].type === 2 || arr[i].type === 9) {
        pop1 = stack.pop();
        pop2 = stack.pop();
        if (typeof pop2.type === "undefined") {
          pop2 = pop2.concat(pop1);
          pop2.push(arr[i]);
          stack.push(pop2);
        } else if (typeof pop1.type === "undefined") {
          pop1.unshift(pop2);
          pop1.push(arr[i]);
          stack.push(pop1);
        } else {
          stack.push({ type: 1, value: arr[i].value(pop2.value, pop1.value) });
        }
      } else if (arr[i].type === 12) {
        pop1 = stack.pop();
        if (typeof pop1.type !== "undefined") {
          pop1 = [pop1];
        }
        pop2 = stack.pop();
        pop3 = stack.pop();
        stack.push({ type: 1, value: arr[i].value(pop3.value, pop2.value, new Mexp(pop1)) });
      } else if (arr[i].type === 13) {
        if (bool) {
          stack.push({ value: UserDefined[arr[i].value], type: 3 });
        } else
          stack.push([arr[i]]);
      }
    }
    if (stack.length > 1) {
      throw new Mexp.Exception("Uncaught Syntax error");
    }
    return stack[0].value > 1000000000000000 ? "Infinity" : parseFloat(stack[0].value.toFixed(15));
  };
  Mexp.eval = function(str, tokens, obj) {
    if (typeof tokens === "undefined") {
      return this.lex(str).toPostfix().postfixEval();
    } else if (typeof obj === "undefined") {
      if (typeof tokens.length !== "undefined")
        return this.lex(str, tokens).toPostfix().postfixEval();
      else
        return this.lex(str).toPostfix().postfixEval(tokens);
    } else
      return this.lex(str, tokens).toPostfix().postfixEval(obj);
  };
  module.exports = Mexp;
});

// node_modules/math-expression-evaluator/src/formula_evaluator.js
var require_formula_evaluator = __commonJS((exports, module) => {
  var Mexp = require_postfix_evaluator();
  Mexp.prototype.formulaEval = function() {
    var stack = [], pop1, pop2, pop3;
    var disp = [];
    var temp = "";
    var arr = this.value;
    for (var i = 0;i < arr.length; i++) {
      if (arr[i].type === 1 || arr[i].type === 3) {
        disp.push({ value: arr[i].type === 3 ? arr[i].show : arr[i].value, type: 1 });
      } else if (arr[i].type === 13) {
        disp.push({ value: arr[i].show, type: 1 });
      } else if (arr[i].type === 0) {
        disp[disp.length - 1] = { value: arr[i].show + (arr[i].show != "-" ? "(" : "") + disp[disp.length - 1].value + (arr[i].show != "-" ? ")" : ""), type: 0 };
      } else if (arr[i].type === 7) {
        disp[disp.length - 1] = { value: (disp[disp.length - 1].type != 1 ? "(" : "") + disp[disp.length - 1].value + (disp[disp.length - 1].type != 1 ? ")" : "") + arr[i].show, type: 7 };
      } else if (arr[i].type === 10) {
        pop1 = disp.pop();
        pop2 = disp.pop();
        if (arr[i].show === "P" || arr[i].show === "C")
          disp.push({ value: "<sup>" + pop2.value + "</sup>" + arr[i].show + "<sub>" + pop1.value + "</sub>", type: 10 });
        else
          disp.push({ value: (pop2.type != 1 ? "(" : "") + pop2.value + (pop2.type != 1 ? ")" : "") + "<sup>" + pop1.value + "</sup>", type: 1 });
      } else if (arr[i].type === 2 || arr[i].type === 9) {
        pop1 = disp.pop();
        pop2 = disp.pop();
        disp.push({ value: (pop2.type != 1 ? "(" : "") + pop2.value + (pop2.type != 1 ? ")" : "") + arr[i].show + (pop1.type != 1 ? "(" : "") + pop1.value + (pop1.type != 1 ? ")" : ""), type: arr[i].type });
      } else if (arr[i].type === 12) {
        pop1 = disp.pop();
        pop2 = disp.pop();
        pop3 = disp.pop();
        disp.push({ value: arr[i].show + "(" + pop3.value + "," + pop2.value + "," + pop1.value + ")", type: 12 });
      }
    }
    return disp[0].value;
  };
  module.exports = Mexp;
});

// node_modules/reduce-css-calc/index.js
var require_reduce_css_calc = __commonJS((exports, module) => {
  var balanced = require_balanced_match();
  var reduceFunctionCall = require_reduce_function_call();
  var mexp = require_formula_evaluator();
  var MAX_STACK = 100;
  var NESTED_CALC_RE = /(\+|\-|\*|\\|[^a-z]|)(\s*)(\()/g;
  var stack;
  module.exports = reduceCSSCalc;
  function reduceCSSCalc(value, decimalPrecision) {
    stack = 0;
    decimalPrecision = Math.pow(10, decimalPrecision === undefined ? 5 : decimalPrecision);
    value = value.replace(/\n+/g, " ");
    function evaluateExpression(expression, functionIdentifier, call) {
      if (stack++ > MAX_STACK) {
        stack = 0;
        throw new Error("Call stack overflow for " + call);
      }
      if (expression === "") {
        throw new Error(functionIdentifier + "(): '" + call + "' must contain a non-whitespace string");
      }
      expression = evaluateNestedExpression(expression, call);
      var units = getUnitsInExpression(expression);
      if (units.length > 1 || expression.indexOf("var(") > -1) {
        return functionIdentifier + "(" + expression + ")";
      }
      var unit = units[0] || "";
      if (unit === "%") {
        expression = expression.replace(/\b[0-9\.]+%/g, function(percent) {
          return parseFloat(percent.slice(0, -1)) * 0.01;
        });
      }
      var toEvaluate = expression.replace(new RegExp(unit, "gi"), "");
      var result;
      try {
        result = mexp.eval(toEvaluate);
      } catch (e) {
        return functionIdentifier + "(" + expression + ")";
      }
      if (unit === "%") {
        result *= 100;
      }
      if (functionIdentifier.length || unit === "%") {
        result = Math.round(result * decimalPrecision) / decimalPrecision;
      }
      result += unit;
      return result;
    }
    function evaluateNestedExpression(expression, call) {
      expression = expression.replace(/((?:\-[a-z]+\-)?calc)/g, "");
      var evaluatedPart = "";
      var nonEvaluatedPart = expression;
      var matches;
      while (matches = NESTED_CALC_RE.exec(nonEvaluatedPart)) {
        if (matches[0].index > 0) {
          evaluatedPart += nonEvaluatedPart.substring(0, matches[0].index);
        }
        var balancedExpr = balanced("(", ")", nonEvaluatedPart.substring([0].index));
        if (balancedExpr.body === "") {
          throw new Error("'" + expression + "' must contain a non-whitespace string");
        }
        var evaluated = evaluateExpression(balancedExpr.body, "", call);
        evaluatedPart += balancedExpr.pre + evaluated;
        nonEvaluatedPart = balancedExpr.post;
      }
      return evaluatedPart + nonEvaluatedPart;
    }
    return reduceFunctionCall(value, /((?:\-[a-z]+\-)?calc)\(/, evaluateExpression);
  }
  function getUnitsInExpression(expression) {
    var uniqueUnits = [];
    var uniqueLowerCaseUnits = [];
    var unitRegEx = /[\.0-9]([%a-z]+)/gi;
    var matches = unitRegEx.exec(expression);
    while (matches) {
      if (!matches || !matches[1]) {
        continue;
      }
      if (uniqueLowerCaseUnits.indexOf(matches[1].toLowerCase()) === -1) {
        uniqueUnits.push(matches[1]);
        uniqueLowerCaseUnits.push(matches[1].toLowerCase());
      }
      matches = unitRegEx.exec(expression);
    }
    return uniqueUnits;
  }
});

// node_modules/lodash/_freeGlobal.js
var require__freeGlobal = __commonJS((exports, module) => {
  var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
  module.exports = freeGlobal;
});

// node_modules/lodash/_root.js
var require__root = __commonJS((exports, module) => {
  var freeGlobal = require__freeGlobal();
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  module.exports = root;
});

// node_modules/lodash/_Symbol.js
var require__Symbol = __commonJS((exports, module) => {
  var root = require__root();
  var Symbol2 = root.Symbol;
  module.exports = Symbol2;
});

// node_modules/lodash/_getRawTag.js
var require__getRawTag = __commonJS((exports, module) => {
  var Symbol2 = require__Symbol();
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var nativeObjectToString = objectProto.toString;
  var symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined;
  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
    try {
      value[symToStringTag] = undefined;
      var unmasked = true;
    } catch (e) {
    }
    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }
  module.exports = getRawTag;
});

// node_modules/lodash/_objectToString.js
var require__objectToString = __commonJS((exports, module) => {
  var objectProto = Object.prototype;
  var nativeObjectToString = objectProto.toString;
  function objectToString(value) {
    return nativeObjectToString.call(value);
  }
  module.exports = objectToString;
});

// node_modules/lodash/_baseGetTag.js
var require__baseGetTag = __commonJS((exports, module) => {
  var Symbol2 = require__Symbol();
  var getRawTag = require__getRawTag();
  var objectToString = require__objectToString();
  var nullTag = "[object Null]";
  var undefinedTag = "[object Undefined]";
  var symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined;
  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
  }
  module.exports = baseGetTag;
});

// node_modules/lodash/isObject.js
var require_isObject = __commonJS((exports, module) => {
  function isObject(value) {
    var type = typeof value;
    return value != null && (type == "object" || type == "function");
  }
  module.exports = isObject;
});

// node_modules/lodash/isFunction.js
var require_isFunction = __commonJS((exports, module) => {
  var baseGetTag = require__baseGetTag();
  var isObject = require_isObject();
  var asyncTag = "[object AsyncFunction]";
  var funcTag = "[object Function]";
  var genTag = "[object GeneratorFunction]";
  var proxyTag = "[object Proxy]";
  function isFunction(value) {
    if (!isObject(value)) {
      return false;
    }
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }
  module.exports = isFunction;
});

// node_modules/lodash/_coreJsData.js
var require__coreJsData = __commonJS((exports, module) => {
  var root = require__root();
  var coreJsData = root["__core-js_shared__"];
  module.exports = coreJsData;
});

// node_modules/lodash/_isMasked.js
var require__isMasked = __commonJS((exports, module) => {
  var coreJsData = require__coreJsData();
  var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  module.exports = isMasked;
});

// node_modules/lodash/_toSource.js
var require__toSource = __commonJS((exports, module) => {
  var funcProto = Function.prototype;
  var funcToString = funcProto.toString;
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {
      }
      try {
        return func + "";
      } catch (e) {
      }
    }
    return "";
  }
  module.exports = toSource;
});

// node_modules/lodash/_baseIsNative.js
var require__baseIsNative = __commonJS((exports, module) => {
  var isFunction = require_isFunction();
  var isMasked = require__isMasked();
  var isObject = require_isObject();
  var toSource = require__toSource();
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var funcProto = Function.prototype;
  var objectProto = Object.prototype;
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }
  module.exports = baseIsNative;
});

// node_modules/lodash/_getValue.js
var require__getValue = __commonJS((exports, module) => {
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }
  module.exports = getValue;
});

// node_modules/lodash/_getNative.js
var require__getNative = __commonJS((exports, module) => {
  var baseIsNative = require__baseIsNative();
  var getValue = require__getValue();
  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }
  module.exports = getNative;
});

// node_modules/lodash/_nativeCreate.js
var require__nativeCreate = __commonJS((exports, module) => {
  var getNative = require__getNative();
  var nativeCreate = getNative(Object, "create");
  module.exports = nativeCreate;
});

// node_modules/lodash/_hashClear.js
var require__hashClear = __commonJS((exports, module) => {
  var nativeCreate = require__nativeCreate();
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
  }
  module.exports = hashClear;
});

// node_modules/lodash/_hashDelete.js
var require__hashDelete = __commonJS((exports, module) => {
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }
  module.exports = hashDelete;
});

// node_modules/lodash/_hashGet.js
var require__hashGet = __commonJS((exports, module) => {
  var nativeCreate = require__nativeCreate();
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : undefined;
  }
  module.exports = hashGet;
});

// node_modules/lodash/_hashHas.js
var require__hashHas = __commonJS((exports, module) => {
  var nativeCreate = require__nativeCreate();
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
  }
  module.exports = hashHas;
});

// node_modules/lodash/_hashSet.js
var require__hashSet = __commonJS((exports, module) => {
  var nativeCreate = require__nativeCreate();
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
  }
  module.exports = hashSet;
});

// node_modules/lodash/_Hash.js
var require__Hash = __commonJS((exports, module) => {
  var hashClear = require__hashClear();
  var hashDelete = require__hashDelete();
  var hashGet = require__hashGet();
  var hashHas = require__hashHas();
  var hashSet = require__hashSet();
  function Hash(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  Hash.prototype.clear = hashClear;
  Hash.prototype["delete"] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;
  module.exports = Hash;
});

// node_modules/lodash/_listCacheClear.js
var require__listCacheClear = __commonJS((exports, module) => {
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }
  module.exports = listCacheClear;
});

// node_modules/lodash/eq.js
var require_eq = __commonJS((exports, module) => {
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }
  module.exports = eq;
});

// node_modules/lodash/_assocIndexOf.js
var require__assocIndexOf = __commonJS((exports, module) => {
  var eq = require_eq();
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }
  module.exports = assocIndexOf;
});

// node_modules/lodash/_listCacheDelete.js
var require__listCacheDelete = __commonJS((exports, module) => {
  var assocIndexOf = require__assocIndexOf();
  var arrayProto = Array.prototype;
  var splice = arrayProto.splice;
  function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }
  module.exports = listCacheDelete;
});

// node_modules/lodash/_listCacheGet.js
var require__listCacheGet = __commonJS((exports, module) => {
  var assocIndexOf = require__assocIndexOf();
  function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
  }
  module.exports = listCacheGet;
});

// node_modules/lodash/_listCacheHas.js
var require__listCacheHas = __commonJS((exports, module) => {
  var assocIndexOf = require__assocIndexOf();
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }
  module.exports = listCacheHas;
});

// node_modules/lodash/_listCacheSet.js
var require__listCacheSet = __commonJS((exports, module) => {
  var assocIndexOf = require__assocIndexOf();
  function listCacheSet(key, value) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }
  module.exports = listCacheSet;
});

// node_modules/lodash/_ListCache.js
var require__ListCache = __commonJS((exports, module) => {
  var listCacheClear = require__listCacheClear();
  var listCacheDelete = require__listCacheDelete();
  var listCacheGet = require__listCacheGet();
  var listCacheHas = require__listCacheHas();
  var listCacheSet = require__listCacheSet();
  function ListCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype["delete"] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;
  module.exports = ListCache;
});

// node_modules/lodash/_Map.js
var require__Map = __commonJS((exports, module) => {
  var getNative = require__getNative();
  var root = require__root();
  var Map2 = getNative(root, "Map");
  module.exports = Map2;
});

// node_modules/lodash/_mapCacheClear.js
var require__mapCacheClear = __commonJS((exports, module) => {
  var Hash = require__Hash();
  var ListCache = require__ListCache();
  var Map2 = require__Map();
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      hash: new Hash,
      map: new (Map2 || ListCache),
      string: new Hash
    };
  }
  module.exports = mapCacheClear;
});

// node_modules/lodash/_isKeyable.js
var require__isKeyable = __commonJS((exports, module) => {
  function isKeyable(value) {
    var type = typeof value;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
  }
  module.exports = isKeyable;
});

// node_modules/lodash/_getMapData.js
var require__getMapData = __commonJS((exports, module) => {
  var isKeyable = require__isKeyable();
  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
  }
  module.exports = getMapData;
});

// node_modules/lodash/_mapCacheDelete.js
var require__mapCacheDelete = __commonJS((exports, module) => {
  var getMapData = require__getMapData();
  function mapCacheDelete(key) {
    var result = getMapData(this, key)["delete"](key);
    this.size -= result ? 1 : 0;
    return result;
  }
  module.exports = mapCacheDelete;
});

// node_modules/lodash/_mapCacheGet.js
var require__mapCacheGet = __commonJS((exports, module) => {
  var getMapData = require__getMapData();
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }
  module.exports = mapCacheGet;
});

// node_modules/lodash/_mapCacheHas.js
var require__mapCacheHas = __commonJS((exports, module) => {
  var getMapData = require__getMapData();
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }
  module.exports = mapCacheHas;
});

// node_modules/lodash/_mapCacheSet.js
var require__mapCacheSet = __commonJS((exports, module) => {
  var getMapData = require__getMapData();
  function mapCacheSet(key, value) {
    var data = getMapData(this, key), size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }
  module.exports = mapCacheSet;
});

// node_modules/lodash/_MapCache.js
var require__MapCache = __commonJS((exports, module) => {
  var mapCacheClear = require__mapCacheClear();
  var mapCacheDelete = require__mapCacheDelete();
  var mapCacheGet = require__mapCacheGet();
  var mapCacheHas = require__mapCacheHas();
  var mapCacheSet = require__mapCacheSet();
  function MapCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype["delete"] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;
  module.exports = MapCache;
});

// node_modules/lodash/memoize.js
var require_memoize = __commonJS((exports, module) => {
  var MapCache = require__MapCache();
  var FUNC_ERROR_TEXT = "Expected a function";
  function memoize(func, resolver) {
    if (typeof func != "function" || resolver != null && typeof resolver != "function") {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var memoized = function() {
      var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };
    memoized.cache = new (memoize.Cache || MapCache);
    return memoized;
  }
  memoize.Cache = MapCache;
  module.exports = memoize;
});

// node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS((exports) => {
  var React4 = __toESM(require_react(), 1);
  (function() {
    function noop2() {
    }
    function testStringCoercion(value) {
      return "" + value;
    }
    function createPortal$1(children, containerInfo, implementation) {
      var key = 3 < arguments.length && arguments[3] !== undefined ? arguments[3] : null;
      try {
        testStringCoercion(key);
        var JSCompiler_inline_result = false;
      } catch (e) {
        JSCompiler_inline_result = true;
      }
      JSCompiler_inline_result && (console.error("The provided key is an unsupported type %s. This value must be coerced to a string before using it here.", typeof Symbol === "function" && Symbol.toStringTag && key[Symbol.toStringTag] || key.constructor.name || "Object"), testStringCoercion(key));
      return {
        $$typeof: REACT_PORTAL_TYPE,
        key: key == null ? null : "" + key,
        children,
        containerInfo,
        implementation
      };
    }
    function getCrossOriginStringAs(as, input) {
      if (as === "font")
        return "";
      if (typeof input === "string")
        return input === "use-credentials" ? input : "";
    }
    function getValueDescriptorExpectingObjectForWarning(thing) {
      return thing === null ? "`null`" : thing === undefined ? "`undefined`" : thing === "" ? "an empty string" : 'something with type "' + typeof thing + '"';
    }
    function getValueDescriptorExpectingEnumForWarning(thing) {
      return thing === null ? "`null`" : thing === undefined ? "`undefined`" : thing === "" ? "an empty string" : typeof thing === "string" ? JSON.stringify(thing) : typeof thing === "number" ? "`" + thing + "`" : 'something with type "' + typeof thing + '"';
    }
    function resolveDispatcher() {
      var dispatcher = ReactSharedInternals.H;
      dispatcher === null && console.error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.`);
      return dispatcher;
    }
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
    var Internals = {
      d: {
        f: noop2,
        r: function() {
          throw Error("Invalid form element. requestFormReset must be passed a form that was rendered by React.");
        },
        D: noop2,
        C: noop2,
        L: noop2,
        m: noop2,
        X: noop2,
        S: noop2,
        M: noop2
      },
      p: 0,
      findDOMNode: null
    }, REACT_PORTAL_TYPE = Symbol.for("react.portal"), ReactSharedInternals = React4.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
    typeof Map === "function" && Map.prototype != null && typeof Map.prototype.forEach === "function" && typeof Set === "function" && Set.prototype != null && typeof Set.prototype.clear === "function" && typeof Set.prototype.forEach === "function" || console.error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    exports.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = Internals;
    exports.createPortal = function(children, container) {
      var key = 2 < arguments.length && arguments[2] !== undefined ? arguments[2] : null;
      if (!container || container.nodeType !== 1 && container.nodeType !== 9 && container.nodeType !== 11)
        throw Error("Target container is not a DOM element.");
      return createPortal$1(children, container, null, key);
    };
    exports.flushSync = function(fn) {
      var previousTransition = ReactSharedInternals.T, previousUpdatePriority = Internals.p;
      try {
        if (ReactSharedInternals.T = null, Internals.p = 2, fn)
          return fn();
      } finally {
        ReactSharedInternals.T = previousTransition, Internals.p = previousUpdatePriority, Internals.d.f() && console.error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
      }
    };
    exports.preconnect = function(href, options) {
      typeof href === "string" && href ? options != null && typeof options !== "object" ? console.error("ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.", getValueDescriptorExpectingEnumForWarning(options)) : options != null && typeof options.crossOrigin !== "string" && console.error("ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.", getValueDescriptorExpectingObjectForWarning(options.crossOrigin)) : console.error("ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.", getValueDescriptorExpectingObjectForWarning(href));
      typeof href === "string" && (options ? (options = options.crossOrigin, options = typeof options === "string" ? options === "use-credentials" ? options : "" : undefined) : options = null, Internals.d.C(href, options));
    };
    exports.prefetchDNS = function(href) {
      if (typeof href !== "string" || !href)
        console.error("ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.", getValueDescriptorExpectingObjectForWarning(href));
      else if (1 < arguments.length) {
        var options = arguments[1];
        typeof options === "object" && options.hasOwnProperty("crossOrigin") ? console.error("ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.", getValueDescriptorExpectingEnumForWarning(options)) : console.error("ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.", getValueDescriptorExpectingEnumForWarning(options));
      }
      typeof href === "string" && Internals.d.D(href);
    };
    exports.preinit = function(href, options) {
      typeof href === "string" && href ? options == null || typeof options !== "object" ? console.error("ReactDOM.preinit(): Expected the `options` argument (second) to be an object with an `as` property describing the type of resource to be preinitialized but encountered %s instead.", getValueDescriptorExpectingEnumForWarning(options)) : options.as !== "style" && options.as !== "script" && console.error('ReactDOM.preinit(): Expected the `as` property in the `options` argument (second) to contain a valid value describing the type of resource to be preinitialized but encountered %s instead. Valid values for `as` are "style" and "script".', getValueDescriptorExpectingEnumForWarning(options.as)) : console.error("ReactDOM.preinit(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.", getValueDescriptorExpectingObjectForWarning(href));
      if (typeof href === "string" && options && typeof options.as === "string") {
        var as = options.as, crossOrigin = getCrossOriginStringAs(as, options.crossOrigin), integrity = typeof options.integrity === "string" ? options.integrity : undefined, fetchPriority = typeof options.fetchPriority === "string" ? options.fetchPriority : undefined;
        as === "style" ? Internals.d.S(href, typeof options.precedence === "string" ? options.precedence : undefined, {
          crossOrigin,
          integrity,
          fetchPriority
        }) : as === "script" && Internals.d.X(href, {
          crossOrigin,
          integrity,
          fetchPriority,
          nonce: typeof options.nonce === "string" ? options.nonce : undefined
        });
      }
    };
    exports.preinitModule = function(href, options) {
      var encountered = "";
      typeof href === "string" && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
      options !== undefined && typeof options !== "object" ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : options && ("as" in options) && options.as !== "script" && (encountered += " The `as` option encountered was " + getValueDescriptorExpectingEnumForWarning(options.as) + ".");
      if (encountered)
        console.error("ReactDOM.preinitModule(): Expected up to two arguments, a non-empty `href` string and, optionally, an `options` object with a valid `as` property.%s", encountered);
      else
        switch (encountered = options && typeof options.as === "string" ? options.as : "script", encountered) {
          case "script":
            break;
          default:
            encountered = getValueDescriptorExpectingEnumForWarning(encountered), console.error('ReactDOM.preinitModule(): Currently the only supported "as" type for this function is "script" but received "%s" instead. This warning was generated for `href` "%s". In the future other module types will be supported, aligning with the import-attributes proposal. Learn more here: (https://github.com/tc39/proposal-import-attributes)', encountered, href);
        }
      if (typeof href === "string")
        if (typeof options === "object" && options !== null) {
          if (options.as == null || options.as === "script")
            encountered = getCrossOriginStringAs(options.as, options.crossOrigin), Internals.d.M(href, {
              crossOrigin: encountered,
              integrity: typeof options.integrity === "string" ? options.integrity : undefined,
              nonce: typeof options.nonce === "string" ? options.nonce : undefined
            });
        } else
          options == null && Internals.d.M(href);
    };
    exports.preload = function(href, options) {
      var encountered = "";
      typeof href === "string" && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
      options == null || typeof options !== "object" ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : typeof options.as === "string" && options.as || (encountered += " The `as` option encountered was " + getValueDescriptorExpectingObjectForWarning(options.as) + ".");
      encountered && console.error('ReactDOM.preload(): Expected two arguments, a non-empty `href` string and an `options` object with an `as` property valid for a `<link rel="preload" as="..." />` tag.%s', encountered);
      if (typeof href === "string" && typeof options === "object" && options !== null && typeof options.as === "string") {
        encountered = options.as;
        var crossOrigin = getCrossOriginStringAs(encountered, options.crossOrigin);
        Internals.d.L(href, encountered, {
          crossOrigin,
          integrity: typeof options.integrity === "string" ? options.integrity : undefined,
          nonce: typeof options.nonce === "string" ? options.nonce : undefined,
          type: typeof options.type === "string" ? options.type : undefined,
          fetchPriority: typeof options.fetchPriority === "string" ? options.fetchPriority : undefined,
          referrerPolicy: typeof options.referrerPolicy === "string" ? options.referrerPolicy : undefined,
          imageSrcSet: typeof options.imageSrcSet === "string" ? options.imageSrcSet : undefined,
          imageSizes: typeof options.imageSizes === "string" ? options.imageSizes : undefined,
          media: typeof options.media === "string" ? options.media : undefined
        });
      }
    };
    exports.preloadModule = function(href, options) {
      var encountered = "";
      typeof href === "string" && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
      options !== undefined && typeof options !== "object" ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : options && ("as" in options) && typeof options.as !== "string" && (encountered += " The `as` option encountered was " + getValueDescriptorExpectingObjectForWarning(options.as) + ".");
      encountered && console.error('ReactDOM.preloadModule(): Expected two arguments, a non-empty `href` string and, optionally, an `options` object with an `as` property valid for a `<link rel="modulepreload" as="..." />` tag.%s', encountered);
      typeof href === "string" && (options ? (encountered = getCrossOriginStringAs(options.as, options.crossOrigin), Internals.d.m(href, {
        as: typeof options.as === "string" && options.as !== "script" ? options.as : undefined,
        crossOrigin: encountered,
        integrity: typeof options.integrity === "string" ? options.integrity : undefined
      })) : Internals.d.m(href));
    };
    exports.requestFormReset = function(form) {
      Internals.d.r(form);
    };
    exports.unstable_batchedUpdates = function(fn, a) {
      return fn(a);
    };
    exports.useFormState = function(action, initialState, permalink) {
      return resolveDispatcher().useFormState(action, initialState, permalink);
    };
    exports.useFormStatus = function() {
      return resolveDispatcher().useHostTransitionStatus();
    };
    exports.version = "19.0.0";
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
  })();
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS((exports, module) => {
  var react_dom_development = __toESM(require_react_dom_development(), 1);
  if (false) {
  } else {
    module.exports = react_dom_development;
  }
});

// node_modules/@visx/group/lib/Group.js
var require_Group = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = Group;
  var _propTypes = _interopRequireDefault(require_prop_types());
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _excluded = ["top", "left", "transform", "className", "children", "innerRef"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function Group(_ref) {
    var _ref$top = _ref.top, top = _ref$top === undefined ? 0 : _ref$top, _ref$left = _ref.left, left = _ref$left === undefined ? 0 : _ref$left, transform = _ref.transform, className = _ref.className, children = _ref.children, innerRef = _ref.innerRef, restProps = _objectWithoutPropertiesLoose(_ref, _excluded);
    return /* @__PURE__ */ _react.default.createElement("g", _extends({
      ref: innerRef,
      className: (0, _classnames.default)("visx-group", className),
      transform: transform || "translate(" + left + ", " + top + ")"
    }, restProps), children);
  }
  Group.propTypes = {
    top: _propTypes.default.number,
    left: _propTypes.default.number,
    transform: _propTypes.default.string,
    className: _propTypes.default.string,
    children: _propTypes.default.node,
    innerRef: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func, _propTypes.default.object])
  };
});

// node_modules/@visx/group/lib/index.js
var require_lib = __commonJS((exports) => {
  exports.__esModule = true;
  exports.Group = undefined;
  var _Group = _interopRequireDefault(require_Group());
  exports.Group = _Group.default;
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/ascending.js
var require_ascending = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = ascending2;
  function ascending2(a, b) {
    return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/descending.js
var require_descending = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = descending2;
  function descending2(a, b) {
    return a == null || b == null ? NaN : b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/bisector.js
var require_bisector = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = bisector2;
  var _ascending = _interopRequireDefault(require_ascending());
  var _descending = _interopRequireDefault(require_descending());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function bisector2(f) {
    let compare1, compare2, delta;
    if (f.length !== 2) {
      compare1 = _ascending.default;
      compare2 = (d, x) => (0, _ascending.default)(f(d), x);
      delta = (d, x) => f(d) - x;
    } else {
      compare1 = f === _ascending.default || f === _descending.default ? f : zero3;
      compare2 = f;
      delta = f;
    }
    function left(a, x, lo = 0, hi = a.length) {
      if (lo < hi) {
        if (compare1(x, x) !== 0)
          return hi;
        do {
          const mid = lo + hi >>> 1;
          if (compare2(a[mid], x) < 0)
            lo = mid + 1;
          else
            hi = mid;
        } while (lo < hi);
      }
      return lo;
    }
    function right(a, x, lo = 0, hi = a.length) {
      if (lo < hi) {
        if (compare1(x, x) !== 0)
          return hi;
        do {
          const mid = lo + hi >>> 1;
          if (compare2(a[mid], x) <= 0)
            lo = mid + 1;
          else
            hi = mid;
        } while (lo < hi);
      }
      return lo;
    }
    function center(a, x, lo = 0, hi = a.length) {
      const i = left(a, x, lo, hi - 1);
      return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
    }
    return {
      left,
      center,
      right
    };
  }
  function zero3() {
    return 0;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/number.js
var require_number = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = number4;
  exports.numbers = numbers2;
  function number4(x) {
    return x === null ? NaN : +x;
  }
  function* numbers2(values, valueof) {
    if (valueof === undefined) {
      for (let value of values) {
        if (value != null && (value = +value) >= value) {
          yield value;
        }
      }
    } else {
      let index = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
          yield value;
        }
      }
    }
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/bisect.js
var require_bisect = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.bisectRight = exports.bisectLeft = exports.bisectCenter = undefined;
  var _ascending = _interopRequireDefault(require_ascending());
  var _bisector = _interopRequireDefault(require_bisector());
  var _number = _interopRequireDefault(require_number());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var ascendingBisect2 = (0, _bisector.default)(_ascending.default);
  var bisectRight2 = ascendingBisect2.right;
  exports.bisectRight = bisectRight2;
  var bisectLeft2 = ascendingBisect2.left;
  exports.bisectLeft = bisectLeft2;
  var bisectCenter2 = (0, _bisector.default)(_number.default).center;
  exports.bisectCenter = bisectCenter2;
  var _default = bisectRight2;
  exports.default = _default;
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/blur.js
var require_blur = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.blur = blur;
  exports.blurImage = exports.blur2 = undefined;
  function blur(values, r) {
    if (!((r = +r) >= 0))
      throw new RangeError("invalid r");
    let length = values.length;
    if (!((length = Math.floor(length)) >= 0))
      throw new RangeError("invalid length");
    if (!length || !r)
      return values;
    const blur3 = blurf(r);
    const temp = values.slice();
    blur3(values, temp, 0, length, 1);
    blur3(temp, values, 0, length, 1);
    blur3(values, temp, 0, length, 1);
    return values;
  }
  var blur2 = Blur2(blurf);
  exports.blur2 = blur2;
  var blurImage = Blur2(blurfImage);
  exports.blurImage = blurImage;
  function Blur2(blur3) {
    return function(data, rx, ry = rx) {
      if (!((rx = +rx) >= 0))
        throw new RangeError("invalid rx");
      if (!((ry = +ry) >= 0))
        throw new RangeError("invalid ry");
      let {
        data: values,
        width,
        height
      } = data;
      if (!((width = Math.floor(width)) >= 0))
        throw new RangeError("invalid width");
      if (!((height = Math.floor(height !== undefined ? height : values.length / width)) >= 0))
        throw new RangeError("invalid height");
      if (!width || !height || !rx && !ry)
        return data;
      const blurx = rx && blur3(rx);
      const blury = ry && blur3(ry);
      const temp = values.slice();
      if (blurx && blury) {
        blurh(blurx, temp, values, width, height);
        blurh(blurx, values, temp, width, height);
        blurh(blurx, temp, values, width, height);
        blurv(blury, values, temp, width, height);
        blurv(blury, temp, values, width, height);
        blurv(blury, values, temp, width, height);
      } else if (blurx) {
        blurh(blurx, values, temp, width, height);
        blurh(blurx, temp, values, width, height);
        blurh(blurx, values, temp, width, height);
      } else if (blury) {
        blurv(blury, values, temp, width, height);
        blurv(blury, temp, values, width, height);
        blurv(blury, values, temp, width, height);
      }
      return data;
    };
  }
  function blurh(blur3, T2, S, w, h) {
    for (let y = 0, n = w * h;y < n; ) {
      blur3(T2, S, y, y += w, 1);
    }
  }
  function blurv(blur3, T2, S, w, h) {
    for (let x = 0, n = w * h;x < w; ++x) {
      blur3(T2, S, x, x + n, w);
    }
  }
  function blurfImage(radius) {
    const blur3 = blurf(radius);
    return (T2, S, start2, stop2, step) => {
      start2 <<= 2, stop2 <<= 2, step <<= 2;
      blur3(T2, S, start2 + 0, stop2 + 0, step);
      blur3(T2, S, start2 + 1, stop2 + 1, step);
      blur3(T2, S, start2 + 2, stop2 + 2, step);
      blur3(T2, S, start2 + 3, stop2 + 3, step);
    };
  }
  function blurf(radius) {
    const radius0 = Math.floor(radius);
    if (radius0 === radius)
      return bluri(radius);
    const t = radius - radius0;
    const w = 2 * radius + 1;
    return (T2, S, start2, stop2, step) => {
      if (!((stop2 -= step) >= start2))
        return;
      let sum = radius0 * S[start2];
      const s0 = step * radius0;
      const s1 = s0 + step;
      for (let i = start2, j2 = start2 + s0;i < j2; i += step) {
        sum += S[Math.min(stop2, i)];
      }
      for (let i = start2, j2 = stop2;i <= j2; i += step) {
        sum += S[Math.min(stop2, i + s0)];
        T2[i] = (sum + t * (S[Math.max(start2, i - s1)] + S[Math.min(stop2, i + s1)])) / w;
        sum -= S[Math.max(start2, i - s0)];
      }
    };
  }
  function bluri(radius) {
    const w = 2 * radius + 1;
    return (T2, S, start2, stop2, step) => {
      if (!((stop2 -= step) >= start2))
        return;
      let sum = radius * S[start2];
      const s = step * radius;
      for (let i = start2, j2 = start2 + s;i < j2; i += step) {
        sum += S[Math.min(stop2, i)];
      }
      for (let i = start2, j2 = stop2;i <= j2; i += step) {
        sum += S[Math.min(stop2, i + s)];
        T2[i] = sum / w;
        sum -= S[Math.max(start2, i - s)];
      }
    };
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/count.js
var require_count = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = count;
  function count(values, valueof) {
    let count2 = 0;
    if (valueof === undefined) {
      for (let value of values) {
        if (value != null && (value = +value) >= value) {
          ++count2;
        }
      }
    } else {
      let index = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
          ++count2;
        }
      }
    }
    return count2;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/cross.js
var require_cross = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = cross;
  function length(array) {
    return array.length | 0;
  }
  function empty(length2) {
    return !(length2 > 0);
  }
  function arrayify(values) {
    return typeof values !== "object" || "length" in values ? values : Array.from(values);
  }
  function reducer(reduce) {
    return (values) => reduce(...values);
  }
  function cross(...values) {
    const reduce = typeof values[values.length - 1] === "function" && reducer(values.pop());
    values = values.map(arrayify);
    const lengths = values.map(length);
    const j2 = values.length - 1;
    const index = new Array(j2 + 1).fill(0);
    const product = [];
    if (j2 < 0 || lengths.some(empty))
      return product;
    while (true) {
      product.push(index.map((j3, i2) => values[i2][j3]));
      let i = j2;
      while (++index[i] === lengths[i]) {
        if (i === 0)
          return reduce ? product.map(reduce) : product;
        index[i--] = 0;
      }
    }
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/cumsum.js
var require_cumsum = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = cumsum;
  function cumsum(values, valueof) {
    var sum = 0, index = 0;
    return Float64Array.from(values, valueof === undefined ? (v) => sum += +v || 0 : (v) => sum += +valueof(v, index++, values) || 0);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/variance.js
var require_variance = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = variance;
  function variance(values, valueof) {
    let count = 0;
    let delta;
    let mean = 0;
    let sum = 0;
    if (valueof === undefined) {
      for (let value of values) {
        if (value != null && (value = +value) >= value) {
          delta = value - mean;
          mean += delta / ++count;
          sum += delta * (value - mean);
        }
      }
    } else {
      let index = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
          delta = value - mean;
          mean += delta / ++count;
          sum += delta * (value - mean);
        }
      }
    }
    if (count > 1)
      return sum / (count - 1);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/deviation.js
var require_deviation = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = deviation;
  var _variance = _interopRequireDefault(require_variance());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function deviation(values, valueof) {
    const v = (0, _variance.default)(values, valueof);
    return v ? Math.sqrt(v) : v;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/extent.js
var require_extent = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = extent2;
  function extent2(values, valueof) {
    let min;
    let max;
    if (valueof === undefined) {
      for (const value of values) {
        if (value != null) {
          if (min === undefined) {
            if (value >= value)
              min = max = value;
          } else {
            if (min > value)
              min = value;
            if (max < value)
              max = value;
          }
        }
      }
    } else {
      let index = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null) {
          if (min === undefined) {
            if (value >= value)
              min = max = value;
          } else {
            if (min > value)
              min = value;
            if (max < value)
              max = value;
          }
        }
      }
    }
    return [min, max];
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/fsum.js
var require_fsum = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Adder = undefined;
  exports.fcumsum = fcumsum;
  exports.fsum = fsum;

  class Adder {
    constructor() {
      this._partials = new Float64Array(32);
      this._n = 0;
    }
    add(x) {
      const p2 = this._partials;
      let i = 0;
      for (let j2 = 0;j2 < this._n && j2 < 32; j2++) {
        const y = p2[j2], hi = x + y, lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);
        if (lo)
          p2[i++] = lo;
        x = hi;
      }
      p2[i] = x;
      this._n = i + 1;
      return this;
    }
    valueOf() {
      const p2 = this._partials;
      let n = this._n, x, y, lo, hi = 0;
      if (n > 0) {
        hi = p2[--n];
        while (n > 0) {
          x = hi;
          y = p2[--n];
          hi = x + y;
          lo = y - (hi - x);
          if (lo)
            break;
        }
        if (n > 0 && (lo < 0 && p2[n - 1] < 0 || lo > 0 && p2[n - 1] > 0)) {
          y = lo * 2;
          x = hi + y;
          if (y == x - hi)
            hi = x;
        }
      }
      return hi;
    }
  }
  exports.Adder = Adder;
  function fsum(values, valueof) {
    const adder = new Adder;
    if (valueof === undefined) {
      for (let value of values) {
        if (value = +value) {
          adder.add(value);
        }
      }
    } else {
      let index = -1;
      for (let value of values) {
        if (value = +valueof(value, ++index, values)) {
          adder.add(value);
        }
      }
    }
    return +adder;
  }
  function fcumsum(values, valueof) {
    const adder = new Adder;
    let index = -1;
    return Float64Array.from(values, valueof === undefined ? (v) => adder.add(+v || 0) : (v) => adder.add(+valueof(v, ++index, values) || 0));
  }
});

// node_modules/@visx/vendor/vendor-cjs/internmap/src/index.js
var require_src = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.InternSet = exports.InternMap = undefined;

  class InternMap2 extends Map {
    constructor(entries, key = keyof2) {
      super();
      Object.defineProperties(this, {
        _intern: {
          value: new Map
        },
        _key: {
          value: key
        }
      });
      if (entries != null)
        for (const [key2, value] of entries)
          this.set(key2, value);
    }
    get(key) {
      return super.get(intern_get2(this, key));
    }
    has(key) {
      return super.has(intern_get2(this, key));
    }
    set(key, value) {
      return super.set(intern_set2(this, key), value);
    }
    delete(key) {
      return super.delete(intern_delete2(this, key));
    }
  }
  exports.InternMap = InternMap2;

  class InternSet2 extends Set {
    constructor(values, key = keyof2) {
      super();
      Object.defineProperties(this, {
        _intern: {
          value: new Map
        },
        _key: {
          value: key
        }
      });
      if (values != null)
        for (const value of values)
          this.add(value);
    }
    has(value) {
      return super.has(intern_get2(this, value));
    }
    add(value) {
      return super.add(intern_set2(this, value));
    }
    delete(value) {
      return super.delete(intern_delete2(this, value));
    }
  }
  exports.InternSet = InternSet2;
  function intern_get2({
    _intern,
    _key
  }, value) {
    const key = _key(value);
    return _intern.has(key) ? _intern.get(key) : value;
  }
  function intern_set2({
    _intern,
    _key
  }, value) {
    const key = _key(value);
    if (_intern.has(key))
      return _intern.get(key);
    _intern.set(key, value);
    return value;
  }
  function intern_delete2({
    _intern,
    _key
  }, value) {
    const key = _key(value);
    if (_intern.has(key)) {
      value = _intern.get(key);
      _intern.delete(key);
    }
    return value;
  }
  function keyof2(value) {
    return value !== null && typeof value === "object" ? value.valueOf() : value;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/identity.js
var require_identity = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = identity2;
  function identity2(x) {
    return x;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/group.js
var require_group = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = group;
  exports.flatGroup = flatGroup;
  exports.flatRollup = flatRollup;
  exports.groups = groups;
  exports.index = index;
  exports.indexes = indexes;
  exports.rollup = rollup;
  exports.rollups = rollups;
  var _index = require_src();
  var _identity = _interopRequireDefault(require_identity());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function group(values, ...keys) {
    return nest(values, _identity.default, _identity.default, keys);
  }
  function groups(values, ...keys) {
    return nest(values, Array.from, _identity.default, keys);
  }
  function flatten(groups2, keys) {
    for (let i = 1, n = keys.length;i < n; ++i) {
      groups2 = groups2.flatMap((g2) => g2.pop().map(([key, value]) => [...g2, key, value]));
    }
    return groups2;
  }
  function flatGroup(values, ...keys) {
    return flatten(groups(values, ...keys), keys);
  }
  function flatRollup(values, reduce, ...keys) {
    return flatten(rollups(values, reduce, ...keys), keys);
  }
  function rollup(values, reduce, ...keys) {
    return nest(values, _identity.default, reduce, keys);
  }
  function rollups(values, reduce, ...keys) {
    return nest(values, Array.from, reduce, keys);
  }
  function index(values, ...keys) {
    return nest(values, _identity.default, unique, keys);
  }
  function indexes(values, ...keys) {
    return nest(values, Array.from, unique, keys);
  }
  function unique(values) {
    if (values.length !== 1)
      throw new Error("duplicate key");
    return values[0];
  }
  function nest(values, map2, reduce, keys) {
    return function regroup(values2, i) {
      if (i >= keys.length)
        return reduce(values2);
      const groups2 = new _index.InternMap;
      const keyof2 = keys[i++];
      let index2 = -1;
      for (const value of values2) {
        const key = keyof2(value, ++index2, values2);
        const group2 = groups2.get(key);
        if (group2)
          group2.push(value);
        else
          groups2.set(key, [value]);
      }
      for (const [key, values3] of groups2) {
        groups2.set(key, regroup(values3, i));
      }
      return map2(groups2);
    }(values, 0);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/permute.js
var require_permute = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = permute;
  function permute(source, keys) {
    return Array.from(keys, (key) => source[key]);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/sort.js
var require_sort = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ascendingDefined = ascendingDefined;
  exports.compareDefined = compareDefined;
  exports.default = sort;
  var _ascending = _interopRequireDefault(require_ascending());
  var _permute = _interopRequireDefault(require_permute());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function sort(values, ...F) {
    if (typeof values[Symbol.iterator] !== "function")
      throw new TypeError("values is not iterable");
    values = Array.from(values);
    let [f] = F;
    if (f && f.length !== 2 || F.length > 1) {
      const index = Uint32Array.from(values, (d, i) => i);
      if (F.length > 1) {
        F = F.map((f2) => values.map(f2));
        index.sort((i, j2) => {
          for (const f2 of F) {
            const c = ascendingDefined(f2[i], f2[j2]);
            if (c)
              return c;
          }
        });
      } else {
        f = values.map(f);
        index.sort((i, j2) => ascendingDefined(f[i], f[j2]));
      }
      return (0, _permute.default)(values, index);
    }
    return values.sort(compareDefined(f));
  }
  function compareDefined(compare = _ascending.default) {
    if (compare === _ascending.default)
      return ascendingDefined;
    if (typeof compare !== "function")
      throw new TypeError("compare is not a function");
    return (a, b) => {
      const x = compare(a, b);
      if (x || x === 0)
        return x;
      return (compare(b, b) === 0) - (compare(a, a) === 0);
    };
  }
  function ascendingDefined(a, b) {
    return (a == null || !(a >= a)) - (b == null || !(b >= b)) || (a < b ? -1 : a > b ? 1 : 0);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/groupSort.js
var require_groupSort = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = groupSort;
  var _ascending = _interopRequireDefault(require_ascending());
  var _group = _interopRequireWildcard(require_group());
  var _sort = _interopRequireDefault(require_sort());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function groupSort(values, reduce, key) {
    return (reduce.length !== 2 ? (0, _sort.default)((0, _group.rollup)(values, reduce, key), ([ak, av], [bk, bv]) => (0, _ascending.default)(av, bv) || (0, _ascending.default)(ak, bk)) : (0, _sort.default)((0, _group.default)(values, key), ([ak, av], [bk, bv]) => reduce(av, bv) || (0, _ascending.default)(ak, bk))).map(([key2]) => key2);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/array.js
var require_array = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.slice = exports.map = undefined;
  var array = Array.prototype;
  var slice = array.slice;
  exports.slice = slice;
  var map2 = array.map;
  exports.map = map2;
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/constant.js
var require_constant = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = constant;
  function constant(x) {
    return () => x;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/ticks.js
var require_ticks = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = ticks2;
  exports.tickIncrement = tickIncrement2;
  exports.tickStep = tickStep2;
  var e102 = Math.sqrt(50);
  var e52 = Math.sqrt(10);
  var e22 = Math.sqrt(2);
  function ticks2(start2, stop2, count) {
    var reverse, i = -1, n, ticks3, step;
    stop2 = +stop2, start2 = +start2, count = +count;
    if (start2 === stop2 && count > 0)
      return [start2];
    if (reverse = stop2 < start2)
      n = start2, start2 = stop2, stop2 = n;
    if ((step = tickIncrement2(start2, stop2, count)) === 0 || !isFinite(step))
      return [];
    if (step > 0) {
      let r0 = Math.round(start2 / step), r1 = Math.round(stop2 / step);
      if (r0 * step < start2)
        ++r0;
      if (r1 * step > stop2)
        --r1;
      ticks3 = new Array(n = r1 - r0 + 1);
      while (++i < n)
        ticks3[i] = (r0 + i) * step;
    } else {
      step = -step;
      let r0 = Math.round(start2 * step), r1 = Math.round(stop2 * step);
      if (r0 / step < start2)
        ++r0;
      if (r1 / step > stop2)
        --r1;
      ticks3 = new Array(n = r1 - r0 + 1);
      while (++i < n)
        ticks3[i] = (r0 + i) / step;
    }
    if (reverse)
      ticks3.reverse();
    return ticks3;
  }
  function tickIncrement2(start2, stop2, count) {
    var step = (stop2 - start2) / Math.max(0, count), power = Math.floor(Math.log(step) / Math.LN10), error = step / Math.pow(10, power);
    return power >= 0 ? (error >= e102 ? 10 : error >= e52 ? 5 : error >= e22 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e102 ? 10 : error >= e52 ? 5 : error >= e22 ? 2 : 1);
  }
  function tickStep2(start2, stop2, count) {
    var step0 = Math.abs(stop2 - start2) / Math.max(0, count), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
    if (error >= e102)
      step1 *= 10;
    else if (error >= e52)
      step1 *= 5;
    else if (error >= e22)
      step1 *= 2;
    return stop2 < start2 ? -step1 : step1;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/nice.js
var require_nice = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = nice2;
  var _ticks = require_ticks();
  function nice2(start2, stop2, count) {
    let prestep;
    while (true) {
      const step = (0, _ticks.tickIncrement)(start2, stop2, count);
      if (step === prestep || step === 0 || !isFinite(step)) {
        return [start2, stop2];
      } else if (step > 0) {
        start2 = Math.floor(start2 / step) * step;
        stop2 = Math.ceil(stop2 / step) * step;
      } else if (step < 0) {
        start2 = Math.ceil(start2 * step) / step;
        stop2 = Math.floor(stop2 * step) / step;
      }
      prestep = step;
    }
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/threshold/sturges.js
var require_sturges = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = thresholdSturges;
  var _count = _interopRequireDefault(require_count());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function thresholdSturges(values) {
    return Math.ceil(Math.log((0, _count.default)(values)) / Math.LN2) + 1;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/bin.js
var require_bin = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = bin;
  var _array = require_array();
  var _bisect = _interopRequireDefault(require_bisect());
  var _constant = _interopRequireDefault(require_constant());
  var _extent = _interopRequireDefault(require_extent());
  var _identity = _interopRequireDefault(require_identity());
  var _nice = _interopRequireDefault(require_nice());
  var _ticks = _interopRequireWildcard(require_ticks());
  var _sturges = _interopRequireDefault(require_sturges());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function bin() {
    var value = _identity.default, domain = _extent.default, threshold2 = _sturges.default;
    function histogram(data) {
      if (!Array.isArray(data))
        data = Array.from(data);
      var i, n = data.length, x, step, values = new Array(n);
      for (i = 0;i < n; ++i) {
        values[i] = value(data[i], i, data);
      }
      var xz = domain(values), x0 = xz[0], x1 = xz[1], tz = threshold2(values, x0, x1);
      if (!Array.isArray(tz)) {
        const max = x1, tn = +tz;
        if (domain === _extent.default)
          [x0, x1] = (0, _nice.default)(x0, x1, tn);
        tz = (0, _ticks.default)(x0, x1, tn);
        if (tz[0] <= x0)
          step = (0, _ticks.tickIncrement)(x0, x1, tn);
        if (tz[tz.length - 1] >= x1) {
          if (max >= x1 && domain === _extent.default) {
            const step2 = (0, _ticks.tickIncrement)(x0, x1, tn);
            if (isFinite(step2)) {
              if (step2 > 0) {
                x1 = (Math.floor(x1 / step2) + 1) * step2;
              } else if (step2 < 0) {
                x1 = (Math.ceil(x1 * -step2) + 1) / -step2;
              }
            }
          } else {
            tz.pop();
          }
        }
      }
      var m = tz.length, a = 0, b = m;
      while (tz[a] <= x0)
        ++a;
      while (tz[b - 1] > x1)
        --b;
      if (a || b < m)
        tz = tz.slice(a, b), m = b - a;
      var bins = new Array(m + 1), bin2;
      for (i = 0;i <= m; ++i) {
        bin2 = bins[i] = [];
        bin2.x0 = i > 0 ? tz[i - 1] : x0;
        bin2.x1 = i < m ? tz[i] : x1;
      }
      if (isFinite(step)) {
        if (step > 0) {
          for (i = 0;i < n; ++i) {
            if ((x = values[i]) != null && x0 <= x && x <= x1) {
              bins[Math.min(m, Math.floor((x - x0) / step))].push(data[i]);
            }
          }
        } else if (step < 0) {
          for (i = 0;i < n; ++i) {
            if ((x = values[i]) != null && x0 <= x && x <= x1) {
              const j2 = Math.floor((x0 - x) * step);
              bins[Math.min(m, j2 + (tz[j2] <= x))].push(data[i]);
            }
          }
        }
      } else {
        for (i = 0;i < n; ++i) {
          if ((x = values[i]) != null && x0 <= x && x <= x1) {
            bins[(0, _bisect.default)(tz, x, 0, m)].push(data[i]);
          }
        }
      }
      return bins;
    }
    histogram.value = function(_) {
      return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant.default)(_), histogram) : value;
    };
    histogram.domain = function(_) {
      return arguments.length ? (domain = typeof _ === "function" ? _ : (0, _constant.default)([_[0], _[1]]), histogram) : domain;
    };
    histogram.thresholds = function(_) {
      return arguments.length ? (threshold2 = typeof _ === "function" ? _ : (0, _constant.default)(Array.isArray(_) ? _array.slice.call(_) : _), histogram) : threshold2;
    };
    return histogram;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/max.js
var require_max = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = max;
  function max(values, valueof) {
    let max2;
    if (valueof === undefined) {
      for (const value of values) {
        if (value != null && (max2 < value || max2 === undefined && value >= value)) {
          max2 = value;
        }
      }
    } else {
      let index = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null && (max2 < value || max2 === undefined && value >= value)) {
          max2 = value;
        }
      }
    }
    return max2;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/maxIndex.js
var require_maxIndex = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = maxIndex;
  function maxIndex(values, valueof) {
    let max;
    let maxIndex2 = -1;
    let index = -1;
    if (valueof === undefined) {
      for (const value of values) {
        ++index;
        if (value != null && (max < value || max === undefined && value >= value)) {
          max = value, maxIndex2 = index;
        }
      }
    } else {
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null && (max < value || max === undefined && value >= value)) {
          max = value, maxIndex2 = index;
        }
      }
    }
    return maxIndex2;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/min.js
var require_min = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = min;
  function min(values, valueof) {
    let min2;
    if (valueof === undefined) {
      for (const value of values) {
        if (value != null && (min2 > value || min2 === undefined && value >= value)) {
          min2 = value;
        }
      }
    } else {
      let index = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null && (min2 > value || min2 === undefined && value >= value)) {
          min2 = value;
        }
      }
    }
    return min2;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/minIndex.js
var require_minIndex = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = minIndex;
  function minIndex(values, valueof) {
    let min;
    let minIndex2 = -1;
    let index = -1;
    if (valueof === undefined) {
      for (const value of values) {
        ++index;
        if (value != null && (min > value || min === undefined && value >= value)) {
          min = value, minIndex2 = index;
        }
      }
    } else {
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null && (min > value || min === undefined && value >= value)) {
          min = value, minIndex2 = index;
        }
      }
    }
    return minIndex2;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/quickselect.js
var require_quickselect = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = quickselect;
  var _sort = require_sort();
  function quickselect(array, k2, left = 0, right = Infinity, compare) {
    k2 = Math.floor(k2);
    left = Math.floor(Math.max(0, left));
    right = Math.floor(Math.min(array.length - 1, right));
    if (!(left <= k2 && k2 <= right))
      return array;
    compare = compare === undefined ? _sort.ascendingDefined : (0, _sort.compareDefined)(compare);
    while (right > left) {
      if (right - left > 600) {
        const n = right - left + 1;
        const m = k2 - left + 1;
        const z = Math.log(n);
        const s = 0.5 * Math.exp(2 * z / 3);
        const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
        const newLeft = Math.max(left, Math.floor(k2 - m * s / n + sd));
        const newRight = Math.min(right, Math.floor(k2 + (n - m) * s / n + sd));
        quickselect(array, k2, newLeft, newRight, compare);
      }
      const t = array[k2];
      let i = left;
      let j2 = right;
      swap(array, left, k2);
      if (compare(array[right], t) > 0)
        swap(array, left, right);
      while (i < j2) {
        swap(array, i, j2), ++i, --j2;
        while (compare(array[i], t) < 0)
          ++i;
        while (compare(array[j2], t) > 0)
          --j2;
      }
      if (compare(array[left], t) === 0)
        swap(array, left, j2);
      else
        ++j2, swap(array, j2, right);
      if (j2 <= k2)
        left = j2 + 1;
      if (k2 <= j2)
        right = j2 - 1;
    }
    return array;
  }
  function swap(array, i, j2) {
    const t = array[i];
    array[i] = array[j2];
    array[j2] = t;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/greatest.js
var require_greatest = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = greatest;
  var _ascending = _interopRequireDefault(require_ascending());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function greatest(values, compare = _ascending.default) {
    let max;
    let defined = false;
    if (compare.length === 1) {
      let maxValue;
      for (const element of values) {
        const value = compare(element);
        if (defined ? (0, _ascending.default)(value, maxValue) > 0 : (0, _ascending.default)(value, value) === 0) {
          max = element;
          maxValue = value;
          defined = true;
        }
      }
    } else {
      for (const value of values) {
        if (defined ? compare(value, max) > 0 : compare(value, value) === 0) {
          max = value;
          defined = true;
        }
      }
    }
    return max;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/quantile.js
var require_quantile = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = quantile3;
  exports.quantileIndex = quantileIndex2;
  exports.quantileSorted = quantileSorted2;
  var _max = _interopRequireDefault(require_max());
  var _maxIndex = _interopRequireDefault(require_maxIndex());
  var _min = _interopRequireDefault(require_min());
  var _minIndex = _interopRequireDefault(require_minIndex());
  var _quickselect = _interopRequireDefault(require_quickselect());
  var _number = _interopRequireWildcard(require_number());
  var _sort = require_sort();
  var _greatest = _interopRequireDefault(require_greatest());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function quantile3(values, p2, valueof) {
    values = Float64Array.from((0, _number.numbers)(values, valueof));
    if (!(n = values.length) || isNaN(p2 = +p2))
      return;
    if (p2 <= 0 || n < 2)
      return (0, _min.default)(values);
    if (p2 >= 1)
      return (0, _max.default)(values);
    var n, i = (n - 1) * p2, i0 = Math.floor(i), value0 = (0, _max.default)((0, _quickselect.default)(values, i0).subarray(0, i0 + 1)), value1 = (0, _min.default)(values.subarray(i0 + 1));
    return value0 + (value1 - value0) * (i - i0);
  }
  function quantileSorted2(values, p2, valueof = _number.default) {
    if (!(n = values.length) || isNaN(p2 = +p2))
      return;
    if (p2 <= 0 || n < 2)
      return +valueof(values[0], 0, values);
    if (p2 >= 1)
      return +valueof(values[n - 1], n - 1, values);
    var n, i = (n - 1) * p2, i0 = Math.floor(i), value0 = +valueof(values[i0], i0, values), value1 = +valueof(values[i0 + 1], i0 + 1, values);
    return value0 + (value1 - value0) * (i - i0);
  }
  function quantileIndex2(values, p2, valueof) {
    values = Float64Array.from((0, _number.numbers)(values, valueof));
    if (!(n = values.length) || isNaN(p2 = +p2))
      return;
    if (p2 <= 0 || n < 2)
      return (0, _minIndex.default)(values);
    if (p2 >= 1)
      return (0, _maxIndex.default)(values);
    var n, i = Math.floor((n - 1) * p2), order = (i2, j2) => (0, _sort.ascendingDefined)(values[i2], values[j2]), index = (0, _quickselect.default)(Uint32Array.from(values, (_, i2) => i2), i, 0, n - 1, order);
    return (0, _greatest.default)(index.subarray(0, i + 1), (i2) => values[i2]);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/threshold/freedmanDiaconis.js
var require_freedmanDiaconis = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = thresholdFreedmanDiaconis;
  var _count = _interopRequireDefault(require_count());
  var _quantile = _interopRequireDefault(require_quantile());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function thresholdFreedmanDiaconis(values, min, max) {
    return Math.ceil((max - min) / (2 * ((0, _quantile.default)(values, 0.75) - (0, _quantile.default)(values, 0.25)) * Math.pow((0, _count.default)(values), -1 / 3)));
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/threshold/scott.js
var require_scott = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = thresholdScott;
  var _count = _interopRequireDefault(require_count());
  var _deviation = _interopRequireDefault(require_deviation());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function thresholdScott(values, min, max) {
    return Math.ceil((max - min) * Math.cbrt((0, _count.default)(values)) / (3.49 * (0, _deviation.default)(values)));
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/mean.js
var require_mean = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = mean;
  function mean(values, valueof) {
    let count = 0;
    let sum = 0;
    if (valueof === undefined) {
      for (let value of values) {
        if (value != null && (value = +value) >= value) {
          ++count, sum += value;
        }
      }
    } else {
      let index = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
          ++count, sum += value;
        }
      }
    }
    if (count)
      return sum / count;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/median.js
var require_median = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = median;
  exports.medianIndex = medianIndex;
  var _quantile = _interopRequireWildcard(require_quantile());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function median(values, valueof) {
    return (0, _quantile.default)(values, 0.5, valueof);
  }
  function medianIndex(values, valueof) {
    return (0, _quantile.quantileIndex)(values, 0.5, valueof);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/merge.js
var require_merge = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = merge;
  function* flatten(arrays) {
    for (const array of arrays) {
      yield* array;
    }
  }
  function merge(arrays) {
    return Array.from(flatten(arrays));
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/mode.js
var require_mode = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = mode;
  var _index = require_src();
  function mode(values, valueof) {
    const counts = new _index.InternMap;
    if (valueof === undefined) {
      for (let value of values) {
        if (value != null && value >= value) {
          counts.set(value, (counts.get(value) || 0) + 1);
        }
      }
    } else {
      let index = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null && value >= value) {
          counts.set(value, (counts.get(value) || 0) + 1);
        }
      }
    }
    let modeValue;
    let modeCount = 0;
    for (const [value, count] of counts) {
      if (count > modeCount) {
        modeCount = count;
        modeValue = value;
      }
    }
    return modeValue;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/pairs.js
var require_pairs = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = pairs;
  exports.pair = pair;
  function pairs(values, pairof = pair) {
    const pairs2 = [];
    let previous;
    let first = false;
    for (const value of values) {
      if (first)
        pairs2.push(pairof(previous, value));
      previous = value;
      first = true;
    }
    return pairs2;
  }
  function pair(a, b) {
    return [a, b];
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/range.js
var require_range = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = range2;
  function range2(start2, stop2, step) {
    start2 = +start2, stop2 = +stop2, step = (n = arguments.length) < 2 ? (stop2 = start2, start2 = 0, 1) : n < 3 ? 1 : +step;
    var i = -1, n = Math.max(0, Math.ceil((stop2 - start2) / step)) | 0, range3 = new Array(n);
    while (++i < n) {
      range3[i] = start2 + i * step;
    }
    return range3;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/rank.js
var require_rank = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = rank;
  var _ascending = _interopRequireDefault(require_ascending());
  var _sort = require_sort();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function rank(values, valueof = _ascending.default) {
    if (typeof values[Symbol.iterator] !== "function")
      throw new TypeError("values is not iterable");
    let V = Array.from(values);
    const R = new Float64Array(V.length);
    if (valueof.length !== 2)
      V = V.map(valueof), valueof = _ascending.default;
    const compareIndex = (i, j2) => valueof(V[i], V[j2]);
    let k2, r;
    Uint32Array.from(V, (_, i) => i).sort(valueof === _ascending.default ? (i, j2) => (0, _sort.ascendingDefined)(V[i], V[j2]) : (0, _sort.compareDefined)(compareIndex)).forEach((j2, i) => {
      const c = compareIndex(j2, k2 === undefined ? j2 : k2);
      if (c >= 0) {
        if (k2 === undefined || c > 0)
          k2 = j2, r = i;
        R[j2] = r;
      } else {
        R[j2] = NaN;
      }
    });
    return R;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/least.js
var require_least = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = least;
  var _ascending = _interopRequireDefault(require_ascending());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function least(values, compare = _ascending.default) {
    let min;
    let defined = false;
    if (compare.length === 1) {
      let minValue;
      for (const element of values) {
        const value = compare(element);
        if (defined ? (0, _ascending.default)(value, minValue) < 0 : (0, _ascending.default)(value, value) === 0) {
          min = element;
          minValue = value;
          defined = true;
        }
      }
    } else {
      for (const value of values) {
        if (defined ? compare(value, min) < 0 : compare(value, value) === 0) {
          min = value;
          defined = true;
        }
      }
    }
    return min;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/leastIndex.js
var require_leastIndex = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = leastIndex;
  var _ascending = _interopRequireDefault(require_ascending());
  var _minIndex = _interopRequireDefault(require_minIndex());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function leastIndex(values, compare = _ascending.default) {
    if (compare.length === 1)
      return (0, _minIndex.default)(values, compare);
    let minValue;
    let min = -1;
    let index = -1;
    for (const value of values) {
      ++index;
      if (min < 0 ? compare(value, value) === 0 : compare(value, minValue) < 0) {
        minValue = value;
        min = index;
      }
    }
    return min;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/greatestIndex.js
var require_greatestIndex = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = greatestIndex;
  var _ascending = _interopRequireDefault(require_ascending());
  var _maxIndex = _interopRequireDefault(require_maxIndex());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function greatestIndex(values, compare = _ascending.default) {
    if (compare.length === 1)
      return (0, _maxIndex.default)(values, compare);
    let maxValue;
    let max = -1;
    let index = -1;
    for (const value of values) {
      ++index;
      if (max < 0 ? compare(value, value) === 0 : compare(value, maxValue) > 0) {
        maxValue = value;
        max = index;
      }
    }
    return max;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/scan.js
var require_scan = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = scan;
  var _leastIndex = _interopRequireDefault(require_leastIndex());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function scan(values, compare) {
    const index = (0, _leastIndex.default)(values, compare);
    return index < 0 ? undefined : index;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/shuffle.js
var require_shuffle = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  exports.shuffler = shuffler;
  var _default = shuffler(Math.random);
  exports.default = _default;
  function shuffler(random) {
    return function shuffle(array, i0 = 0, i1 = array.length) {
      let m = i1 - (i0 = +i0);
      while (m) {
        const i = random() * m-- | 0, t = array[m + i0];
        array[m + i0] = array[i + i0];
        array[i + i0] = t;
      }
      return array;
    };
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/sum.js
var require_sum = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = sum;
  function sum(values, valueof) {
    let sum2 = 0;
    if (valueof === undefined) {
      for (let value of values) {
        if (value = +value) {
          sum2 += value;
        }
      }
    } else {
      let index = -1;
      for (let value of values) {
        if (value = +valueof(value, ++index, values)) {
          sum2 += value;
        }
      }
    }
    return sum2;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/transpose.js
var require_transpose = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = transpose;
  var _min = _interopRequireDefault(require_min());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function transpose(matrix) {
    if (!(n = matrix.length))
      return [];
    for (var i = -1, m = (0, _min.default)(matrix, length), transpose2 = new Array(m);++i < m; ) {
      for (var j2 = -1, n, row = transpose2[i] = new Array(n);++j2 < n; ) {
        row[j2] = matrix[j2][i];
      }
    }
    return transpose2;
  }
  function length(d) {
    return d.length;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/zip.js
var require_zip = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = zip;
  var _transpose = _interopRequireDefault(require_transpose());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function zip() {
    return (0, _transpose.default)(arguments);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/every.js
var require_every = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = every;
  function every(values, test) {
    if (typeof test !== "function")
      throw new TypeError("test is not a function");
    let index = -1;
    for (const value of values) {
      if (!test(value, ++index, values)) {
        return false;
      }
    }
    return true;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/some.js
var require_some = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = some;
  function some(values, test) {
    if (typeof test !== "function")
      throw new TypeError("test is not a function");
    let index = -1;
    for (const value of values) {
      if (test(value, ++index, values)) {
        return true;
      }
    }
    return false;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/filter.js
var require_filter = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = filter;
  function filter(values, test) {
    if (typeof test !== "function")
      throw new TypeError("test is not a function");
    const array = [];
    let index = -1;
    for (const value of values) {
      if (test(value, ++index, values)) {
        array.push(value);
      }
    }
    return array;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/map.js
var require_map = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = map2;
  function map2(values, mapper) {
    if (typeof values[Symbol.iterator] !== "function")
      throw new TypeError("values is not iterable");
    if (typeof mapper !== "function")
      throw new TypeError("mapper is not a function");
    return Array.from(values, (value, index) => mapper(value, index, values));
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/reduce.js
var require_reduce = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = reduce;
  function reduce(values, reducer, value) {
    if (typeof reducer !== "function")
      throw new TypeError("reducer is not a function");
    const iterator = values[Symbol.iterator]();
    let done, next, index = -1;
    if (arguments.length < 3) {
      ({
        done,
        value
      } = iterator.next());
      if (done)
        return;
      ++index;
    }
    while ({
      done,
      value: next
    } = iterator.next(), !done) {
      value = reducer(value, next, ++index, values);
    }
    return value;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/reverse.js
var require_reverse = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = reverse;
  function reverse(values) {
    if (typeof values[Symbol.iterator] !== "function")
      throw new TypeError("values is not iterable");
    return Array.from(values).reverse();
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/difference.js
var require_difference = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = difference;
  var _index = require_src();
  function difference(values, ...others) {
    values = new _index.InternSet(values);
    for (const other of others) {
      for (const value of other) {
        values.delete(value);
      }
    }
    return values;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/disjoint.js
var require_disjoint = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = disjoint;
  var _index = require_src();
  function disjoint(values, other) {
    const iterator = other[Symbol.iterator](), set = new _index.InternSet;
    for (const v of values) {
      if (set.has(v))
        return false;
      let value, done;
      while ({
        value,
        done
      } = iterator.next()) {
        if (done)
          break;
        if (Object.is(v, value))
          return false;
        set.add(value);
      }
    }
    return true;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/intersection.js
var require_intersection = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = intersection;
  var _index = require_src();
  function intersection(values, ...others) {
    values = new _index.InternSet(values);
    others = others.map(set);
    out:
      for (const value of values) {
        for (const other of others) {
          if (!other.has(value)) {
            values.delete(value);
            continue out;
          }
        }
      }
    return values;
  }
  function set(values) {
    return values instanceof _index.InternSet ? values : new _index.InternSet(values);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/superset.js
var require_superset = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = superset;
  function superset(values, other) {
    const iterator = values[Symbol.iterator](), set = new Set;
    for (const o of other) {
      const io = intern(o);
      if (set.has(io))
        continue;
      let value, done;
      while ({
        value,
        done
      } = iterator.next()) {
        if (done)
          return false;
        const ivalue = intern(value);
        set.add(ivalue);
        if (Object.is(io, ivalue))
          break;
      }
    }
    return true;
  }
  function intern(value) {
    return value !== null && typeof value === "object" ? value.valueOf() : value;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/subset.js
var require_subset = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = subset;
  var _superset = _interopRequireDefault(require_superset());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function subset(values, other) {
    return (0, _superset.default)(other, values);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/union.js
var require_union = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = union;
  var _index = require_src();
  function union(...others) {
    const set = new _index.InternSet;
    for (const other of others) {
      for (const o of other) {
        set.add(o);
      }
    }
    return set;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-array/src/index.js
var require_src2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "Adder", {
    enumerable: true,
    get: function() {
      return _fsum.Adder;
    }
  });
  Object.defineProperty(exports, "InternMap", {
    enumerable: true,
    get: function() {
      return _index.InternMap;
    }
  });
  Object.defineProperty(exports, "InternSet", {
    enumerable: true,
    get: function() {
      return _index.InternSet;
    }
  });
  Object.defineProperty(exports, "ascending", {
    enumerable: true,
    get: function() {
      return _ascending.default;
    }
  });
  Object.defineProperty(exports, "bin", {
    enumerable: true,
    get: function() {
      return _bin.default;
    }
  });
  Object.defineProperty(exports, "bisect", {
    enumerable: true,
    get: function() {
      return _bisect.default;
    }
  });
  Object.defineProperty(exports, "bisectCenter", {
    enumerable: true,
    get: function() {
      return _bisect.bisectCenter;
    }
  });
  Object.defineProperty(exports, "bisectLeft", {
    enumerable: true,
    get: function() {
      return _bisect.bisectLeft;
    }
  });
  Object.defineProperty(exports, "bisectRight", {
    enumerable: true,
    get: function() {
      return _bisect.bisectRight;
    }
  });
  Object.defineProperty(exports, "bisector", {
    enumerable: true,
    get: function() {
      return _bisector.default;
    }
  });
  Object.defineProperty(exports, "blur", {
    enumerable: true,
    get: function() {
      return _blur.blur;
    }
  });
  Object.defineProperty(exports, "blur2", {
    enumerable: true,
    get: function() {
      return _blur.blur2;
    }
  });
  Object.defineProperty(exports, "blurImage", {
    enumerable: true,
    get: function() {
      return _blur.blurImage;
    }
  });
  Object.defineProperty(exports, "count", {
    enumerable: true,
    get: function() {
      return _count.default;
    }
  });
  Object.defineProperty(exports, "cross", {
    enumerable: true,
    get: function() {
      return _cross.default;
    }
  });
  Object.defineProperty(exports, "cumsum", {
    enumerable: true,
    get: function() {
      return _cumsum.default;
    }
  });
  Object.defineProperty(exports, "descending", {
    enumerable: true,
    get: function() {
      return _descending.default;
    }
  });
  Object.defineProperty(exports, "deviation", {
    enumerable: true,
    get: function() {
      return _deviation.default;
    }
  });
  Object.defineProperty(exports, "difference", {
    enumerable: true,
    get: function() {
      return _difference.default;
    }
  });
  Object.defineProperty(exports, "disjoint", {
    enumerable: true,
    get: function() {
      return _disjoint.default;
    }
  });
  Object.defineProperty(exports, "every", {
    enumerable: true,
    get: function() {
      return _every.default;
    }
  });
  Object.defineProperty(exports, "extent", {
    enumerable: true,
    get: function() {
      return _extent.default;
    }
  });
  Object.defineProperty(exports, "fcumsum", {
    enumerable: true,
    get: function() {
      return _fsum.fcumsum;
    }
  });
  Object.defineProperty(exports, "filter", {
    enumerable: true,
    get: function() {
      return _filter.default;
    }
  });
  Object.defineProperty(exports, "flatGroup", {
    enumerable: true,
    get: function() {
      return _group.flatGroup;
    }
  });
  Object.defineProperty(exports, "flatRollup", {
    enumerable: true,
    get: function() {
      return _group.flatRollup;
    }
  });
  Object.defineProperty(exports, "fsum", {
    enumerable: true,
    get: function() {
      return _fsum.fsum;
    }
  });
  Object.defineProperty(exports, "greatest", {
    enumerable: true,
    get: function() {
      return _greatest.default;
    }
  });
  Object.defineProperty(exports, "greatestIndex", {
    enumerable: true,
    get: function() {
      return _greatestIndex.default;
    }
  });
  Object.defineProperty(exports, "group", {
    enumerable: true,
    get: function() {
      return _group.default;
    }
  });
  Object.defineProperty(exports, "groupSort", {
    enumerable: true,
    get: function() {
      return _groupSort.default;
    }
  });
  Object.defineProperty(exports, "groups", {
    enumerable: true,
    get: function() {
      return _group.groups;
    }
  });
  Object.defineProperty(exports, "histogram", {
    enumerable: true,
    get: function() {
      return _bin.default;
    }
  });
  Object.defineProperty(exports, "index", {
    enumerable: true,
    get: function() {
      return _group.index;
    }
  });
  Object.defineProperty(exports, "indexes", {
    enumerable: true,
    get: function() {
      return _group.indexes;
    }
  });
  Object.defineProperty(exports, "intersection", {
    enumerable: true,
    get: function() {
      return _intersection.default;
    }
  });
  Object.defineProperty(exports, "least", {
    enumerable: true,
    get: function() {
      return _least.default;
    }
  });
  Object.defineProperty(exports, "leastIndex", {
    enumerable: true,
    get: function() {
      return _leastIndex.default;
    }
  });
  Object.defineProperty(exports, "map", {
    enumerable: true,
    get: function() {
      return _map.default;
    }
  });
  Object.defineProperty(exports, "max", {
    enumerable: true,
    get: function() {
      return _max.default;
    }
  });
  Object.defineProperty(exports, "maxIndex", {
    enumerable: true,
    get: function() {
      return _maxIndex.default;
    }
  });
  Object.defineProperty(exports, "mean", {
    enumerable: true,
    get: function() {
      return _mean.default;
    }
  });
  Object.defineProperty(exports, "median", {
    enumerable: true,
    get: function() {
      return _median.default;
    }
  });
  Object.defineProperty(exports, "medianIndex", {
    enumerable: true,
    get: function() {
      return _median.medianIndex;
    }
  });
  Object.defineProperty(exports, "merge", {
    enumerable: true,
    get: function() {
      return _merge.default;
    }
  });
  Object.defineProperty(exports, "min", {
    enumerable: true,
    get: function() {
      return _min.default;
    }
  });
  Object.defineProperty(exports, "minIndex", {
    enumerable: true,
    get: function() {
      return _minIndex.default;
    }
  });
  Object.defineProperty(exports, "mode", {
    enumerable: true,
    get: function() {
      return _mode.default;
    }
  });
  Object.defineProperty(exports, "nice", {
    enumerable: true,
    get: function() {
      return _nice.default;
    }
  });
  Object.defineProperty(exports, "pairs", {
    enumerable: true,
    get: function() {
      return _pairs.default;
    }
  });
  Object.defineProperty(exports, "permute", {
    enumerable: true,
    get: function() {
      return _permute.default;
    }
  });
  Object.defineProperty(exports, "quantile", {
    enumerable: true,
    get: function() {
      return _quantile.default;
    }
  });
  Object.defineProperty(exports, "quantileIndex", {
    enumerable: true,
    get: function() {
      return _quantile.quantileIndex;
    }
  });
  Object.defineProperty(exports, "quantileSorted", {
    enumerable: true,
    get: function() {
      return _quantile.quantileSorted;
    }
  });
  Object.defineProperty(exports, "quickselect", {
    enumerable: true,
    get: function() {
      return _quickselect.default;
    }
  });
  Object.defineProperty(exports, "range", {
    enumerable: true,
    get: function() {
      return _range.default;
    }
  });
  Object.defineProperty(exports, "rank", {
    enumerable: true,
    get: function() {
      return _rank.default;
    }
  });
  Object.defineProperty(exports, "reduce", {
    enumerable: true,
    get: function() {
      return _reduce.default;
    }
  });
  Object.defineProperty(exports, "reverse", {
    enumerable: true,
    get: function() {
      return _reverse.default;
    }
  });
  Object.defineProperty(exports, "rollup", {
    enumerable: true,
    get: function() {
      return _group.rollup;
    }
  });
  Object.defineProperty(exports, "rollups", {
    enumerable: true,
    get: function() {
      return _group.rollups;
    }
  });
  Object.defineProperty(exports, "scan", {
    enumerable: true,
    get: function() {
      return _scan.default;
    }
  });
  Object.defineProperty(exports, "shuffle", {
    enumerable: true,
    get: function() {
      return _shuffle.default;
    }
  });
  Object.defineProperty(exports, "shuffler", {
    enumerable: true,
    get: function() {
      return _shuffle.shuffler;
    }
  });
  Object.defineProperty(exports, "some", {
    enumerable: true,
    get: function() {
      return _some.default;
    }
  });
  Object.defineProperty(exports, "sort", {
    enumerable: true,
    get: function() {
      return _sort.default;
    }
  });
  Object.defineProperty(exports, "subset", {
    enumerable: true,
    get: function() {
      return _subset.default;
    }
  });
  Object.defineProperty(exports, "sum", {
    enumerable: true,
    get: function() {
      return _sum.default;
    }
  });
  Object.defineProperty(exports, "superset", {
    enumerable: true,
    get: function() {
      return _superset.default;
    }
  });
  Object.defineProperty(exports, "thresholdFreedmanDiaconis", {
    enumerable: true,
    get: function() {
      return _freedmanDiaconis.default;
    }
  });
  Object.defineProperty(exports, "thresholdScott", {
    enumerable: true,
    get: function() {
      return _scott.default;
    }
  });
  Object.defineProperty(exports, "thresholdSturges", {
    enumerable: true,
    get: function() {
      return _sturges.default;
    }
  });
  Object.defineProperty(exports, "tickIncrement", {
    enumerable: true,
    get: function() {
      return _ticks.tickIncrement;
    }
  });
  Object.defineProperty(exports, "tickStep", {
    enumerable: true,
    get: function() {
      return _ticks.tickStep;
    }
  });
  Object.defineProperty(exports, "ticks", {
    enumerable: true,
    get: function() {
      return _ticks.default;
    }
  });
  Object.defineProperty(exports, "transpose", {
    enumerable: true,
    get: function() {
      return _transpose.default;
    }
  });
  Object.defineProperty(exports, "union", {
    enumerable: true,
    get: function() {
      return _union.default;
    }
  });
  Object.defineProperty(exports, "variance", {
    enumerable: true,
    get: function() {
      return _variance.default;
    }
  });
  Object.defineProperty(exports, "zip", {
    enumerable: true,
    get: function() {
      return _zip.default;
    }
  });
  var _bisect = _interopRequireWildcard(require_bisect());
  var _ascending = _interopRequireDefault(require_ascending());
  var _bisector = _interopRequireDefault(require_bisector());
  var _blur = require_blur();
  var _count = _interopRequireDefault(require_count());
  var _cross = _interopRequireDefault(require_cross());
  var _cumsum = _interopRequireDefault(require_cumsum());
  var _descending = _interopRequireDefault(require_descending());
  var _deviation = _interopRequireDefault(require_deviation());
  var _extent = _interopRequireDefault(require_extent());
  var _fsum = require_fsum();
  var _group = _interopRequireWildcard(require_group());
  var _groupSort = _interopRequireDefault(require_groupSort());
  var _bin = _interopRequireDefault(require_bin());
  var _freedmanDiaconis = _interopRequireDefault(require_freedmanDiaconis());
  var _scott = _interopRequireDefault(require_scott());
  var _sturges = _interopRequireDefault(require_sturges());
  var _max = _interopRequireDefault(require_max());
  var _maxIndex = _interopRequireDefault(require_maxIndex());
  var _mean = _interopRequireDefault(require_mean());
  var _median = _interopRequireWildcard(require_median());
  var _merge = _interopRequireDefault(require_merge());
  var _min = _interopRequireDefault(require_min());
  var _minIndex = _interopRequireDefault(require_minIndex());
  var _mode = _interopRequireDefault(require_mode());
  var _nice = _interopRequireDefault(require_nice());
  var _pairs = _interopRequireDefault(require_pairs());
  var _permute = _interopRequireDefault(require_permute());
  var _quantile = _interopRequireWildcard(require_quantile());
  var _quickselect = _interopRequireDefault(require_quickselect());
  var _range = _interopRequireDefault(require_range());
  var _rank = _interopRequireDefault(require_rank());
  var _least = _interopRequireDefault(require_least());
  var _leastIndex = _interopRequireDefault(require_leastIndex());
  var _greatest = _interopRequireDefault(require_greatest());
  var _greatestIndex = _interopRequireDefault(require_greatestIndex());
  var _scan = _interopRequireDefault(require_scan());
  var _shuffle = _interopRequireWildcard(require_shuffle());
  var _sum = _interopRequireDefault(require_sum());
  var _ticks = _interopRequireWildcard(require_ticks());
  var _transpose = _interopRequireDefault(require_transpose());
  var _variance = _interopRequireDefault(require_variance());
  var _zip = _interopRequireDefault(require_zip());
  var _every = _interopRequireDefault(require_every());
  var _some = _interopRequireDefault(require_some());
  var _filter = _interopRequireDefault(require_filter());
  var _map = _interopRequireDefault(require_map());
  var _reduce = _interopRequireDefault(require_reduce());
  var _reverse = _interopRequireDefault(require_reverse());
  var _sort = _interopRequireDefault(require_sort());
  var _difference = _interopRequireDefault(require_difference());
  var _disjoint = _interopRequireDefault(require_disjoint());
  var _intersection = _interopRequireDefault(require_intersection());
  var _subset = _interopRequireDefault(require_subset());
  var _superset = _interopRequireDefault(require_superset());
  var _union = _interopRequireDefault(require_union());
  var _index = require_src();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-scale/src/init.js
var require_init = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.initInterpolator = initInterpolator;
  exports.initRange = initRange2;
  function initRange2(domain, range2) {
    switch (arguments.length) {
      case 0:
        break;
      case 1:
        this.range(domain);
        break;
      default:
        this.range(range2).domain(domain);
        break;
    }
    return this;
  }
  function initInterpolator(domain, interpolator) {
    switch (arguments.length) {
      case 0:
        break;
      case 1: {
        if (typeof domain === "function")
          this.interpolator(domain);
        else
          this.range(domain);
        break;
      }
      default: {
        this.domain(domain);
        if (typeof interpolator === "function")
          this.interpolator(interpolator);
        else
          this.range(interpolator);
        break;
      }
    }
    return this;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-scale/src/ordinal.js
var require_ordinal = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = ordinal2;
  exports.implicit = undefined;
  var _index = require_src2();
  var _init = require_init();
  var implicit2 = Symbol("implicit");
  exports.implicit = implicit2;
  function ordinal2() {
    var index = new _index.InternMap, domain = [], range2 = [], unknown = implicit2;
    function scale(d) {
      let i = index.get(d);
      if (i === undefined) {
        if (unknown !== implicit2)
          return unknown;
        index.set(d, i = domain.push(d) - 1);
      }
      return range2[i % range2.length];
    }
    scale.domain = function(_) {
      if (!arguments.length)
        return domain.slice();
      domain = [], index = new _index.InternMap;
      for (const value of _) {
        if (index.has(value))
          continue;
        index.set(value, domain.push(value) - 1);
      }
      return scale;
    };
    scale.range = function(_) {
      return arguments.length ? (range2 = Array.from(_), scale) : range2.slice();
    };
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
      return ordinal2(domain, range2).unknown(unknown);
    };
    _init.initRange.apply(scale, arguments);
    return scale;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-scale/src/band.js
var require_band = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = band2;
  exports.point = point2;
  var _index = require_src2();
  var _init = require_init();
  var _ordinal = _interopRequireDefault(require_ordinal());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function band2() {
    var scale = (0, _ordinal.default)().unknown(undefined), domain = scale.domain, ordinalRange = scale.range, r0 = 0, r1 = 1, step, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
    delete scale.unknown;
    function rescale() {
      var n = domain().length, reverse = r1 < r0, start2 = reverse ? r1 : r0, stop2 = reverse ? r0 : r1;
      step = (stop2 - start2) / Math.max(1, n - paddingInner + paddingOuter * 2);
      if (round)
        step = Math.floor(step);
      start2 += (stop2 - start2 - step * (n - paddingInner)) * align;
      bandwidth = step * (1 - paddingInner);
      if (round)
        start2 = Math.round(start2), bandwidth = Math.round(bandwidth);
      var values = (0, _index.range)(n).map(function(i) {
        return start2 + step * i;
      });
      return ordinalRange(reverse ? values.reverse() : values);
    }
    scale.domain = function(_) {
      return arguments.length ? (domain(_), rescale()) : domain();
    };
    scale.range = function(_) {
      return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
    };
    scale.rangeRound = function(_) {
      return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();
    };
    scale.bandwidth = function() {
      return bandwidth;
    };
    scale.step = function() {
      return step;
    };
    scale.round = function(_) {
      return arguments.length ? (round = !!_, rescale()) : round;
    };
    scale.padding = function(_) {
      return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
    };
    scale.paddingInner = function(_) {
      return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
    };
    scale.paddingOuter = function(_) {
      return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
    };
    scale.align = function(_) {
      return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
    };
    scale.copy = function() {
      return band2(domain(), [r0, r1]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
    };
    return _init.initRange.apply(rescale(), arguments);
  }
  function pointish2(scale) {
    var copy2 = scale.copy;
    scale.padding = scale.paddingOuter;
    delete scale.paddingInner;
    delete scale.paddingOuter;
    scale.copy = function() {
      return pointish2(copy2());
    };
    return scale;
  }
  function point2() {
    return pointish2(band2.apply(null, arguments).paddingInner(1));
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-color/src/define.js
var require_define = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  exports.extend = extend2;
  function _default(constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
  }
  function extend2(parent, definition) {
    var prototype = Object.create(parent.prototype);
    for (var key in definition)
      prototype[key] = definition[key];
    return prototype;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-color/src/color.js
var require_color = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Color = Color2;
  exports.Rgb = Rgb2;
  exports.darker = exports.brighter = undefined;
  exports.default = color2;
  exports.hsl = hsl4;
  exports.hslConvert = hslConvert2;
  exports.rgb = rgb3;
  exports.rgbConvert = rgbConvert2;
  var _define = _interopRequireWildcard(require_define());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function Color2() {
  }
  var darker2 = 0.7;
  exports.darker = darker2;
  var brighter2 = 1 / darker2;
  exports.brighter = brighter2;
  var reI2 = "\\s*([+-]?\\d+)\\s*";
  var reN2 = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
  var reP2 = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
  var reHex2 = /^#([0-9a-f]{3,8})$/;
  var reRgbInteger2 = new RegExp(`^rgb\\(${reI2},${reI2},${reI2}\\)$`);
  var reRgbPercent2 = new RegExp(`^rgb\\(${reP2},${reP2},${reP2}\\)$`);
  var reRgbaInteger2 = new RegExp(`^rgba\\(${reI2},${reI2},${reI2},${reN2}\\)$`);
  var reRgbaPercent2 = new RegExp(`^rgba\\(${reP2},${reP2},${reP2},${reN2}\\)$`);
  var reHslPercent2 = new RegExp(`^hsl\\(${reN2},${reP2},${reP2}\\)$`);
  var reHslaPercent2 = new RegExp(`^hsla\\(${reN2},${reP2},${reP2},${reN2}\\)$`);
  var named2 = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  };
  (0, _define.default)(Color2, color2, {
    copy(channels) {
      return Object.assign(new this.constructor, this, channels);
    },
    displayable() {
      return this.rgb().displayable();
    },
    hex: color_formatHex2,
    formatHex: color_formatHex2,
    formatHex8: color_formatHex82,
    formatHsl: color_formatHsl2,
    formatRgb: color_formatRgb2,
    toString: color_formatRgb2
  });
  function color_formatHex2() {
    return this.rgb().formatHex();
  }
  function color_formatHex82() {
    return this.rgb().formatHex8();
  }
  function color_formatHsl2() {
    return hslConvert2(this).formatHsl();
  }
  function color_formatRgb2() {
    return this.rgb().formatRgb();
  }
  function color2(format2) {
    var m, l;
    format2 = (format2 + "").trim().toLowerCase();
    return (m = reHex2.exec(format2)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn2(m) : l === 3 ? new Rgb2(m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, (m & 15) << 4 | m & 15, 1) : l === 8 ? rgba3(m >> 24 & 255, m >> 16 & 255, m >> 8 & 255, (m & 255) / 255) : l === 4 ? rgba3(m >> 12 & 15 | m >> 8 & 240, m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, ((m & 15) << 4 | m & 15) / 255) : null) : (m = reRgbInteger2.exec(format2)) ? new Rgb2(m[1], m[2], m[3], 1) : (m = reRgbPercent2.exec(format2)) ? new Rgb2(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) : (m = reRgbaInteger2.exec(format2)) ? rgba3(m[1], m[2], m[3], m[4]) : (m = reRgbaPercent2.exec(format2)) ? rgba3(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) : (m = reHslPercent2.exec(format2)) ? hsla3(m[1], m[2] / 100, m[3] / 100, 1) : (m = reHslaPercent2.exec(format2)) ? hsla3(m[1], m[2] / 100, m[3] / 100, m[4]) : named2.hasOwnProperty(format2) ? rgbn2(named2[format2]) : format2 === "transparent" ? new Rgb2(NaN, NaN, NaN, 0) : null;
  }
  function rgbn2(n) {
    return new Rgb2(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
  }
  function rgba3(r, g2, b, a) {
    if (a <= 0)
      r = g2 = b = NaN;
    return new Rgb2(r, g2, b, a);
  }
  function rgbConvert2(o) {
    if (!(o instanceof Color2))
      o = color2(o);
    if (!o)
      return new Rgb2;
    o = o.rgb();
    return new Rgb2(o.r, o.g, o.b, o.opacity);
  }
  function rgb3(r, g2, b, opacity) {
    return arguments.length === 1 ? rgbConvert2(r) : new Rgb2(r, g2, b, opacity == null ? 1 : opacity);
  }
  function Rgb2(r, g2, b, opacity) {
    this.r = +r;
    this.g = +g2;
    this.b = +b;
    this.opacity = +opacity;
  }
  (0, _define.default)(Rgb2, rgb3, (0, _define.extend)(Color2, {
    brighter(k2) {
      k2 = k2 == null ? brighter2 : Math.pow(brighter2, k2);
      return new Rgb2(this.r * k2, this.g * k2, this.b * k2, this.opacity);
    },
    darker(k2) {
      k2 = k2 == null ? darker2 : Math.pow(darker2, k2);
      return new Rgb2(this.r * k2, this.g * k2, this.b * k2, this.opacity);
    },
    rgb() {
      return this;
    },
    clamp() {
      return new Rgb2(clampi2(this.r), clampi2(this.g), clampi2(this.b), clampa2(this.opacity));
    },
    displayable() {
      return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
    },
    hex: rgb_formatHex2,
    formatHex: rgb_formatHex2,
    formatHex8: rgb_formatHex82,
    formatRgb: rgb_formatRgb2,
    toString: rgb_formatRgb2
  }));
  function rgb_formatHex2() {
    return `#${hex2(this.r)}${hex2(this.g)}${hex2(this.b)}`;
  }
  function rgb_formatHex82() {
    return `#${hex2(this.r)}${hex2(this.g)}${hex2(this.b)}${hex2((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
  }
  function rgb_formatRgb2() {
    const a = clampa2(this.opacity);
    return `${a === 1 ? "rgb(" : "rgba("}${clampi2(this.r)}, ${clampi2(this.g)}, ${clampi2(this.b)}${a === 1 ? ")" : `, ${a})`}`;
  }
  function clampa2(opacity) {
    return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
  }
  function clampi2(value) {
    return Math.max(0, Math.min(255, Math.round(value) || 0));
  }
  function hex2(value) {
    value = clampi2(value);
    return (value < 16 ? "0" : "") + value.toString(16);
  }
  function hsla3(h, s, l, a) {
    if (a <= 0)
      h = s = l = NaN;
    else if (l <= 0 || l >= 1)
      h = s = NaN;
    else if (s <= 0)
      h = NaN;
    return new Hsl2(h, s, l, a);
  }
  function hslConvert2(o) {
    if (o instanceof Hsl2)
      return new Hsl2(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof Color2))
      o = color2(o);
    if (!o)
      return new Hsl2;
    if (o instanceof Hsl2)
      return o;
    o = o.rgb();
    var r = o.r / 255, g2 = o.g / 255, b = o.b / 255, min = Math.min(r, g2, b), max = Math.max(r, g2, b), h = NaN, s = max - min, l = (max + min) / 2;
    if (s) {
      if (r === max)
        h = (g2 - b) / s + (g2 < b) * 6;
      else if (g2 === max)
        h = (b - r) / s + 2;
      else
        h = (r - g2) / s + 4;
      s /= l < 0.5 ? max + min : 2 - max - min;
      h *= 60;
    } else {
      s = l > 0 && l < 1 ? 0 : h;
    }
    return new Hsl2(h, s, l, o.opacity);
  }
  function hsl4(h, s, l, opacity) {
    return arguments.length === 1 ? hslConvert2(h) : new Hsl2(h, s, l, opacity == null ? 1 : opacity);
  }
  function Hsl2(h, s, l, opacity) {
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
  }
  (0, _define.default)(Hsl2, hsl4, (0, _define.extend)(Color2, {
    brighter(k2) {
      k2 = k2 == null ? brighter2 : Math.pow(brighter2, k2);
      return new Hsl2(this.h, this.s, this.l * k2, this.opacity);
    },
    darker(k2) {
      k2 = k2 == null ? darker2 : Math.pow(darker2, k2);
      return new Hsl2(this.h, this.s, this.l * k2, this.opacity);
    },
    rgb() {
      var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
      return new Rgb2(hsl2rgb2(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb2(h, m1, m2), hsl2rgb2(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
    },
    clamp() {
      return new Hsl2(clamph2(this.h), clampt2(this.s), clampt2(this.l), clampa2(this.opacity));
    },
    displayable() {
      return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
    },
    formatHsl() {
      const a = clampa2(this.opacity);
      return `${a === 1 ? "hsl(" : "hsla("}${clamph2(this.h)}, ${clampt2(this.s) * 100}%, ${clampt2(this.l) * 100}%${a === 1 ? ")" : `, ${a})`}`;
    }
  }));
  function clamph2(value) {
    value = (value || 0) % 360;
    return value < 0 ? value + 360 : value;
  }
  function clampt2(value) {
    return Math.max(0, Math.min(1, value || 0));
  }
  function hsl2rgb2(h, m1, m2) {
    return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-color/src/math.js
var require_math = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.radians = exports.degrees = undefined;
  var radians2 = Math.PI / 180;
  exports.radians = radians2;
  var degrees2 = 180 / Math.PI;
  exports.degrees = degrees2;
});

// node_modules/@visx/vendor/vendor-cjs/d3-color/src/lab.js
var require_lab = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Hcl = Hcl2;
  exports.Lab = Lab2;
  exports.default = lab3;
  exports.gray = gray2;
  exports.hcl = hcl3;
  exports.lch = lch2;
  var _define = _interopRequireWildcard(require_define());
  var _color = require_color();
  var _math = require_math();
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  var K2 = 18;
  var Xn2 = 0.96422;
  var Yn2 = 1;
  var Zn2 = 0.82521;
  var t03 = 4 / 29;
  var t13 = 6 / 29;
  var t22 = 3 * t13 * t13;
  var t32 = t13 * t13 * t13;
  function labConvert2(o) {
    if (o instanceof Lab2)
      return new Lab2(o.l, o.a, o.b, o.opacity);
    if (o instanceof Hcl2)
      return hcl2lab2(o);
    if (!(o instanceof _color.Rgb))
      o = (0, _color.rgbConvert)(o);
    var r = rgb2lrgb2(o.r), g2 = rgb2lrgb2(o.g), b = rgb2lrgb2(o.b), y = xyz2lab2((0.2225045 * r + 0.7168786 * g2 + 0.0606169 * b) / Yn2), x, z;
    if (r === g2 && g2 === b)
      x = z = y;
    else {
      x = xyz2lab2((0.4360747 * r + 0.3850649 * g2 + 0.1430804 * b) / Xn2);
      z = xyz2lab2((0.0139322 * r + 0.0971045 * g2 + 0.7141733 * b) / Zn2);
    }
    return new Lab2(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
  }
  function gray2(l, opacity) {
    return new Lab2(l, 0, 0, opacity == null ? 1 : opacity);
  }
  function lab3(l, a, b, opacity) {
    return arguments.length === 1 ? labConvert2(l) : new Lab2(l, a, b, opacity == null ? 1 : opacity);
  }
  function Lab2(l, a, b, opacity) {
    this.l = +l;
    this.a = +a;
    this.b = +b;
    this.opacity = +opacity;
  }
  (0, _define.default)(Lab2, lab3, (0, _define.extend)(_color.Color, {
    brighter(k2) {
      return new Lab2(this.l + K2 * (k2 == null ? 1 : k2), this.a, this.b, this.opacity);
    },
    darker(k2) {
      return new Lab2(this.l - K2 * (k2 == null ? 1 : k2), this.a, this.b, this.opacity);
    },
    rgb() {
      var y = (this.l + 16) / 116, x = isNaN(this.a) ? y : y + this.a / 500, z = isNaN(this.b) ? y : y - this.b / 200;
      x = Xn2 * lab2xyz2(x);
      y = Yn2 * lab2xyz2(y);
      z = Zn2 * lab2xyz2(z);
      return new _color.Rgb(lrgb2rgb2(3.1338561 * x - 1.6168667 * y - 0.4906146 * z), lrgb2rgb2(-0.9787684 * x + 1.9161415 * y + 0.033454 * z), lrgb2rgb2(0.0719453 * x - 0.2289914 * y + 1.4052427 * z), this.opacity);
    }
  }));
  function xyz2lab2(t) {
    return t > t32 ? Math.pow(t, 1 / 3) : t / t22 + t03;
  }
  function lab2xyz2(t) {
    return t > t13 ? t * t * t : t22 * (t - t03);
  }
  function lrgb2rgb2(x) {
    return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
  }
  function rgb2lrgb2(x) {
    return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
  }
  function hclConvert2(o) {
    if (o instanceof Hcl2)
      return new Hcl2(o.h, o.c, o.l, o.opacity);
    if (!(o instanceof Lab2))
      o = labConvert2(o);
    if (o.a === 0 && o.b === 0)
      return new Hcl2(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
    var h = Math.atan2(o.b, o.a) * _math.degrees;
    return new Hcl2(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
  }
  function lch2(l, c, h, opacity) {
    return arguments.length === 1 ? hclConvert2(l) : new Hcl2(h, c, l, opacity == null ? 1 : opacity);
  }
  function hcl3(h, c, l, opacity) {
    return arguments.length === 1 ? hclConvert2(h) : new Hcl2(h, c, l, opacity == null ? 1 : opacity);
  }
  function Hcl2(h, c, l, opacity) {
    this.h = +h;
    this.c = +c;
    this.l = +l;
    this.opacity = +opacity;
  }
  function hcl2lab2(o) {
    if (isNaN(o.h))
      return new Lab2(o.l, 0, 0, o.opacity);
    var h = o.h * _math.radians;
    return new Lab2(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
  }
  (0, _define.default)(Hcl2, hcl3, (0, _define.extend)(_color.Color, {
    brighter(k2) {
      return new Hcl2(this.h, this.c, this.l + K2 * (k2 == null ? 1 : k2), this.opacity);
    },
    darker(k2) {
      return new Hcl2(this.h, this.c, this.l - K2 * (k2 == null ? 1 : k2), this.opacity);
    },
    rgb() {
      return hcl2lab2(this).rgb();
    }
  }));
});

// node_modules/@visx/vendor/vendor-cjs/d3-color/src/cubehelix.js
var require_cubehelix = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Cubehelix = Cubehelix2;
  exports.default = cubehelix3;
  var _define = _interopRequireWildcard(require_define());
  var _color = require_color();
  var _math = require_math();
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  var A2 = -0.14861;
  var B2 = 1.78277;
  var C2 = -0.29227;
  var D3 = -0.90649;
  var E3 = 1.97294;
  var ED2 = E3 * D3;
  var EB2 = E3 * B2;
  var BC_DA2 = B2 * C2 - D3 * A2;
  function cubehelixConvert2(o) {
    if (o instanceof Cubehelix2)
      return new Cubehelix2(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof _color.Rgb))
      o = (0, _color.rgbConvert)(o);
    var r = o.r / 255, g2 = o.g / 255, b = o.b / 255, l = (BC_DA2 * b + ED2 * r - EB2 * g2) / (BC_DA2 + ED2 - EB2), bl = b - l, k2 = (E3 * (g2 - l) - C2 * bl) / D3, s = Math.sqrt(k2 * k2 + bl * bl) / (E3 * l * (1 - l)), h = s ? Math.atan2(k2, bl) * _math.degrees - 120 : NaN;
    return new Cubehelix2(h < 0 ? h + 360 : h, s, l, o.opacity);
  }
  function cubehelix3(h, s, l, opacity) {
    return arguments.length === 1 ? cubehelixConvert2(h) : new Cubehelix2(h, s, l, opacity == null ? 1 : opacity);
  }
  function Cubehelix2(h, s, l, opacity) {
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
  }
  (0, _define.default)(Cubehelix2, cubehelix3, (0, _define.extend)(_color.Color, {
    brighter(k2) {
      k2 = k2 == null ? _color.brighter : Math.pow(_color.brighter, k2);
      return new Cubehelix2(this.h, this.s, this.l * k2, this.opacity);
    },
    darker(k2) {
      k2 = k2 == null ? _color.darker : Math.pow(_color.darker, k2);
      return new Cubehelix2(this.h, this.s, this.l * k2, this.opacity);
    },
    rgb() {
      var h = isNaN(this.h) ? 0 : (this.h + 120) * _math.radians, l = +this.l, a = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh = Math.cos(h), sinh = Math.sin(h);
      return new _color.Rgb(255 * (l + a * (A2 * cosh + B2 * sinh)), 255 * (l + a * (C2 * cosh + D3 * sinh)), 255 * (l + a * (E3 * cosh)), this.opacity);
    }
  }));
});

// node_modules/@visx/vendor/vendor-cjs/d3-color/src/index.js
var require_src3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "color", {
    enumerable: true,
    get: function() {
      return _color.default;
    }
  });
  Object.defineProperty(exports, "cubehelix", {
    enumerable: true,
    get: function() {
      return _cubehelix.default;
    }
  });
  Object.defineProperty(exports, "gray", {
    enumerable: true,
    get: function() {
      return _lab.gray;
    }
  });
  Object.defineProperty(exports, "hcl", {
    enumerable: true,
    get: function() {
      return _lab.hcl;
    }
  });
  Object.defineProperty(exports, "hsl", {
    enumerable: true,
    get: function() {
      return _color.hsl;
    }
  });
  Object.defineProperty(exports, "lab", {
    enumerable: true,
    get: function() {
      return _lab.default;
    }
  });
  Object.defineProperty(exports, "lch", {
    enumerable: true,
    get: function() {
      return _lab.lch;
    }
  });
  Object.defineProperty(exports, "rgb", {
    enumerable: true,
    get: function() {
      return _color.rgb;
    }
  });
  var _color = _interopRequireWildcard(require_color());
  var _lab = _interopRequireWildcard(require_lab());
  var _cubehelix = _interopRequireDefault(require_cubehelix());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-interpolate/src/basis.js
var require_basis = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.basis = basis2;
  exports.default = _default;
  function basis2(t13, v0, v1, v2, v3) {
    var t22 = t13 * t13, t32 = t22 * t13;
    return ((1 - 3 * t13 + 3 * t22 - t32) * v0 + (4 - 6 * t22 + 3 * t32) * v1 + (1 + 3 * t13 + 3 * t22 - 3 * t32) * v2 + t32 * v3) / 6;
  }
  function _default(values) {
    var n = values.length - 1;
    return function(t) {
      var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
      return basis2((t - i / n) * n, v0, v1, v2, v3);
    };
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-interpolate/src/basisClosed.js
var require_basisClosed = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  var _basis = require_basis();
  function _default(values) {
    var n = values.length;
    return function(t) {
      var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
      return (0, _basis.basis)((t - i / n) * n, v0, v1, v2, v3);
    };
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-interpolate/src/constant.js
var require_constant2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = (x) => () => x;
  exports.default = _default;
});

// node_modules/@visx/vendor/vendor-cjs/d3-interpolate/src/color.js
var require_color2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = nogamma2;
  exports.gamma = gamma2;
  exports.hue = hue2;
  var _constant = _interopRequireDefault(require_constant2());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function linear3(a, d) {
    return function(t) {
      return a + t * d;
    };
  }
  function exponential2(a, b, y) {
    return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
      return Math.pow(a + t * b, y);
    };
  }
  function hue2(a, b) {
    var d = b - a;
    return d ? linear3(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : (0, _constant.default)(isNaN(a) ? b : a);
  }
  function gamma2(y) {
    return (y = +y) === 1 ? nogamma2 : function(a, b) {
      return b - a ? exponential2(a, b, y) : (0, _constant.default)(isNaN(a) ? b : a);
    };
  }
  function nogamma2(a, b) {
    var d = b - a;
    return d ? linear3(a, d) : (0, _constant.default)(isNaN(a) ? b : a);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-interpolate/src/rgb.js
var require_rgb = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.rgbBasisClosed = exports.rgbBasis = exports.default = undefined;
  var _index = require_src3();
  var _basis = _interopRequireDefault(require_basis());
  var _basisClosed = _interopRequireDefault(require_basisClosed());
  var _color = _interopRequireWildcard(require_color2());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var _default = function rgbGamma(y) {
    var color2 = (0, _color.gamma)(y);
    function rgb3(start2, end) {
      var r = color2((start2 = (0, _index.rgb)(start2)).r, (end = (0, _index.rgb)(end)).r), g2 = color2(start2.g, end.g), b = color2(start2.b, end.b), opacity = (0, _color.default)(start2.opacity, end.opacity);
      return function(t) {
        start2.r = r(t);
        start2.g = g2(t);
        start2.b = b(t);
        start2.opacity = opacity(t);
        return start2 + "";
      };
    }
    rgb3.gamma = rgbGamma;
    return rgb3;
  }(1);
  exports.default = _default;
  function rgbSpline2(spline) {
    return function(colors3) {
      var n = colors3.length, r = new Array(n), g2 = new Array(n), b = new Array(n), i, color2;
      for (i = 0;i < n; ++i) {
        color2 = (0, _index.rgb)(colors3[i]);
        r[i] = color2.r || 0;
        g2[i] = color2.g || 0;
        b[i] = color2.b || 0;
      }
      r = spline(r);
      g2 = spline(g2);
      b = spline(b);
      color2.opacity = 1;
      return function(t) {
        color2.r = r(t);
        color2.g = g2(t);
        color2.b = b(t);
        return color2 + "";
      };
    };
  }
  var rgbBasis2 = rgbSpline2(_basis.default);
  exports.rgbBasis = rgbBasis2;
  var rgbBasisClosed2 = rgbSpline2(_basisClosed.default);
  exports.rgbBasisClosed = rgbBasisClosed2;
});

// node_modules/@visx/vendor/vendor-cjs/d3-interpolate/src/numberArray.js
var require_numberArray = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  exports.isNumberArray = isNumberArray2;
  function _default(a, b) {
    if (!b)
      b = [];
    var n = a ? Math.min(b.length, a.length) : 0, c = b.slice(), i;
    return function(t) {
      for (i = 0;i < n; ++i)
        c[i] = a[i] * (1 - t) + b[i] * t;
      return c;
    };
  }
  function isNumberArray2(x) {
    return ArrayBuffer.isView(x) && !(x instanceof DataView);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-interpolate/src/array.js
var require_array2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  exports.genericArray = genericArray2;
  var _value = _interopRequireDefault(require_value());
  var _numberArray = _interopRequireWildcard(require_numberArray());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _default(a, b) {
    return ((0, _numberArray.isNumberArray)(b) ? _numberArray.default : genericArray2)(a, b);
  }
  function genericArray2(a, b) {
    var nb = b ? b.length : 0, na = a ? Math.min(nb, a.length) : 0, x = new Array(na), c = new Array(nb), i;
    for (i = 0;i < na; ++i)
      x[i] = (0, _value.default)(a[i], b[i]);
    for (;i < nb; ++i)
      c[i] = b[i];
    return function(t) {
      for (i = 0;i < na; ++i)
        c[i] = x[i](t);
      return c;
    };
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-interpolate/src/date.js
var require_date = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  function _default(a, b) {
    var d = new Date;
    return a = +a, b = +b, function(t) {
      return d.setTime(a * (1 - t) + b * t), d;
    };
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-interpolate/src/number.js
var require_number2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  function _default(a, b) {
    return a = +a, b = +b, function(t) {
      return a * (1 - t) + b * t;
    };
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-interpolate/src/object.js
var require_object = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  var _value = _interopRequireDefault(require_value());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _default(a, b) {
    var i = {}, c = {}, k2;
    if (a === null || typeof a !== "object")
      a = {};
    if (b === null || typeof b !== "object")
      b = {};
    for (k2 in b) {
      if (k2 in a) {
        i[k2] = (0, _value.default)(a[k2], b[k2]);
      } else {
        c[k2] = b[k2];
      }
    }
    return function(t) {
      for (k2 in i)
        c[k2] = i[k2](t);
      return c;
    };
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-interpolate/src/string.js
var require_string = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  var _number = _interopRequireDefault(require_number2());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var reA2 = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
  var reB2 = new RegExp(reA2.source, "g");
  function zero3(b) {
    return function() {
      return b;
    };
  }
  function one2(b) {
    return function(t) {
      return b(t) + "";
    };
  }
  function _default(a, b) {
    var bi = reA2.lastIndex = reB2.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
    a = a + "", b = b + "";
    while ((am = reA2.exec(a)) && (bm = reB2.exec(b))) {
      if ((bs = bm.index) > bi) {
        bs = b.slice(bi, bs);
        if (s[i])
          s[i] += bs;
        else
          s[++i] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s[i])
          s[i] += bm;
        else
          s[++i] = bm;
      } else {
        s[++i] = null;
        q.push({
          i,
          x: (0, _number.default)(am, bm)
        });
      }
      bi = reB2.lastIndex;
    }
    if (bi < b.length) {
      bs = b.slice(bi);
      if (s[i])
        s[i] += bs;
      else
        s[++i] = bs;
    }
    return s.length < 2 ? q[0] ? one2(q[0].x) : zero3(b) : (b = q.length, function(t) {
      for (var i2 = 0, o;i2 < b; ++i2)
        s[(o = q[i2]).i] = o.x(t);
      return s.join("");
    });
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-interpolate/src/value.js
var require_value = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  var _index = require_src3();
  var _rgb = _interopRequireDefault(require_rgb());
  var _array = require_array2();
  var _date = _interopRequireDefault(require_date());
  var _number = _interopRequireDefault(require_number2());
  var _object = _interopRequireDefault(require_object());
  var _string = _interopRequireDefault(require_string());
  var _constant = _interopRequireDefault(require_constant2());
  var _numberArray = _interopRequireWildcard(require_numberArray());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _default(a, b) {
    var t = typeof b, c;
    return b == null || t === "boolean" ? (0, _constant.default)(b) : (t === "number" ? _number.default : t === "string" ? (c = (0, _index.color)(b)) ? (b = c, _rgb.default) : _string.default : b instanceof _index.color ? _rgb.default : b instanceof Date ? _date.default : (0, _numberArray.isNumberArray)(b) ? _numberArray.default : Array.isArray(b) ? _array.genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? _object.default : _number.default)(a, b);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-interpolate/src/discrete.js
var require_discrete = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  function _default(range2) {
    var n = range2.length;
    return function(t) {
      return range2[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
    };
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-interpolate/src/hue.js
var require_hue = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  var _color = require_color2();
  function _default(a, b) {
    var i = (0, _color.hue)(+a, +b);
    return function(t) {
      var x = i(t);
      return x - 360 * Math.floor(x / 360);
    };
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-interpolate/src/round.js
var require_round = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  function _default(a, b) {
    return a = +a, b = +b, function(t) {
      return Math.round(a * (1 - t) + b * t);
    };
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-interpolate/src/transform/decompose.js
var require_decompose = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  exports.identity = undefined;
  var degrees2 = 180 / Math.PI;
  var identity2 = {
    translateX: 0,
    translateY: 0,
    rotate: 0,
    skewX: 0,
    scaleX: 1,
    scaleY: 1
  };
  exports.identity = identity2;
  function _default(a, b, c, d, e, f) {
    var scaleX, scaleY, skewX;
    if (scaleX = Math.sqrt(a * a + b * b))
      a /= scaleX, b /= scaleX;
    if (skewX = a * c + b * d)
      c -= a * skewX, d -= b * skewX;
    if (scaleY = Math.sqrt(c * c + d * d))
      c /= scaleY, d /= scaleY, skewX /= scaleY;
    if (a * d < b * c)
      a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
    return {
      translateX: e,
      translateY: f,
      rotate: Math.atan2(b, a) * degrees2,
      skewX: Math.atan(skewX) * degrees2,
      scaleX,
      scaleY
    };
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-interpolate/src/transform/parse.js
var require_parse = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.parseCss = parseCss;
  exports.parseSvg = parseSvg;
  var _decompose = _interopRequireWildcard(require_decompose());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  var svgNode;
  function parseCss(value) {
    const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
    return m.isIdentity ? _decompose.identity : (0, _decompose.default)(m.a, m.b, m.c, m.d, m.e, m.f);
  }
  function parseSvg(value) {
    if (value == null)
      return _decompose.identity;
    if (!svgNode)
      svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
    svgNode.setAttribute("transform", value);
    if (!(value = svgNode.transform.baseVal.consolidate()))
      return _decompose.identity;
    value = value.matrix;
    return (0, _decompose.default)(value.a, value.b, value.c, value.d, value.e, value.f);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-interpolate/src/transform/index.js
var require_transform = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.interpolateTransformSvg = exports.interpolateTransformCss = undefined;
  var _number = _interopRequireDefault(require_number2());
  var _parse = require_parse();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function interpolateTransform(parse, pxComma, pxParen, degParen) {
    function pop(s) {
      return s.length ? s.pop() + " " : "";
    }
    function translate(xa, ya, xb, yb, s, q) {
      if (xa !== xb || ya !== yb) {
        var i = s.push("translate(", null, pxComma, null, pxParen);
        q.push({
          i: i - 4,
          x: (0, _number.default)(xa, xb)
        }, {
          i: i - 2,
          x: (0, _number.default)(ya, yb)
        });
      } else if (xb || yb) {
        s.push("translate(" + xb + pxComma + yb + pxParen);
      }
    }
    function rotate(a, b, s, q) {
      if (a !== b) {
        if (a - b > 180)
          b += 360;
        else if (b - a > 180)
          a += 360;
        q.push({
          i: s.push(pop(s) + "rotate(", null, degParen) - 2,
          x: (0, _number.default)(a, b)
        });
      } else if (b) {
        s.push(pop(s) + "rotate(" + b + degParen);
      }
    }
    function skewX(a, b, s, q) {
      if (a !== b) {
        q.push({
          i: s.push(pop(s) + "skewX(", null, degParen) - 2,
          x: (0, _number.default)(a, b)
        });
      } else if (b) {
        s.push(pop(s) + "skewX(" + b + degParen);
      }
    }
    function scale(xa, ya, xb, yb, s, q) {
      if (xa !== xb || ya !== yb) {
        var i = s.push(pop(s) + "scale(", null, ",", null, ")");
        q.push({
          i: i - 4,
          x: (0, _number.default)(xa, xb)
        }, {
          i: i - 2,
          x: (0, _number.default)(ya, yb)
        });
      } else if (xb !== 1 || yb !== 1) {
        s.push(pop(s) + "scale(" + xb + "," + yb + ")");
      }
    }
    return function(a, b) {
      var s = [], q = [];
      a = parse(a), b = parse(b);
      translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
      rotate(a.rotate, b.rotate, s, q);
      skewX(a.skewX, b.skewX, s, q);
      scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
      a = b = null;
      return function(t) {
        var i = -1, n = q.length, o;
        while (++i < n)
          s[(o = q[i]).i] = o.x(t);
        return s.join("");
      };
    };
  }
  var interpolateTransformCss = interpolateTransform(_parse.parseCss, "px, ", "px)", "deg)");
  exports.interpolateTransformCss = interpolateTransformCss;
  var interpolateTransformSvg = interpolateTransform(_parse.parseSvg, ", ", ")", ")");
  exports.interpolateTransformSvg = interpolateTransformSvg;
});

// node_modules/@visx/vendor/vendor-cjs/d3-interpolate/src/zoom.js
var require_zoom = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var epsilon2 = 0.000000000001;
  function cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
  }
  function sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
  }
  function tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
  }
  var _default = function zoomRho(rho, rho2, rho4) {
    function zoom(p0, p1) {
      var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
      if (d2 < epsilon2) {
        S = Math.log(w1 / w0) / rho;
        i = function(t) {
          return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(rho * t * S)];
        };
      } else {
        var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
        S = (r1 - r0) / rho;
        i = function(t) {
          var s = t * S, coshr0 = cosh(r0), u2 = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
          return [ux0 + u2 * dx, uy0 + u2 * dy, w0 * coshr0 / cosh(rho * s + r0)];
        };
      }
      i.duration = S * 1000 * rho / Math.SQRT2;
      return i;
    }
    zoom.rho = function(_) {
      var _1 = Math.max(0.001, +_), _2 = _1 * _1, _4 = _2 * _2;
      return zoomRho(_1, _2, _4);
    };
    return zoom;
  }(Math.SQRT2, 2, 4);
  exports.default = _default;
});

// node_modules/@visx/vendor/vendor-cjs/d3-interpolate/src/hsl.js
var require_hsl = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.hslLong = exports.default = undefined;
  var _index = require_src3();
  var _color = _interopRequireWildcard(require_color2());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function hsl4(hue2) {
    return function(start2, end) {
      var h = hue2((start2 = (0, _index.hsl)(start2)).h, (end = (0, _index.hsl)(end)).h), s = (0, _color.default)(start2.s, end.s), l = (0, _color.default)(start2.l, end.l), opacity = (0, _color.default)(start2.opacity, end.opacity);
      return function(t) {
        start2.h = h(t);
        start2.s = s(t);
        start2.l = l(t);
        start2.opacity = opacity(t);
        return start2 + "";
      };
    };
  }
  var _default = hsl4(_color.hue);
  exports.default = _default;
  var hslLong2 = hsl4(_color.default);
  exports.hslLong = hslLong2;
});

// node_modules/@visx/vendor/vendor-cjs/d3-interpolate/src/lab.js
var require_lab2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = lab3;
  var _index = require_src3();
  var _color = _interopRequireDefault(require_color2());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function lab3(start2, end) {
    var l = (0, _color.default)((start2 = (0, _index.lab)(start2)).l, (end = (0, _index.lab)(end)).l), a = (0, _color.default)(start2.a, end.a), b = (0, _color.default)(start2.b, end.b), opacity = (0, _color.default)(start2.opacity, end.opacity);
    return function(t) {
      start2.l = l(t);
      start2.a = a(t);
      start2.b = b(t);
      start2.opacity = opacity(t);
      return start2 + "";
    };
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-interpolate/src/hcl.js
var require_hcl = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.hclLong = exports.default = undefined;
  var _index = require_src3();
  var _color = _interopRequireWildcard(require_color2());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function hcl3(hue2) {
    return function(start2, end) {
      var h = hue2((start2 = (0, _index.hcl)(start2)).h, (end = (0, _index.hcl)(end)).h), c = (0, _color.default)(start2.c, end.c), l = (0, _color.default)(start2.l, end.l), opacity = (0, _color.default)(start2.opacity, end.opacity);
      return function(t) {
        start2.h = h(t);
        start2.c = c(t);
        start2.l = l(t);
        start2.opacity = opacity(t);
        return start2 + "";
      };
    };
  }
  var _default = hcl3(_color.hue);
  exports.default = _default;
  var hclLong2 = hcl3(_color.default);
  exports.hclLong = hclLong2;
});

// node_modules/@visx/vendor/vendor-cjs/d3-interpolate/src/cubehelix.js
var require_cubehelix2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.cubehelixLong = undefined;
  var _index = require_src3();
  var _color = _interopRequireWildcard(require_color2());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function cubehelix3(hue2) {
    return function cubehelixGamma(y) {
      y = +y;
      function cubehelix4(start2, end) {
        var h = hue2((start2 = (0, _index.cubehelix)(start2)).h, (end = (0, _index.cubehelix)(end)).h), s = (0, _color.default)(start2.s, end.s), l = (0, _color.default)(start2.l, end.l), opacity = (0, _color.default)(start2.opacity, end.opacity);
        return function(t) {
          start2.h = h(t);
          start2.s = s(t);
          start2.l = l(Math.pow(t, y));
          start2.opacity = opacity(t);
          return start2 + "";
        };
      }
      cubehelix4.gamma = cubehelixGamma;
      return cubehelix4;
    }(1);
  }
  var _default = cubehelix3(_color.hue);
  exports.default = _default;
  var cubehelixLong2 = cubehelix3(_color.default);
  exports.cubehelixLong = cubehelixLong2;
});

// node_modules/@visx/vendor/vendor-cjs/d3-interpolate/src/piecewise.js
var require_piecewise = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = piecewise;
  var _value = _interopRequireDefault(require_value());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function piecewise(interpolate2, values) {
    if (values === undefined)
      values = interpolate2, interpolate2 = _value.default;
    var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);
    while (i < n)
      I[i] = interpolate2(v, v = values[++i]);
    return function(t) {
      var i2 = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
      return I[i2](t - i2);
    };
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-interpolate/src/quantize.js
var require_quantize = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  function _default(interpolator, n) {
    var samples = new Array(n);
    for (var i = 0;i < n; ++i)
      samples[i] = interpolator(i / (n - 1));
    return samples;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-interpolate/src/index.js
var require_src4 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "interpolate", {
    enumerable: true,
    get: function() {
      return _value.default;
    }
  });
  Object.defineProperty(exports, "interpolateArray", {
    enumerable: true,
    get: function() {
      return _array.default;
    }
  });
  Object.defineProperty(exports, "interpolateBasis", {
    enumerable: true,
    get: function() {
      return _basis.default;
    }
  });
  Object.defineProperty(exports, "interpolateBasisClosed", {
    enumerable: true,
    get: function() {
      return _basisClosed.default;
    }
  });
  Object.defineProperty(exports, "interpolateCubehelix", {
    enumerable: true,
    get: function() {
      return _cubehelix.default;
    }
  });
  Object.defineProperty(exports, "interpolateCubehelixLong", {
    enumerable: true,
    get: function() {
      return _cubehelix.cubehelixLong;
    }
  });
  Object.defineProperty(exports, "interpolateDate", {
    enumerable: true,
    get: function() {
      return _date.default;
    }
  });
  Object.defineProperty(exports, "interpolateDiscrete", {
    enumerable: true,
    get: function() {
      return _discrete.default;
    }
  });
  Object.defineProperty(exports, "interpolateHcl", {
    enumerable: true,
    get: function() {
      return _hcl.default;
    }
  });
  Object.defineProperty(exports, "interpolateHclLong", {
    enumerable: true,
    get: function() {
      return _hcl.hclLong;
    }
  });
  Object.defineProperty(exports, "interpolateHsl", {
    enumerable: true,
    get: function() {
      return _hsl.default;
    }
  });
  Object.defineProperty(exports, "interpolateHslLong", {
    enumerable: true,
    get: function() {
      return _hsl.hslLong;
    }
  });
  Object.defineProperty(exports, "interpolateHue", {
    enumerable: true,
    get: function() {
      return _hue.default;
    }
  });
  Object.defineProperty(exports, "interpolateLab", {
    enumerable: true,
    get: function() {
      return _lab.default;
    }
  });
  Object.defineProperty(exports, "interpolateNumber", {
    enumerable: true,
    get: function() {
      return _number.default;
    }
  });
  Object.defineProperty(exports, "interpolateNumberArray", {
    enumerable: true,
    get: function() {
      return _numberArray.default;
    }
  });
  Object.defineProperty(exports, "interpolateObject", {
    enumerable: true,
    get: function() {
      return _object.default;
    }
  });
  Object.defineProperty(exports, "interpolateRgb", {
    enumerable: true,
    get: function() {
      return _rgb.default;
    }
  });
  Object.defineProperty(exports, "interpolateRgbBasis", {
    enumerable: true,
    get: function() {
      return _rgb.rgbBasis;
    }
  });
  Object.defineProperty(exports, "interpolateRgbBasisClosed", {
    enumerable: true,
    get: function() {
      return _rgb.rgbBasisClosed;
    }
  });
  Object.defineProperty(exports, "interpolateRound", {
    enumerable: true,
    get: function() {
      return _round.default;
    }
  });
  Object.defineProperty(exports, "interpolateString", {
    enumerable: true,
    get: function() {
      return _string.default;
    }
  });
  Object.defineProperty(exports, "interpolateTransformCss", {
    enumerable: true,
    get: function() {
      return _index.interpolateTransformCss;
    }
  });
  Object.defineProperty(exports, "interpolateTransformSvg", {
    enumerable: true,
    get: function() {
      return _index.interpolateTransformSvg;
    }
  });
  Object.defineProperty(exports, "interpolateZoom", {
    enumerable: true,
    get: function() {
      return _zoom.default;
    }
  });
  Object.defineProperty(exports, "piecewise", {
    enumerable: true,
    get: function() {
      return _piecewise.default;
    }
  });
  Object.defineProperty(exports, "quantize", {
    enumerable: true,
    get: function() {
      return _quantize.default;
    }
  });
  var _value = _interopRequireDefault(require_value());
  var _array = _interopRequireDefault(require_array2());
  var _basis = _interopRequireDefault(require_basis());
  var _basisClosed = _interopRequireDefault(require_basisClosed());
  var _date = _interopRequireDefault(require_date());
  var _discrete = _interopRequireDefault(require_discrete());
  var _hue = _interopRequireDefault(require_hue());
  var _number = _interopRequireDefault(require_number2());
  var _numberArray = _interopRequireDefault(require_numberArray());
  var _object = _interopRequireDefault(require_object());
  var _round = _interopRequireDefault(require_round());
  var _string = _interopRequireDefault(require_string());
  var _index = require_transform();
  var _zoom = _interopRequireDefault(require_zoom());
  var _rgb = _interopRequireWildcard(require_rgb());
  var _hsl = _interopRequireWildcard(require_hsl());
  var _lab = _interopRequireDefault(require_lab2());
  var _hcl = _interopRequireWildcard(require_hcl());
  var _cubehelix = _interopRequireWildcard(require_cubehelix2());
  var _piecewise = _interopRequireDefault(require_piecewise());
  var _quantize = _interopRequireDefault(require_quantize());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-scale/src/constant.js
var require_constant3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = constants2;
  function constants2(x) {
    return function() {
      return x;
    };
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-scale/src/number.js
var require_number3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = number4;
  function number4(x) {
    return +x;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-scale/src/continuous.js
var require_continuous = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.copy = copy2;
  exports.default = continuous2;
  exports.identity = identity2;
  exports.transformer = transformer2;
  var _index = require_src2();
  var _index2 = require_src4();
  var _constant = _interopRequireDefault(require_constant3());
  var _number = _interopRequireDefault(require_number3());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var unit2 = [0, 1];
  function identity2(x) {
    return x;
  }
  function normalize2(a, b) {
    return (b -= a = +a) ? function(x) {
      return (x - a) / b;
    } : (0, _constant.default)(isNaN(b) ? NaN : 0.5);
  }
  function clamper2(a, b) {
    var t;
    if (a > b)
      t = a, a = b, b = t;
    return function(x) {
      return Math.max(a, Math.min(b, x));
    };
  }
  function bimap2(domain, range2, interpolate2) {
    var d0 = domain[0], d1 = domain[1], r0 = range2[0], r1 = range2[1];
    if (d1 < d0)
      d0 = normalize2(d1, d0), r0 = interpolate2(r1, r0);
    else
      d0 = normalize2(d0, d1), r0 = interpolate2(r0, r1);
    return function(x) {
      return r0(d0(x));
    };
  }
  function polymap2(domain, range2, interpolate2) {
    var j2 = Math.min(domain.length, range2.length) - 1, d = new Array(j2), r = new Array(j2), i = -1;
    if (domain[j2] < domain[0]) {
      domain = domain.slice().reverse();
      range2 = range2.slice().reverse();
    }
    while (++i < j2) {
      d[i] = normalize2(domain[i], domain[i + 1]);
      r[i] = interpolate2(range2[i], range2[i + 1]);
    }
    return function(x) {
      var i2 = (0, _index.bisect)(domain, x, 1, j2) - 1;
      return r[i2](d[i2](x));
    };
  }
  function copy2(source, target) {
    return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
  }
  function transformer2() {
    var domain = unit2, range2 = unit2, interpolate2 = _index2.interpolate, transform, untransform, unknown, clamp2 = identity2, piecewise, output, input;
    function rescale() {
      var n = Math.min(domain.length, range2.length);
      if (clamp2 !== identity2)
        clamp2 = clamper2(domain[0], domain[n - 1]);
      piecewise = n > 2 ? polymap2 : bimap2;
      output = input = null;
      return scale;
    }
    function scale(x) {
      return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range2, interpolate2)))(transform(clamp2(x)));
    }
    scale.invert = function(y) {
      return clamp2(untransform((input || (input = piecewise(range2, domain.map(transform), _index2.interpolateNumber)))(y)));
    };
    scale.domain = function(_) {
      return arguments.length ? (domain = Array.from(_, _number.default), rescale()) : domain.slice();
    };
    scale.range = function(_) {
      return arguments.length ? (range2 = Array.from(_), rescale()) : range2.slice();
    };
    scale.rangeRound = function(_) {
      return range2 = Array.from(_), interpolate2 = _index2.interpolateRound, rescale();
    };
    scale.clamp = function(_) {
      return arguments.length ? (clamp2 = _ ? true : identity2, rescale()) : clamp2 !== identity2;
    };
    scale.interpolate = function(_) {
      return arguments.length ? (interpolate2 = _, rescale()) : interpolate2;
    };
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function(t, u2) {
      transform = t, untransform = u2;
      return rescale();
    };
  }
  function continuous2() {
    return transformer2()(identity2, identity2);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-format/src/formatDecimal.js
var require_formatDecimal = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  exports.formatDecimalParts = formatDecimalParts2;
  function _default(x) {
    return Math.abs(x = Math.round(x)) >= 1000000000000000000000 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
  }
  function formatDecimalParts2(x, p2) {
    if ((i = (x = p2 ? x.toExponential(p2 - 1) : x.toExponential()).indexOf("e")) < 0)
      return null;
    var i, coefficient = x.slice(0, i);
    return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-format/src/exponent.js
var require_exponent = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  var _formatDecimal = require_formatDecimal();
  function _default(x) {
    return x = (0, _formatDecimal.formatDecimalParts)(Math.abs(x)), x ? x[1] : NaN;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-format/src/formatGroup.js
var require_formatGroup = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  function _default(grouping, thousands) {
    return function(value, width) {
      var i = value.length, t = [], j2 = 0, g2 = grouping[0], length = 0;
      while (i > 0 && g2 > 0) {
        if (length + g2 + 1 > width)
          g2 = Math.max(1, width - length);
        t.push(value.substring(i -= g2, i + g2));
        if ((length += g2 + 1) > width)
          break;
        g2 = grouping[j2 = (j2 + 1) % grouping.length];
      }
      return t.reverse().join(thousands);
    };
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-format/src/formatNumerals.js
var require_formatNumerals = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  function _default(numerals) {
    return function(value) {
      return value.replace(/[0-9]/g, function(i) {
        return numerals[+i];
      });
    };
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-format/src/formatSpecifier.js
var require_formatSpecifier = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FormatSpecifier = FormatSpecifier2;
  exports.default = formatSpecifier2;
  var re2 = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
  function formatSpecifier2(specifier) {
    if (!(match = re2.exec(specifier)))
      throw new Error("invalid format: " + specifier);
    var match;
    return new FormatSpecifier2({
      fill: match[1],
      align: match[2],
      sign: match[3],
      symbol: match[4],
      zero: match[5],
      width: match[6],
      comma: match[7],
      precision: match[8] && match[8].slice(1),
      trim: match[9],
      type: match[10]
    });
  }
  formatSpecifier2.prototype = FormatSpecifier2.prototype;
  function FormatSpecifier2(specifier) {
    this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
    this.align = specifier.align === undefined ? ">" : specifier.align + "";
    this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
    this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
    this.zero = !!specifier.zero;
    this.width = specifier.width === undefined ? undefined : +specifier.width;
    this.comma = !!specifier.comma;
    this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
    this.trim = !!specifier.trim;
    this.type = specifier.type === undefined ? "" : specifier.type + "";
  }
  FormatSpecifier2.prototype.toString = function() {
    return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === undefined ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
  };
});

// node_modules/@visx/vendor/vendor-cjs/d3-format/src/formatTrim.js
var require_formatTrim = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  function _default(s) {
    out:
      for (var n = s.length, i = 1, i0 = -1, i1;i < n; ++i) {
        switch (s[i]) {
          case ".":
            i0 = i1 = i;
            break;
          case "0":
            if (i0 === 0)
              i0 = i;
            i1 = i;
            break;
          default:
            if (!+s[i])
              break out;
            if (i0 > 0)
              i0 = 0;
            break;
        }
      }
    return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-format/src/formatPrefixAuto.js
var require_formatPrefixAuto = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  exports.prefixExponent = undefined;
  var _formatDecimal = require_formatDecimal();
  var prefixExponent2;
  exports.prefixExponent = prefixExponent2;
  function _default(x, p2) {
    var d = (0, _formatDecimal.formatDecimalParts)(x, p2);
    if (!d)
      return x + "";
    var coefficient = d[0], exponent = d[1], i = exponent - (exports.prefixExponent = prefixExponent2 = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
    return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + (0, _formatDecimal.formatDecimalParts)(x, Math.max(0, p2 + i - 1))[0];
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-format/src/formatRounded.js
var require_formatRounded = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  var _formatDecimal = require_formatDecimal();
  function _default(x, p2) {
    var d = (0, _formatDecimal.formatDecimalParts)(x, p2);
    if (!d)
      return x + "";
    var coefficient = d[0], exponent = d[1];
    return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-format/src/formatTypes.js
var require_formatTypes = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _formatDecimal = _interopRequireDefault(require_formatDecimal());
  var _formatPrefixAuto = _interopRequireDefault(require_formatPrefixAuto());
  var _formatRounded = _interopRequireDefault(require_formatRounded());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var _default = {
    "%": (x, p2) => (x * 100).toFixed(p2),
    b: (x) => Math.round(x).toString(2),
    c: (x) => x + "",
    d: _formatDecimal.default,
    e: (x, p2) => x.toExponential(p2),
    f: (x, p2) => x.toFixed(p2),
    g: (x, p2) => x.toPrecision(p2),
    o: (x) => Math.round(x).toString(8),
    p: (x, p2) => (0, _formatRounded.default)(x * 100, p2),
    r: _formatRounded.default,
    s: _formatPrefixAuto.default,
    X: (x) => Math.round(x).toString(16).toUpperCase(),
    x: (x) => Math.round(x).toString(16)
  };
  exports.default = _default;
});

// node_modules/@visx/vendor/vendor-cjs/d3-format/src/identity.js
var require_identity2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  function _default(x) {
    return x;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-format/src/locale.js
var require_locale = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  var _exponent = _interopRequireDefault(require_exponent());
  var _formatGroup = _interopRequireDefault(require_formatGroup());
  var _formatNumerals = _interopRequireDefault(require_formatNumerals());
  var _formatSpecifier = _interopRequireDefault(require_formatSpecifier());
  var _formatTrim = _interopRequireDefault(require_formatTrim());
  var _formatTypes = _interopRequireDefault(require_formatTypes());
  var _formatPrefixAuto = require_formatPrefixAuto();
  var _identity = _interopRequireDefault(require_identity2());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var map2 = Array.prototype.map;
  var prefixes3 = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
  function _default(locale3) {
    var group = locale3.grouping === undefined || locale3.thousands === undefined ? _identity.default : (0, _formatGroup.default)(map2.call(locale3.grouping, Number), locale3.thousands + ""), currencyPrefix = locale3.currency === undefined ? "" : locale3.currency[0] + "", currencySuffix = locale3.currency === undefined ? "" : locale3.currency[1] + "", decimal = locale3.decimal === undefined ? "." : locale3.decimal + "", numerals = locale3.numerals === undefined ? _identity.default : (0, _formatNumerals.default)(map2.call(locale3.numerals, String)), percent = locale3.percent === undefined ? "%" : locale3.percent + "", minus = locale3.minus === undefined ? "−" : locale3.minus + "", nan = locale3.nan === undefined ? "NaN" : locale3.nan + "";
    function newFormat(specifier) {
      specifier = (0, _formatSpecifier.default)(specifier);
      var { fill, align, sign, symbol, zero: zero3, width, comma, precision, trim, type } = specifier;
      if (type === "n")
        comma = true, type = "g";
      else if (!_formatTypes.default[type])
        precision === undefined && (precision = 12), trim = true, type = "g";
      if (zero3 || fill === "0" && align === "=")
        zero3 = true, fill = "0", align = "=";
      var prefix2 = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
      var formatType = _formatTypes.default[type], maybeSuffix = /[defgprs%]/.test(type);
      precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
      function format2(value) {
        var valuePrefix = prefix2, valueSuffix = suffix, i, n, c;
        if (type === "c") {
          valueSuffix = formatType(value) + valueSuffix;
          value = "";
        } else {
          value = +value;
          var valueNegative = value < 0 || 1 / value < 0;
          value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
          if (trim)
            value = (0, _formatTrim.default)(value);
          if (valueNegative && +value === 0 && sign !== "+")
            valueNegative = false;
          valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
          valueSuffix = (type === "s" ? prefixes3[8 + _formatPrefixAuto.prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");
          if (maybeSuffix) {
            i = -1, n = value.length;
            while (++i < n) {
              if (c = value.charCodeAt(i), 48 > c || c > 57) {
                valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                value = value.slice(0, i);
                break;
              }
            }
          }
        }
        if (comma && !zero3)
          value = group(value, Infinity);
        var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
        if (comma && zero3)
          value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
        switch (align) {
          case "<":
            value = valuePrefix + value + valueSuffix + padding;
            break;
          case "=":
            value = valuePrefix + padding + value + valueSuffix;
            break;
          case "^":
            value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
            break;
          default:
            value = padding + valuePrefix + value + valueSuffix;
            break;
        }
        return numerals(value);
      }
      format2.toString = function() {
        return specifier + "";
      };
      return format2;
    }
    function formatPrefix2(specifier, value) {
      var f = newFormat((specifier = (0, _formatSpecifier.default)(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor((0, _exponent.default)(value) / 3))) * 3, k2 = Math.pow(10, -e), prefix2 = prefixes3[8 + e / 3];
      return function(value2) {
        return f(k2 * value2) + prefix2;
      };
    }
    return {
      format: newFormat,
      formatPrefix: formatPrefix2
    };
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-format/src/defaultLocale.js
var require_defaultLocale = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = defaultLocale3;
  exports.formatPrefix = exports.format = undefined;
  var _locale = _interopRequireDefault(require_locale());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var locale3;
  var format2;
  exports.format = format2;
  var formatPrefix2;
  exports.formatPrefix = formatPrefix2;
  defaultLocale3({
    thousands: ",",
    grouping: [3],
    currency: ["$", ""]
  });
  function defaultLocale3(definition) {
    locale3 = (0, _locale.default)(definition);
    exports.format = format2 = locale3.format;
    exports.formatPrefix = formatPrefix2 = locale3.formatPrefix;
    return locale3;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-format/src/precisionFixed.js
var require_precisionFixed = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  var _exponent = _interopRequireDefault(require_exponent());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _default(step) {
    return Math.max(0, -(0, _exponent.default)(Math.abs(step)));
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-format/src/precisionPrefix.js
var require_precisionPrefix = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  var _exponent = _interopRequireDefault(require_exponent());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _default(step, value) {
    return Math.max(0, Math.max(-8, Math.min(8, Math.floor((0, _exponent.default)(value) / 3))) * 3 - (0, _exponent.default)(Math.abs(step)));
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-format/src/precisionRound.js
var require_precisionRound = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  var _exponent = _interopRequireDefault(require_exponent());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _default(step, max) {
    step = Math.abs(step), max = Math.abs(max) - step;
    return Math.max(0, (0, _exponent.default)(max) - (0, _exponent.default)(step)) + 1;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-format/src/index.js
var require_src5 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "FormatSpecifier", {
    enumerable: true,
    get: function() {
      return _formatSpecifier.FormatSpecifier;
    }
  });
  Object.defineProperty(exports, "format", {
    enumerable: true,
    get: function() {
      return _defaultLocale.format;
    }
  });
  Object.defineProperty(exports, "formatDefaultLocale", {
    enumerable: true,
    get: function() {
      return _defaultLocale.default;
    }
  });
  Object.defineProperty(exports, "formatLocale", {
    enumerable: true,
    get: function() {
      return _locale.default;
    }
  });
  Object.defineProperty(exports, "formatPrefix", {
    enumerable: true,
    get: function() {
      return _defaultLocale.formatPrefix;
    }
  });
  Object.defineProperty(exports, "formatSpecifier", {
    enumerable: true,
    get: function() {
      return _formatSpecifier.default;
    }
  });
  Object.defineProperty(exports, "precisionFixed", {
    enumerable: true,
    get: function() {
      return _precisionFixed.default;
    }
  });
  Object.defineProperty(exports, "precisionPrefix", {
    enumerable: true,
    get: function() {
      return _precisionPrefix.default;
    }
  });
  Object.defineProperty(exports, "precisionRound", {
    enumerable: true,
    get: function() {
      return _precisionRound.default;
    }
  });
  var _defaultLocale = _interopRequireWildcard(require_defaultLocale());
  var _locale = _interopRequireDefault(require_locale());
  var _formatSpecifier = _interopRequireWildcard(require_formatSpecifier());
  var _precisionFixed = _interopRequireDefault(require_precisionFixed());
  var _precisionPrefix = _interopRequireDefault(require_precisionPrefix());
  var _precisionRound = _interopRequireDefault(require_precisionRound());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-scale/src/tickFormat.js
var require_tickFormat = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = tickFormat2;
  var _index = require_src2();
  var _index2 = require_src5();
  function tickFormat2(start2, stop2, count, specifier) {
    var step = (0, _index.tickStep)(start2, stop2, count), precision;
    specifier = (0, _index2.formatSpecifier)(specifier == null ? ",f" : specifier);
    switch (specifier.type) {
      case "s": {
        var value = Math.max(Math.abs(start2), Math.abs(stop2));
        if (specifier.precision == null && !isNaN(precision = (0, _index2.precisionPrefix)(step, value)))
          specifier.precision = precision;
        return (0, _index2.formatPrefix)(specifier, value);
      }
      case "":
      case "e":
      case "g":
      case "p":
      case "r": {
        if (specifier.precision == null && !isNaN(precision = (0, _index2.precisionRound)(step, Math.max(Math.abs(start2), Math.abs(stop2)))))
          specifier.precision = precision - (specifier.type === "e");
        break;
      }
      case "f":
      case "%": {
        if (specifier.precision == null && !isNaN(precision = (0, _index2.precisionFixed)(step)))
          specifier.precision = precision - (specifier.type === "%") * 2;
        break;
      }
    }
    return (0, _index2.format)(specifier);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-scale/src/linear.js
var require_linear = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = linear3;
  exports.linearish = linearish2;
  var _index = require_src2();
  var _continuous = _interopRequireWildcard(require_continuous());
  var _init = require_init();
  var _tickFormat = _interopRequireDefault(require_tickFormat());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function linearish2(scale) {
    var domain = scale.domain;
    scale.ticks = function(count) {
      var d = domain();
      return (0, _index.ticks)(d[0], d[d.length - 1], count == null ? 10 : count);
    };
    scale.tickFormat = function(count, specifier) {
      var d = domain();
      return (0, _tickFormat.default)(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
    };
    scale.nice = function(count) {
      if (count == null)
        count = 10;
      var d = domain();
      var i0 = 0;
      var i1 = d.length - 1;
      var start2 = d[i0];
      var stop2 = d[i1];
      var prestep;
      var step;
      var maxIter = 10;
      if (stop2 < start2) {
        step = start2, start2 = stop2, stop2 = step;
        step = i0, i0 = i1, i1 = step;
      }
      while (maxIter-- > 0) {
        step = (0, _index.tickIncrement)(start2, stop2, count);
        if (step === prestep) {
          d[i0] = start2;
          d[i1] = stop2;
          return domain(d);
        } else if (step > 0) {
          start2 = Math.floor(start2 / step) * step;
          stop2 = Math.ceil(stop2 / step) * step;
        } else if (step < 0) {
          start2 = Math.ceil(start2 * step) / step;
          stop2 = Math.floor(stop2 * step) / step;
        } else {
          break;
        }
        prestep = step;
      }
      return scale;
    };
    return scale;
  }
  function linear3() {
    var scale = (0, _continuous.default)();
    scale.copy = function() {
      return (0, _continuous.copy)(scale, linear3());
    };
    _init.initRange.apply(scale, arguments);
    return linearish2(scale);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-scale/src/identity.js
var require_identity3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = identity2;
  var _linear = require_linear();
  var _number = _interopRequireDefault(require_number3());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function identity2(domain) {
    var unknown;
    function scale(x) {
      return x == null || isNaN(x = +x) ? unknown : x;
    }
    scale.invert = scale;
    scale.domain = scale.range = function(_) {
      return arguments.length ? (domain = Array.from(_, _number.default), scale) : domain.slice();
    };
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
      return identity2(domain).unknown(unknown);
    };
    domain = arguments.length ? Array.from(domain, _number.default) : [0, 1];
    return (0, _linear.linearish)(scale);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-scale/src/nice.js
var require_nice2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = nice2;
  function nice2(domain, interval) {
    domain = domain.slice();
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t;
    if (x1 < x0) {
      t = i0, i0 = i1, i1 = t;
      t = x0, x0 = x1, x1 = t;
    }
    domain[i0] = interval.floor(x0);
    domain[i1] = interval.ceil(x1);
    return domain;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-scale/src/log.js
var require_log = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = log2;
  exports.loggish = loggish2;
  var _index = require_src2();
  var _index2 = require_src5();
  var _nice = _interopRequireDefault(require_nice2());
  var _continuous = require_continuous();
  var _init = require_init();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function transformLog2(x) {
    return Math.log(x);
  }
  function transformExp2(x) {
    return Math.exp(x);
  }
  function transformLogn2(x) {
    return -Math.log(-x);
  }
  function transformExpn2(x) {
    return -Math.exp(-x);
  }
  function pow102(x) {
    return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
  }
  function powp2(base) {
    return base === 10 ? pow102 : base === Math.E ? Math.exp : (x) => Math.pow(base, x);
  }
  function logp2(base) {
    return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), (x) => Math.log(x) / base);
  }
  function reflect2(f) {
    return (x, k2) => -f(-x, k2);
  }
  function loggish2(transform) {
    const scale = transform(transformLog2, transformExp2);
    const domain = scale.domain;
    let base = 10;
    let logs;
    let pows;
    function rescale() {
      logs = logp2(base), pows = powp2(base);
      if (domain()[0] < 0) {
        logs = reflect2(logs), pows = reflect2(pows);
        transform(transformLogn2, transformExpn2);
      } else {
        transform(transformLog2, transformExp2);
      }
      return scale;
    }
    scale.base = function(_) {
      return arguments.length ? (base = +_, rescale()) : base;
    };
    scale.domain = function(_) {
      return arguments.length ? (domain(_), rescale()) : domain();
    };
    scale.ticks = (count) => {
      const d = domain();
      let u2 = d[0];
      let v = d[d.length - 1];
      const r = v < u2;
      if (r)
        [u2, v] = [v, u2];
      let i = logs(u2);
      let j2 = logs(v);
      let k2;
      let t;
      const n = count == null ? 10 : +count;
      let z = [];
      if (!(base % 1) && j2 - i < n) {
        i = Math.floor(i), j2 = Math.ceil(j2);
        if (u2 > 0)
          for (;i <= j2; ++i) {
            for (k2 = 1;k2 < base; ++k2) {
              t = i < 0 ? k2 / pows(-i) : k2 * pows(i);
              if (t < u2)
                continue;
              if (t > v)
                break;
              z.push(t);
            }
          }
        else
          for (;i <= j2; ++i) {
            for (k2 = base - 1;k2 >= 1; --k2) {
              t = i > 0 ? k2 / pows(-i) : k2 * pows(i);
              if (t < u2)
                continue;
              if (t > v)
                break;
              z.push(t);
            }
          }
        if (z.length * 2 < n)
          z = (0, _index.ticks)(u2, v, n);
      } else {
        z = (0, _index.ticks)(i, j2, Math.min(j2 - i, n)).map(pows);
      }
      return r ? z.reverse() : z;
    };
    scale.tickFormat = (count, specifier) => {
      if (count == null)
        count = 10;
      if (specifier == null)
        specifier = base === 10 ? "s" : ",";
      if (typeof specifier !== "function") {
        if (!(base % 1) && (specifier = (0, _index2.formatSpecifier)(specifier)).precision == null)
          specifier.trim = true;
        specifier = (0, _index2.format)(specifier);
      }
      if (count === Infinity)
        return specifier;
      const k2 = Math.max(1, base * count / scale.ticks().length);
      return (d) => {
        let i = d / pows(Math.round(logs(d)));
        if (i * base < base - 0.5)
          i *= base;
        return i <= k2 ? specifier(d) : "";
      };
    };
    scale.nice = () => {
      return domain((0, _nice.default)(domain(), {
        floor: (x) => pows(Math.floor(logs(x))),
        ceil: (x) => pows(Math.ceil(logs(x)))
      }));
    };
    return scale;
  }
  function log2() {
    const scale = loggish2((0, _continuous.transformer)()).domain([1, 10]);
    scale.copy = () => (0, _continuous.copy)(scale, log2()).base(scale.base());
    _init.initRange.apply(scale, arguments);
    return scale;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-scale/src/symlog.js
var require_symlog = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = symlog2;
  exports.symlogish = symlogish2;
  var _linear = require_linear();
  var _continuous = require_continuous();
  var _init = require_init();
  function transformSymlog2(c) {
    return function(x) {
      return Math.sign(x) * Math.log1p(Math.abs(x / c));
    };
  }
  function transformSymexp2(c) {
    return function(x) {
      return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
    };
  }
  function symlogish2(transform) {
    var c = 1, scale = transform(transformSymlog2(c), transformSymexp2(c));
    scale.constant = function(_) {
      return arguments.length ? transform(transformSymlog2(c = +_), transformSymexp2(c)) : c;
    };
    return (0, _linear.linearish)(scale);
  }
  function symlog2() {
    var scale = symlogish2((0, _continuous.transformer)());
    scale.copy = function() {
      return (0, _continuous.copy)(scale, symlog2()).constant(scale.constant());
    };
    return _init.initRange.apply(scale, arguments);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-scale/src/pow.js
var require_pow = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = pow2;
  exports.powish = powish2;
  exports.sqrt = sqrt2;
  var _linear = require_linear();
  var _continuous = require_continuous();
  var _init = require_init();
  function transformPow2(exponent) {
    return function(x) {
      return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
    };
  }
  function transformSqrt2(x) {
    return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
  }
  function transformSquare2(x) {
    return x < 0 ? -x * x : x * x;
  }
  function powish2(transform) {
    var scale = transform(_continuous.identity, _continuous.identity), exponent = 1;
    function rescale() {
      return exponent === 1 ? transform(_continuous.identity, _continuous.identity) : exponent === 0.5 ? transform(transformSqrt2, transformSquare2) : transform(transformPow2(exponent), transformPow2(1 / exponent));
    }
    scale.exponent = function(_) {
      return arguments.length ? (exponent = +_, rescale()) : exponent;
    };
    return (0, _linear.linearish)(scale);
  }
  function pow2() {
    var scale = powish2((0, _continuous.transformer)());
    scale.copy = function() {
      return (0, _continuous.copy)(scale, pow2()).exponent(scale.exponent());
    };
    _init.initRange.apply(scale, arguments);
    return scale;
  }
  function sqrt2() {
    return pow2.apply(null, arguments).exponent(0.5);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-scale/src/radial.js
var require_radial = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = radial;
  var _continuous = _interopRequireDefault(require_continuous());
  var _init = require_init();
  var _linear = require_linear();
  var _number = _interopRequireDefault(require_number3());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function square(x) {
    return Math.sign(x) * x * x;
  }
  function unsquare(x) {
    return Math.sign(x) * Math.sqrt(Math.abs(x));
  }
  function radial() {
    var squared = (0, _continuous.default)(), range2 = [0, 1], round = false, unknown;
    function scale(x) {
      var y = unsquare(squared(x));
      return isNaN(y) ? unknown : round ? Math.round(y) : y;
    }
    scale.invert = function(y) {
      return squared.invert(square(y));
    };
    scale.domain = function(_) {
      return arguments.length ? (squared.domain(_), scale) : squared.domain();
    };
    scale.range = function(_) {
      return arguments.length ? (squared.range((range2 = Array.from(_, _number.default)).map(square)), scale) : range2.slice();
    };
    scale.rangeRound = function(_) {
      return scale.range(_).round(true);
    };
    scale.round = function(_) {
      return arguments.length ? (round = !!_, scale) : round;
    };
    scale.clamp = function(_) {
      return arguments.length ? (squared.clamp(_), scale) : squared.clamp();
    };
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
      return radial(squared.domain(), range2).round(round).clamp(squared.clamp()).unknown(unknown);
    };
    _init.initRange.apply(scale, arguments);
    return (0, _linear.linearish)(scale);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-scale/src/quantile.js
var require_quantile2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = quantile3;
  var _index = require_src2();
  var _init = require_init();
  function quantile3() {
    var domain = [], range2 = [], thresholds = [], unknown;
    function rescale() {
      var i = 0, n = Math.max(1, range2.length);
      thresholds = new Array(n - 1);
      while (++i < n)
        thresholds[i - 1] = (0, _index.quantileSorted)(domain, i / n);
      return scale;
    }
    function scale(x) {
      return x == null || isNaN(x = +x) ? unknown : range2[(0, _index.bisect)(thresholds, x)];
    }
    scale.invertExtent = function(y) {
      var i = range2.indexOf(y);
      return i < 0 ? [NaN, NaN] : [i > 0 ? thresholds[i - 1] : domain[0], i < thresholds.length ? thresholds[i] : domain[domain.length - 1]];
    };
    scale.domain = function(_) {
      if (!arguments.length)
        return domain.slice();
      domain = [];
      for (let d of _)
        if (d != null && !isNaN(d = +d))
          domain.push(d);
      domain.sort(_index.ascending);
      return rescale();
    };
    scale.range = function(_) {
      return arguments.length ? (range2 = Array.from(_), rescale()) : range2.slice();
    };
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.quantiles = function() {
      return thresholds.slice();
    };
    scale.copy = function() {
      return quantile3().domain(domain).range(range2).unknown(unknown);
    };
    return _init.initRange.apply(scale, arguments);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-scale/src/quantize.js
var require_quantize2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = quantize2;
  var _index = require_src2();
  var _linear = require_linear();
  var _init = require_init();
  function quantize2() {
    var x0 = 0, x1 = 1, n = 1, domain = [0.5], range2 = [0, 1], unknown;
    function scale(x) {
      return x != null && x <= x ? range2[(0, _index.bisect)(domain, x, 0, n)] : unknown;
    }
    function rescale() {
      var i = -1;
      domain = new Array(n);
      while (++i < n)
        domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
      return scale;
    }
    scale.domain = function(_) {
      return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];
    };
    scale.range = function(_) {
      return arguments.length ? (n = (range2 = Array.from(_)).length - 1, rescale()) : range2.slice();
    };
    scale.invertExtent = function(y) {
      var i = range2.indexOf(y);
      return i < 0 ? [NaN, NaN] : i < 1 ? [x0, domain[0]] : i >= n ? [domain[n - 1], x1] : [domain[i - 1], domain[i]];
    };
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : scale;
    };
    scale.thresholds = function() {
      return domain.slice();
    };
    scale.copy = function() {
      return quantize2().domain([x0, x1]).range(range2).unknown(unknown);
    };
    return _init.initRange.apply((0, _linear.linearish)(scale), arguments);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-scale/src/threshold.js
var require_threshold = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = threshold2;
  var _index = require_src2();
  var _init = require_init();
  function threshold2() {
    var domain = [0.5], range2 = [0, 1], unknown, n = 1;
    function scale(x) {
      return x != null && x <= x ? range2[(0, _index.bisect)(domain, x, 0, n)] : unknown;
    }
    scale.domain = function(_) {
      return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range2.length - 1), scale) : domain.slice();
    };
    scale.range = function(_) {
      return arguments.length ? (range2 = Array.from(_), n = Math.min(domain.length, range2.length - 1), scale) : range2.slice();
    };
    scale.invertExtent = function(y) {
      var i = range2.indexOf(y);
      return [domain[i - 1], domain[i]];
    };
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
      return threshold2().domain(domain).range(range2).unknown(unknown);
    };
    return _init.initRange.apply(scale, arguments);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-time/src/interval.js
var require_interval = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.timeInterval = timeInterval2;
  var t03 = new Date;
  var t13 = new Date;
  function timeInterval2(floori, offseti, count, field) {
    function interval(date2) {
      return floori(date2 = arguments.length === 0 ? new Date : new Date(+date2)), date2;
    }
    interval.floor = (date2) => {
      return floori(date2 = new Date(+date2)), date2;
    };
    interval.ceil = (date2) => {
      return floori(date2 = new Date(date2 - 1)), offseti(date2, 1), floori(date2), date2;
    };
    interval.round = (date2) => {
      const d0 = interval(date2), d1 = interval.ceil(date2);
      return date2 - d0 < d1 - date2 ? d0 : d1;
    };
    interval.offset = (date2, step) => {
      return offseti(date2 = new Date(+date2), step == null ? 1 : Math.floor(step)), date2;
    };
    interval.range = (start2, stop2, step) => {
      const range2 = [];
      start2 = interval.ceil(start2);
      step = step == null ? 1 : Math.floor(step);
      if (!(start2 < stop2) || !(step > 0))
        return range2;
      let previous;
      do
        range2.push(previous = new Date(+start2)), offseti(start2, step), floori(start2);
      while (previous < start2 && start2 < stop2);
      return range2;
    };
    interval.filter = (test) => {
      return timeInterval2((date2) => {
        if (date2 >= date2)
          while (floori(date2), !test(date2))
            date2.setTime(date2 - 1);
      }, (date2, step) => {
        if (date2 >= date2) {
          if (step < 0)
            while (++step <= 0) {
              while (offseti(date2, -1), !test(date2)) {
              }
            }
          else
            while (--step >= 0) {
              while (offseti(date2, 1), !test(date2)) {
              }
            }
        }
      });
    };
    if (count) {
      interval.count = (start2, end) => {
        t03.setTime(+start2), t13.setTime(+end);
        floori(t03), floori(t13);
        return Math.floor(count(t03, t13));
      };
      interval.every = (step) => {
        step = Math.floor(step);
        return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? (d) => field(d) % step === 0 : (d) => interval.count(0, d) % step === 0);
      };
    }
    return interval;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-time/src/millisecond.js
var require_millisecond = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.milliseconds = exports.millisecond = undefined;
  var _interval = require_interval();
  var millisecond2 = (0, _interval.timeInterval)(() => {
  }, (date2, step) => {
    date2.setTime(+date2 + step);
  }, (start2, end) => {
    return end - start2;
  });
  exports.millisecond = millisecond2;
  millisecond2.every = (k2) => {
    k2 = Math.floor(k2);
    if (!isFinite(k2) || !(k2 > 0))
      return null;
    if (!(k2 > 1))
      return millisecond2;
    return (0, _interval.timeInterval)((date2) => {
      date2.setTime(Math.floor(date2 / k2) * k2);
    }, (date2, step) => {
      date2.setTime(+date2 + step * k2);
    }, (start2, end) => {
      return (end - start2) / k2;
    });
  };
  var milliseconds2 = millisecond2.range;
  exports.milliseconds = milliseconds2;
});

// node_modules/@visx/vendor/vendor-cjs/d3-time/src/duration.js
var require_duration = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.durationYear = exports.durationWeek = exports.durationSecond = exports.durationMonth = exports.durationMinute = exports.durationHour = exports.durationDay = undefined;
  var durationSecond2 = 1000;
  exports.durationSecond = durationSecond2;
  var durationMinute2 = durationSecond2 * 60;
  exports.durationMinute = durationMinute2;
  var durationHour2 = durationMinute2 * 60;
  exports.durationHour = durationHour2;
  var durationDay2 = durationHour2 * 24;
  exports.durationDay = durationDay2;
  var durationWeek2 = durationDay2 * 7;
  exports.durationWeek = durationWeek2;
  var durationMonth2 = durationDay2 * 30;
  exports.durationMonth = durationMonth2;
  var durationYear2 = durationDay2 * 365;
  exports.durationYear = durationYear2;
});

// node_modules/@visx/vendor/vendor-cjs/d3-time/src/second.js
var require_second = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.seconds = exports.second = undefined;
  var _interval = require_interval();
  var _duration = require_duration();
  var second2 = (0, _interval.timeInterval)((date2) => {
    date2.setTime(date2 - date2.getMilliseconds());
  }, (date2, step) => {
    date2.setTime(+date2 + step * _duration.durationSecond);
  }, (start2, end) => {
    return (end - start2) / _duration.durationSecond;
  }, (date2) => {
    return date2.getUTCSeconds();
  });
  exports.second = second2;
  var seconds2 = second2.range;
  exports.seconds = seconds2;
});

// node_modules/@visx/vendor/vendor-cjs/d3-time/src/minute.js
var require_minute = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.utcMinutes = exports.utcMinute = exports.timeMinutes = exports.timeMinute = undefined;
  var _interval = require_interval();
  var _duration = require_duration();
  var timeMinute2 = (0, _interval.timeInterval)((date2) => {
    date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * _duration.durationSecond);
  }, (date2, step) => {
    date2.setTime(+date2 + step * _duration.durationMinute);
  }, (start2, end) => {
    return (end - start2) / _duration.durationMinute;
  }, (date2) => {
    return date2.getMinutes();
  });
  exports.timeMinute = timeMinute2;
  var timeMinutes2 = timeMinute2.range;
  exports.timeMinutes = timeMinutes2;
  var utcMinute2 = (0, _interval.timeInterval)((date2) => {
    date2.setUTCSeconds(0, 0);
  }, (date2, step) => {
    date2.setTime(+date2 + step * _duration.durationMinute);
  }, (start2, end) => {
    return (end - start2) / _duration.durationMinute;
  }, (date2) => {
    return date2.getUTCMinutes();
  });
  exports.utcMinute = utcMinute2;
  var utcMinutes2 = utcMinute2.range;
  exports.utcMinutes = utcMinutes2;
});

// node_modules/@visx/vendor/vendor-cjs/d3-time/src/hour.js
var require_hour = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.utcHours = exports.utcHour = exports.timeHours = exports.timeHour = undefined;
  var _interval = require_interval();
  var _duration = require_duration();
  var timeHour2 = (0, _interval.timeInterval)((date2) => {
    date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * _duration.durationSecond - date2.getMinutes() * _duration.durationMinute);
  }, (date2, step) => {
    date2.setTime(+date2 + step * _duration.durationHour);
  }, (start2, end) => {
    return (end - start2) / _duration.durationHour;
  }, (date2) => {
    return date2.getHours();
  });
  exports.timeHour = timeHour2;
  var timeHours2 = timeHour2.range;
  exports.timeHours = timeHours2;
  var utcHour2 = (0, _interval.timeInterval)((date2) => {
    date2.setUTCMinutes(0, 0, 0);
  }, (date2, step) => {
    date2.setTime(+date2 + step * _duration.durationHour);
  }, (start2, end) => {
    return (end - start2) / _duration.durationHour;
  }, (date2) => {
    return date2.getUTCHours();
  });
  exports.utcHour = utcHour2;
  var utcHours2 = utcHour2.range;
  exports.utcHours = utcHours2;
});

// node_modules/@visx/vendor/vendor-cjs/d3-time/src/day.js
var require_day = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.utcDays = exports.utcDay = exports.unixDays = exports.unixDay = exports.timeDays = exports.timeDay = undefined;
  var _interval = require_interval();
  var _duration = require_duration();
  var timeDay2 = (0, _interval.timeInterval)((date2) => date2.setHours(0, 0, 0, 0), (date2, step) => date2.setDate(date2.getDate() + step), (start2, end) => (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * _duration.durationMinute) / _duration.durationDay, (date2) => date2.getDate() - 1);
  exports.timeDay = timeDay2;
  var timeDays2 = timeDay2.range;
  exports.timeDays = timeDays2;
  var utcDay2 = (0, _interval.timeInterval)((date2) => {
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setUTCDate(date2.getUTCDate() + step);
  }, (start2, end) => {
    return (end - start2) / _duration.durationDay;
  }, (date2) => {
    return date2.getUTCDate() - 1;
  });
  exports.utcDay = utcDay2;
  var utcDays2 = utcDay2.range;
  exports.utcDays = utcDays2;
  var unixDay2 = (0, _interval.timeInterval)((date2) => {
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setUTCDate(date2.getUTCDate() + step);
  }, (start2, end) => {
    return (end - start2) / _duration.durationDay;
  }, (date2) => {
    return Math.floor(date2 / _duration.durationDay);
  });
  exports.unixDay = unixDay2;
  var unixDays2 = unixDay2.range;
  exports.unixDays = unixDays2;
});

// node_modules/@visx/vendor/vendor-cjs/d3-time/src/week.js
var require_week = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.utcWednesdays = exports.utcWednesday = exports.utcTuesdays = exports.utcTuesday = exports.utcThursdays = exports.utcThursday = exports.utcSundays = exports.utcSunday = exports.utcSaturdays = exports.utcSaturday = exports.utcMondays = exports.utcMonday = exports.utcFridays = exports.utcFriday = exports.timeWednesdays = exports.timeWednesday = exports.timeTuesdays = exports.timeTuesday = exports.timeThursdays = exports.timeThursday = exports.timeSundays = exports.timeSunday = exports.timeSaturdays = exports.timeSaturday = exports.timeMondays = exports.timeMonday = exports.timeFridays = exports.timeFriday = undefined;
  var _interval = require_interval();
  var _duration = require_duration();
  function timeWeekday2(i) {
    return (0, _interval.timeInterval)((date2) => {
      date2.setDate(date2.getDate() - (date2.getDay() + 7 - i) % 7);
      date2.setHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setDate(date2.getDate() + step * 7);
    }, (start2, end) => {
      return (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * _duration.durationMinute) / _duration.durationWeek;
    });
  }
  var timeSunday2 = timeWeekday2(0);
  exports.timeSunday = timeSunday2;
  var timeMonday2 = timeWeekday2(1);
  exports.timeMonday = timeMonday2;
  var timeTuesday2 = timeWeekday2(2);
  exports.timeTuesday = timeTuesday2;
  var timeWednesday2 = timeWeekday2(3);
  exports.timeWednesday = timeWednesday2;
  var timeThursday2 = timeWeekday2(4);
  exports.timeThursday = timeThursday2;
  var timeFriday2 = timeWeekday2(5);
  exports.timeFriday = timeFriday2;
  var timeSaturday2 = timeWeekday2(6);
  exports.timeSaturday = timeSaturday2;
  var timeSundays2 = timeSunday2.range;
  exports.timeSundays = timeSundays2;
  var timeMondays2 = timeMonday2.range;
  exports.timeMondays = timeMondays2;
  var timeTuesdays2 = timeTuesday2.range;
  exports.timeTuesdays = timeTuesdays2;
  var timeWednesdays2 = timeWednesday2.range;
  exports.timeWednesdays = timeWednesdays2;
  var timeThursdays2 = timeThursday2.range;
  exports.timeThursdays = timeThursdays2;
  var timeFridays2 = timeFriday2.range;
  exports.timeFridays = timeFridays2;
  var timeSaturdays2 = timeSaturday2.range;
  exports.timeSaturdays = timeSaturdays2;
  function utcWeekday2(i) {
    return (0, _interval.timeInterval)((date2) => {
      date2.setUTCDate(date2.getUTCDate() - (date2.getUTCDay() + 7 - i) % 7);
      date2.setUTCHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setUTCDate(date2.getUTCDate() + step * 7);
    }, (start2, end) => {
      return (end - start2) / _duration.durationWeek;
    });
  }
  var utcSunday2 = utcWeekday2(0);
  exports.utcSunday = utcSunday2;
  var utcMonday2 = utcWeekday2(1);
  exports.utcMonday = utcMonday2;
  var utcTuesday2 = utcWeekday2(2);
  exports.utcTuesday = utcTuesday2;
  var utcWednesday2 = utcWeekday2(3);
  exports.utcWednesday = utcWednesday2;
  var utcThursday2 = utcWeekday2(4);
  exports.utcThursday = utcThursday2;
  var utcFriday2 = utcWeekday2(5);
  exports.utcFriday = utcFriday2;
  var utcSaturday2 = utcWeekday2(6);
  exports.utcSaturday = utcSaturday2;
  var utcSundays2 = utcSunday2.range;
  exports.utcSundays = utcSundays2;
  var utcMondays2 = utcMonday2.range;
  exports.utcMondays = utcMondays2;
  var utcTuesdays2 = utcTuesday2.range;
  exports.utcTuesdays = utcTuesdays2;
  var utcWednesdays2 = utcWednesday2.range;
  exports.utcWednesdays = utcWednesdays2;
  var utcThursdays2 = utcThursday2.range;
  exports.utcThursdays = utcThursdays2;
  var utcFridays2 = utcFriday2.range;
  exports.utcFridays = utcFridays2;
  var utcSaturdays2 = utcSaturday2.range;
  exports.utcSaturdays = utcSaturdays2;
});

// node_modules/@visx/vendor/vendor-cjs/d3-time/src/month.js
var require_month = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.utcMonths = exports.utcMonth = exports.timeMonths = exports.timeMonth = undefined;
  var _interval = require_interval();
  var timeMonth2 = (0, _interval.timeInterval)((date2) => {
    date2.setDate(1);
    date2.setHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setMonth(date2.getMonth() + step);
  }, (start2, end) => {
    return end.getMonth() - start2.getMonth() + (end.getFullYear() - start2.getFullYear()) * 12;
  }, (date2) => {
    return date2.getMonth();
  });
  exports.timeMonth = timeMonth2;
  var timeMonths2 = timeMonth2.range;
  exports.timeMonths = timeMonths2;
  var utcMonth2 = (0, _interval.timeInterval)((date2) => {
    date2.setUTCDate(1);
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setUTCMonth(date2.getUTCMonth() + step);
  }, (start2, end) => {
    return end.getUTCMonth() - start2.getUTCMonth() + (end.getUTCFullYear() - start2.getUTCFullYear()) * 12;
  }, (date2) => {
    return date2.getUTCMonth();
  });
  exports.utcMonth = utcMonth2;
  var utcMonths2 = utcMonth2.range;
  exports.utcMonths = utcMonths2;
});

// node_modules/@visx/vendor/vendor-cjs/d3-time/src/year.js
var require_year = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.utcYears = exports.utcYear = exports.timeYears = exports.timeYear = undefined;
  var _interval = require_interval();
  var timeYear2 = (0, _interval.timeInterval)((date2) => {
    date2.setMonth(0, 1);
    date2.setHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setFullYear(date2.getFullYear() + step);
  }, (start2, end) => {
    return end.getFullYear() - start2.getFullYear();
  }, (date2) => {
    return date2.getFullYear();
  });
  exports.timeYear = timeYear2;
  timeYear2.every = (k2) => {
    return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : (0, _interval.timeInterval)((date2) => {
      date2.setFullYear(Math.floor(date2.getFullYear() / k2) * k2);
      date2.setMonth(0, 1);
      date2.setHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setFullYear(date2.getFullYear() + step * k2);
    });
  };
  var timeYears2 = timeYear2.range;
  exports.timeYears = timeYears2;
  var utcYear2 = (0, _interval.timeInterval)((date2) => {
    date2.setUTCMonth(0, 1);
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setUTCFullYear(date2.getUTCFullYear() + step);
  }, (start2, end) => {
    return end.getUTCFullYear() - start2.getUTCFullYear();
  }, (date2) => {
    return date2.getUTCFullYear();
  });
  exports.utcYear = utcYear2;
  utcYear2.every = (k2) => {
    return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : (0, _interval.timeInterval)((date2) => {
      date2.setUTCFullYear(Math.floor(date2.getUTCFullYear() / k2) * k2);
      date2.setUTCMonth(0, 1);
      date2.setUTCHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setUTCFullYear(date2.getUTCFullYear() + step * k2);
    });
  };
  var utcYears2 = utcYear2.range;
  exports.utcYears = utcYears2;
});

// node_modules/@visx/vendor/vendor-cjs/d3-time/src/ticks.js
var require_ticks2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.utcTicks = exports.utcTickInterval = exports.timeTicks = exports.timeTickInterval = undefined;
  var _index = require_src2();
  var _duration = require_duration();
  var _millisecond = require_millisecond();
  var _second = require_second();
  var _minute = require_minute();
  var _hour = require_hour();
  var _day = require_day();
  var _week = require_week();
  var _month = require_month();
  var _year = require_year();
  function ticker2(year, month, week, day, hour, minute) {
    const tickIntervals = [[_second.second, 1, _duration.durationSecond], [_second.second, 5, 5 * _duration.durationSecond], [_second.second, 15, 15 * _duration.durationSecond], [_second.second, 30, 30 * _duration.durationSecond], [minute, 1, _duration.durationMinute], [minute, 5, 5 * _duration.durationMinute], [minute, 15, 15 * _duration.durationMinute], [minute, 30, 30 * _duration.durationMinute], [hour, 1, _duration.durationHour], [hour, 3, 3 * _duration.durationHour], [hour, 6, 6 * _duration.durationHour], [hour, 12, 12 * _duration.durationHour], [day, 1, _duration.durationDay], [day, 2, 2 * _duration.durationDay], [week, 1, _duration.durationWeek], [month, 1, _duration.durationMonth], [month, 3, 3 * _duration.durationMonth], [year, 1, _duration.durationYear]];
    function ticks2(start2, stop2, count) {
      const reverse = stop2 < start2;
      if (reverse)
        [start2, stop2] = [stop2, start2];
      const interval = count && typeof count.range === "function" ? count : tickInterval(start2, stop2, count);
      const ticks3 = interval ? interval.range(start2, +stop2 + 1) : [];
      return reverse ? ticks3.reverse() : ticks3;
    }
    function tickInterval(start2, stop2, count) {
      const target = Math.abs(stop2 - start2) / count;
      const i = (0, _index.bisector)(([, , step2]) => step2).right(tickIntervals, target);
      if (i === tickIntervals.length)
        return year.every((0, _index.tickStep)(start2 / _duration.durationYear, stop2 / _duration.durationYear, count));
      if (i === 0)
        return _millisecond.millisecond.every(Math.max((0, _index.tickStep)(start2, stop2, count), 1));
      const [t, step] = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
      return t.every(step);
    }
    return [ticks2, tickInterval];
  }
  var [utcTicks2, utcTickInterval2] = ticker2(_year.utcYear, _month.utcMonth, _week.utcSunday, _day.unixDay, _hour.utcHour, _minute.utcMinute);
  exports.utcTickInterval = utcTickInterval2;
  exports.utcTicks = utcTicks2;
  var [timeTicks2, timeTickInterval2] = ticker2(_year.timeYear, _month.timeMonth, _week.timeSunday, _day.timeDay, _hour.timeHour, _minute.timeMinute);
  exports.timeTickInterval = timeTickInterval2;
  exports.timeTicks = timeTicks2;
});

// node_modules/@visx/vendor/vendor-cjs/d3-time/src/index.js
var require_src6 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "timeDay", {
    enumerable: true,
    get: function() {
      return _day.timeDay;
    }
  });
  Object.defineProperty(exports, "timeDays", {
    enumerable: true,
    get: function() {
      return _day.timeDays;
    }
  });
  Object.defineProperty(exports, "timeFriday", {
    enumerable: true,
    get: function() {
      return _week.timeFriday;
    }
  });
  Object.defineProperty(exports, "timeFridays", {
    enumerable: true,
    get: function() {
      return _week.timeFridays;
    }
  });
  Object.defineProperty(exports, "timeHour", {
    enumerable: true,
    get: function() {
      return _hour.timeHour;
    }
  });
  Object.defineProperty(exports, "timeHours", {
    enumerable: true,
    get: function() {
      return _hour.timeHours;
    }
  });
  Object.defineProperty(exports, "timeInterval", {
    enumerable: true,
    get: function() {
      return _interval.timeInterval;
    }
  });
  Object.defineProperty(exports, "timeMillisecond", {
    enumerable: true,
    get: function() {
      return _millisecond.millisecond;
    }
  });
  Object.defineProperty(exports, "timeMilliseconds", {
    enumerable: true,
    get: function() {
      return _millisecond.milliseconds;
    }
  });
  Object.defineProperty(exports, "timeMinute", {
    enumerable: true,
    get: function() {
      return _minute.timeMinute;
    }
  });
  Object.defineProperty(exports, "timeMinutes", {
    enumerable: true,
    get: function() {
      return _minute.timeMinutes;
    }
  });
  Object.defineProperty(exports, "timeMonday", {
    enumerable: true,
    get: function() {
      return _week.timeMonday;
    }
  });
  Object.defineProperty(exports, "timeMondays", {
    enumerable: true,
    get: function() {
      return _week.timeMondays;
    }
  });
  Object.defineProperty(exports, "timeMonth", {
    enumerable: true,
    get: function() {
      return _month.timeMonth;
    }
  });
  Object.defineProperty(exports, "timeMonths", {
    enumerable: true,
    get: function() {
      return _month.timeMonths;
    }
  });
  Object.defineProperty(exports, "timeSaturday", {
    enumerable: true,
    get: function() {
      return _week.timeSaturday;
    }
  });
  Object.defineProperty(exports, "timeSaturdays", {
    enumerable: true,
    get: function() {
      return _week.timeSaturdays;
    }
  });
  Object.defineProperty(exports, "timeSecond", {
    enumerable: true,
    get: function() {
      return _second.second;
    }
  });
  Object.defineProperty(exports, "timeSeconds", {
    enumerable: true,
    get: function() {
      return _second.seconds;
    }
  });
  Object.defineProperty(exports, "timeSunday", {
    enumerable: true,
    get: function() {
      return _week.timeSunday;
    }
  });
  Object.defineProperty(exports, "timeSundays", {
    enumerable: true,
    get: function() {
      return _week.timeSundays;
    }
  });
  Object.defineProperty(exports, "timeThursday", {
    enumerable: true,
    get: function() {
      return _week.timeThursday;
    }
  });
  Object.defineProperty(exports, "timeThursdays", {
    enumerable: true,
    get: function() {
      return _week.timeThursdays;
    }
  });
  Object.defineProperty(exports, "timeTickInterval", {
    enumerable: true,
    get: function() {
      return _ticks.timeTickInterval;
    }
  });
  Object.defineProperty(exports, "timeTicks", {
    enumerable: true,
    get: function() {
      return _ticks.timeTicks;
    }
  });
  Object.defineProperty(exports, "timeTuesday", {
    enumerable: true,
    get: function() {
      return _week.timeTuesday;
    }
  });
  Object.defineProperty(exports, "timeTuesdays", {
    enumerable: true,
    get: function() {
      return _week.timeTuesdays;
    }
  });
  Object.defineProperty(exports, "timeWednesday", {
    enumerable: true,
    get: function() {
      return _week.timeWednesday;
    }
  });
  Object.defineProperty(exports, "timeWednesdays", {
    enumerable: true,
    get: function() {
      return _week.timeWednesdays;
    }
  });
  Object.defineProperty(exports, "timeWeek", {
    enumerable: true,
    get: function() {
      return _week.timeSunday;
    }
  });
  Object.defineProperty(exports, "timeWeeks", {
    enumerable: true,
    get: function() {
      return _week.timeSundays;
    }
  });
  Object.defineProperty(exports, "timeYear", {
    enumerable: true,
    get: function() {
      return _year.timeYear;
    }
  });
  Object.defineProperty(exports, "timeYears", {
    enumerable: true,
    get: function() {
      return _year.timeYears;
    }
  });
  Object.defineProperty(exports, "unixDay", {
    enumerable: true,
    get: function() {
      return _day.unixDay;
    }
  });
  Object.defineProperty(exports, "unixDays", {
    enumerable: true,
    get: function() {
      return _day.unixDays;
    }
  });
  Object.defineProperty(exports, "utcDay", {
    enumerable: true,
    get: function() {
      return _day.utcDay;
    }
  });
  Object.defineProperty(exports, "utcDays", {
    enumerable: true,
    get: function() {
      return _day.utcDays;
    }
  });
  Object.defineProperty(exports, "utcFriday", {
    enumerable: true,
    get: function() {
      return _week.utcFriday;
    }
  });
  Object.defineProperty(exports, "utcFridays", {
    enumerable: true,
    get: function() {
      return _week.utcFridays;
    }
  });
  Object.defineProperty(exports, "utcHour", {
    enumerable: true,
    get: function() {
      return _hour.utcHour;
    }
  });
  Object.defineProperty(exports, "utcHours", {
    enumerable: true,
    get: function() {
      return _hour.utcHours;
    }
  });
  Object.defineProperty(exports, "utcMillisecond", {
    enumerable: true,
    get: function() {
      return _millisecond.millisecond;
    }
  });
  Object.defineProperty(exports, "utcMilliseconds", {
    enumerable: true,
    get: function() {
      return _millisecond.milliseconds;
    }
  });
  Object.defineProperty(exports, "utcMinute", {
    enumerable: true,
    get: function() {
      return _minute.utcMinute;
    }
  });
  Object.defineProperty(exports, "utcMinutes", {
    enumerable: true,
    get: function() {
      return _minute.utcMinutes;
    }
  });
  Object.defineProperty(exports, "utcMonday", {
    enumerable: true,
    get: function() {
      return _week.utcMonday;
    }
  });
  Object.defineProperty(exports, "utcMondays", {
    enumerable: true,
    get: function() {
      return _week.utcMondays;
    }
  });
  Object.defineProperty(exports, "utcMonth", {
    enumerable: true,
    get: function() {
      return _month.utcMonth;
    }
  });
  Object.defineProperty(exports, "utcMonths", {
    enumerable: true,
    get: function() {
      return _month.utcMonths;
    }
  });
  Object.defineProperty(exports, "utcSaturday", {
    enumerable: true,
    get: function() {
      return _week.utcSaturday;
    }
  });
  Object.defineProperty(exports, "utcSaturdays", {
    enumerable: true,
    get: function() {
      return _week.utcSaturdays;
    }
  });
  Object.defineProperty(exports, "utcSecond", {
    enumerable: true,
    get: function() {
      return _second.second;
    }
  });
  Object.defineProperty(exports, "utcSeconds", {
    enumerable: true,
    get: function() {
      return _second.seconds;
    }
  });
  Object.defineProperty(exports, "utcSunday", {
    enumerable: true,
    get: function() {
      return _week.utcSunday;
    }
  });
  Object.defineProperty(exports, "utcSundays", {
    enumerable: true,
    get: function() {
      return _week.utcSundays;
    }
  });
  Object.defineProperty(exports, "utcThursday", {
    enumerable: true,
    get: function() {
      return _week.utcThursday;
    }
  });
  Object.defineProperty(exports, "utcThursdays", {
    enumerable: true,
    get: function() {
      return _week.utcThursdays;
    }
  });
  Object.defineProperty(exports, "utcTickInterval", {
    enumerable: true,
    get: function() {
      return _ticks.utcTickInterval;
    }
  });
  Object.defineProperty(exports, "utcTicks", {
    enumerable: true,
    get: function() {
      return _ticks.utcTicks;
    }
  });
  Object.defineProperty(exports, "utcTuesday", {
    enumerable: true,
    get: function() {
      return _week.utcTuesday;
    }
  });
  Object.defineProperty(exports, "utcTuesdays", {
    enumerable: true,
    get: function() {
      return _week.utcTuesdays;
    }
  });
  Object.defineProperty(exports, "utcWednesday", {
    enumerable: true,
    get: function() {
      return _week.utcWednesday;
    }
  });
  Object.defineProperty(exports, "utcWednesdays", {
    enumerable: true,
    get: function() {
      return _week.utcWednesdays;
    }
  });
  Object.defineProperty(exports, "utcWeek", {
    enumerable: true,
    get: function() {
      return _week.utcSunday;
    }
  });
  Object.defineProperty(exports, "utcWeeks", {
    enumerable: true,
    get: function() {
      return _week.utcSundays;
    }
  });
  Object.defineProperty(exports, "utcYear", {
    enumerable: true,
    get: function() {
      return _year.utcYear;
    }
  });
  Object.defineProperty(exports, "utcYears", {
    enumerable: true,
    get: function() {
      return _year.utcYears;
    }
  });
  var _interval = require_interval();
  var _millisecond = require_millisecond();
  var _second = require_second();
  var _minute = require_minute();
  var _hour = require_hour();
  var _day = require_day();
  var _week = require_week();
  var _month = require_month();
  var _year = require_year();
  var _ticks = require_ticks2();
});

// node_modules/@visx/vendor/vendor-cjs/d3-time-format/src/locale.js
var require_locale2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = formatLocale2;
  var _index = require_src6();
  function localDate2(d) {
    if (0 <= d.y && d.y < 100) {
      var date2 = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
      date2.setFullYear(d.y);
      return date2;
    }
    return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
  }
  function utcDate2(d) {
    if (0 <= d.y && d.y < 100) {
      var date2 = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
      date2.setUTCFullYear(d.y);
      return date2;
    }
    return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
  }
  function newDate2(y, m, d) {
    return {
      y,
      m,
      d,
      H: 0,
      M: 0,
      S: 0,
      L: 0
    };
  }
  function formatLocale2(locale3) {
    var { dateTime: locale_dateTime, date: locale_date, time: locale_time, periods: locale_periods, days: locale_weekdays, shortDays: locale_shortWeekdays, months: locale_months, shortMonths: locale_shortMonths } = locale3;
    var periodRe = formatRe2(locale_periods), periodLookup = formatLookup2(locale_periods), weekdayRe = formatRe2(locale_weekdays), weekdayLookup = formatLookup2(locale_weekdays), shortWeekdayRe = formatRe2(locale_shortWeekdays), shortWeekdayLookup = formatLookup2(locale_shortWeekdays), monthRe = formatRe2(locale_months), monthLookup = formatLookup2(locale_months), shortMonthRe = formatRe2(locale_shortMonths), shortMonthLookup = formatLookup2(locale_shortMonths);
    var formats = {
      a: formatShortWeekday,
      A: formatWeekday,
      b: formatShortMonth,
      B: formatMonth,
      c: null,
      d: formatDayOfMonth2,
      e: formatDayOfMonth2,
      f: formatMicroseconds2,
      g: formatYearISO2,
      G: formatFullYearISO2,
      H: formatHour242,
      I: formatHour122,
      j: formatDayOfYear2,
      L: formatMilliseconds2,
      m: formatMonthNumber2,
      M: formatMinutes2,
      p: formatPeriod,
      q: formatQuarter,
      Q: formatUnixTimestamp2,
      s: formatUnixTimestampSeconds2,
      S: formatSeconds2,
      u: formatWeekdayNumberMonday2,
      U: formatWeekNumberSunday2,
      V: formatWeekNumberISO2,
      w: formatWeekdayNumberSunday2,
      W: formatWeekNumberMonday2,
      x: null,
      X: null,
      y: formatYear2,
      Y: formatFullYear2,
      Z: formatZone2,
      "%": formatLiteralPercent2
    };
    var utcFormats = {
      a: formatUTCShortWeekday,
      A: formatUTCWeekday,
      b: formatUTCShortMonth,
      B: formatUTCMonth,
      c: null,
      d: formatUTCDayOfMonth2,
      e: formatUTCDayOfMonth2,
      f: formatUTCMicroseconds2,
      g: formatUTCYearISO2,
      G: formatUTCFullYearISO2,
      H: formatUTCHour242,
      I: formatUTCHour122,
      j: formatUTCDayOfYear2,
      L: formatUTCMilliseconds2,
      m: formatUTCMonthNumber2,
      M: formatUTCMinutes2,
      p: formatUTCPeriod,
      q: formatUTCQuarter,
      Q: formatUnixTimestamp2,
      s: formatUnixTimestampSeconds2,
      S: formatUTCSeconds2,
      u: formatUTCWeekdayNumberMonday2,
      U: formatUTCWeekNumberSunday2,
      V: formatUTCWeekNumberISO2,
      w: formatUTCWeekdayNumberSunday2,
      W: formatUTCWeekNumberMonday2,
      x: null,
      X: null,
      y: formatUTCYear2,
      Y: formatUTCFullYear2,
      Z: formatUTCZone2,
      "%": formatLiteralPercent2
    };
    var parses = {
      a: parseShortWeekday,
      A: parseWeekday,
      b: parseShortMonth,
      B: parseMonth,
      c: parseLocaleDateTime,
      d: parseDayOfMonth2,
      e: parseDayOfMonth2,
      f: parseMicroseconds2,
      g: parseYear2,
      G: parseFullYear2,
      H: parseHour242,
      I: parseHour242,
      j: parseDayOfYear2,
      L: parseMilliseconds2,
      m: parseMonthNumber2,
      M: parseMinutes2,
      p: parsePeriod,
      q: parseQuarter2,
      Q: parseUnixTimestamp2,
      s: parseUnixTimestampSeconds2,
      S: parseSeconds2,
      u: parseWeekdayNumberMonday2,
      U: parseWeekNumberSunday2,
      V: parseWeekNumberISO2,
      w: parseWeekdayNumberSunday2,
      W: parseWeekNumberMonday2,
      x: parseLocaleDate,
      X: parseLocaleTime,
      y: parseYear2,
      Y: parseFullYear2,
      Z: parseZone2,
      "%": parseLiteralPercent2
    };
    formats.x = newFormat(locale_date, formats);
    formats.X = newFormat(locale_time, formats);
    formats.c = newFormat(locale_dateTime, formats);
    utcFormats.x = newFormat(locale_date, utcFormats);
    utcFormats.X = newFormat(locale_time, utcFormats);
    utcFormats.c = newFormat(locale_dateTime, utcFormats);
    function newFormat(specifier, formats2) {
      return function(date2) {
        var string = [], i = -1, j2 = 0, n = specifier.length, c, pad3, format2;
        if (!(date2 instanceof Date))
          date2 = new Date(+date2);
        while (++i < n) {
          if (specifier.charCodeAt(i) === 37) {
            string.push(specifier.slice(j2, i));
            if ((pad3 = pads2[c = specifier.charAt(++i)]) != null)
              c = specifier.charAt(++i);
            else
              pad3 = c === "e" ? " " : "0";
            if (format2 = formats2[c])
              c = format2(date2, pad3);
            string.push(c);
            j2 = i + 1;
          }
        }
        string.push(specifier.slice(j2, i));
        return string.join("");
      };
    }
    function newParse(specifier, Z) {
      return function(string) {
        var d = newDate2(1900, undefined, 1), i = parseSpecifier(d, specifier, string += "", 0), week, day;
        if (i != string.length)
          return null;
        if ("Q" in d)
          return new Date(d.Q);
        if ("s" in d)
          return new Date(d.s * 1000 + ("L" in d ? d.L : 0));
        if (Z && !("Z" in d))
          d.Z = 0;
        if ("p" in d)
          d.H = d.H % 12 + d.p * 12;
        if (d.m === undefined)
          d.m = "q" in d ? d.q : 0;
        if ("V" in d) {
          if (d.V < 1 || d.V > 53)
            return null;
          if (!("w" in d))
            d.w = 1;
          if ("Z" in d) {
            week = utcDate2(newDate2(d.y, 0, 1)), day = week.getUTCDay();
            week = day > 4 || day === 0 ? _index.utcMonday.ceil(week) : (0, _index.utcMonday)(week);
            week = _index.utcDay.offset(week, (d.V - 1) * 7);
            d.y = week.getUTCFullYear();
            d.m = week.getUTCMonth();
            d.d = week.getUTCDate() + (d.w + 6) % 7;
          } else {
            week = localDate2(newDate2(d.y, 0, 1)), day = week.getDay();
            week = day > 4 || day === 0 ? _index.timeMonday.ceil(week) : (0, _index.timeMonday)(week);
            week = _index.timeDay.offset(week, (d.V - 1) * 7);
            d.y = week.getFullYear();
            d.m = week.getMonth();
            d.d = week.getDate() + (d.w + 6) % 7;
          }
        } else if ("W" in d || "U" in d) {
          if (!("w" in d))
            d.w = "u" in d ? d.u % 7 : ("W" in d) ? 1 : 0;
          day = "Z" in d ? utcDate2(newDate2(d.y, 0, 1)).getUTCDay() : localDate2(newDate2(d.y, 0, 1)).getDay();
          d.m = 0;
          d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
        }
        if ("Z" in d) {
          d.H += d.Z / 100 | 0;
          d.M += d.Z % 100;
          return utcDate2(d);
        }
        return localDate2(d);
      };
    }
    function parseSpecifier(d, specifier, string, j2) {
      var i = 0, n = specifier.length, m = string.length, c, parse;
      while (i < n) {
        if (j2 >= m)
          return -1;
        c = specifier.charCodeAt(i++);
        if (c === 37) {
          c = specifier.charAt(i++);
          parse = parses[c in pads2 ? specifier.charAt(i++) : c];
          if (!parse || (j2 = parse(d, string, j2)) < 0)
            return -1;
        } else if (c != string.charCodeAt(j2++)) {
          return -1;
        }
      }
      return j2;
    }
    function parsePeriod(d, string, i) {
      var n = periodRe.exec(string.slice(i));
      return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseShortWeekday(d, string, i) {
      var n = shortWeekdayRe.exec(string.slice(i));
      return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseWeekday(d, string, i) {
      var n = weekdayRe.exec(string.slice(i));
      return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseShortMonth(d, string, i) {
      var n = shortMonthRe.exec(string.slice(i));
      return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseMonth(d, string, i) {
      var n = monthRe.exec(string.slice(i));
      return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseLocaleDateTime(d, string, i) {
      return parseSpecifier(d, locale_dateTime, string, i);
    }
    function parseLocaleDate(d, string, i) {
      return parseSpecifier(d, locale_date, string, i);
    }
    function parseLocaleTime(d, string, i) {
      return parseSpecifier(d, locale_time, string, i);
    }
    function formatShortWeekday(d) {
      return locale_shortWeekdays[d.getDay()];
    }
    function formatWeekday(d) {
      return locale_weekdays[d.getDay()];
    }
    function formatShortMonth(d) {
      return locale_shortMonths[d.getMonth()];
    }
    function formatMonth(d) {
      return locale_months[d.getMonth()];
    }
    function formatPeriod(d) {
      return locale_periods[+(d.getHours() >= 12)];
    }
    function formatQuarter(d) {
      return 1 + ~~(d.getMonth() / 3);
    }
    function formatUTCShortWeekday(d) {
      return locale_shortWeekdays[d.getUTCDay()];
    }
    function formatUTCWeekday(d) {
      return locale_weekdays[d.getUTCDay()];
    }
    function formatUTCShortMonth(d) {
      return locale_shortMonths[d.getUTCMonth()];
    }
    function formatUTCMonth(d) {
      return locale_months[d.getUTCMonth()];
    }
    function formatUTCPeriod(d) {
      return locale_periods[+(d.getUTCHours() >= 12)];
    }
    function formatUTCQuarter(d) {
      return 1 + ~~(d.getUTCMonth() / 3);
    }
    return {
      format: function(specifier) {
        var f = newFormat(specifier += "", formats);
        f.toString = function() {
          return specifier;
        };
        return f;
      },
      parse: function(specifier) {
        var p2 = newParse(specifier += "", false);
        p2.toString = function() {
          return specifier;
        };
        return p2;
      },
      utcFormat: function(specifier) {
        var f = newFormat(specifier += "", utcFormats);
        f.toString = function() {
          return specifier;
        };
        return f;
      },
      utcParse: function(specifier) {
        var p2 = newParse(specifier += "", true);
        p2.toString = function() {
          return specifier;
        };
        return p2;
      }
    };
  }
  var pads2 = {
    "-": "",
    _: " ",
    "0": "0"
  };
  var numberRe2 = /^\s*\d+/;
  var percentRe2 = /^%/;
  var requoteRe2 = /[\\^$*+?|[\]().{}]/g;
  function pad2(value, fill, width) {
    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  }
  function requote2(s) {
    return s.replace(requoteRe2, "\\$&");
  }
  function formatRe2(names) {
    return new RegExp("^(?:" + names.map(requote2).join("|") + ")", "i");
  }
  function formatLookup2(names) {
    return new Map(names.map((name, i) => [name.toLowerCase(), i]));
  }
  function parseWeekdayNumberSunday2(d, string, i) {
    var n = numberRe2.exec(string.slice(i, i + 1));
    return n ? (d.w = +n[0], i + n[0].length) : -1;
  }
  function parseWeekdayNumberMonday2(d, string, i) {
    var n = numberRe2.exec(string.slice(i, i + 1));
    return n ? (d.u = +n[0], i + n[0].length) : -1;
  }
  function parseWeekNumberSunday2(d, string, i) {
    var n = numberRe2.exec(string.slice(i, i + 2));
    return n ? (d.U = +n[0], i + n[0].length) : -1;
  }
  function parseWeekNumberISO2(d, string, i) {
    var n = numberRe2.exec(string.slice(i, i + 2));
    return n ? (d.V = +n[0], i + n[0].length) : -1;
  }
  function parseWeekNumberMonday2(d, string, i) {
    var n = numberRe2.exec(string.slice(i, i + 2));
    return n ? (d.W = +n[0], i + n[0].length) : -1;
  }
  function parseFullYear2(d, string, i) {
    var n = numberRe2.exec(string.slice(i, i + 4));
    return n ? (d.y = +n[0], i + n[0].length) : -1;
  }
  function parseYear2(d, string, i) {
    var n = numberRe2.exec(string.slice(i, i + 2));
    return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
  }
  function parseZone2(d, string, i) {
    var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
    return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
  }
  function parseQuarter2(d, string, i) {
    var n = numberRe2.exec(string.slice(i, i + 1));
    return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
  }
  function parseMonthNumber2(d, string, i) {
    var n = numberRe2.exec(string.slice(i, i + 2));
    return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
  }
  function parseDayOfMonth2(d, string, i) {
    var n = numberRe2.exec(string.slice(i, i + 2));
    return n ? (d.d = +n[0], i + n[0].length) : -1;
  }
  function parseDayOfYear2(d, string, i) {
    var n = numberRe2.exec(string.slice(i, i + 3));
    return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
  }
  function parseHour242(d, string, i) {
    var n = numberRe2.exec(string.slice(i, i + 2));
    return n ? (d.H = +n[0], i + n[0].length) : -1;
  }
  function parseMinutes2(d, string, i) {
    var n = numberRe2.exec(string.slice(i, i + 2));
    return n ? (d.M = +n[0], i + n[0].length) : -1;
  }
  function parseSeconds2(d, string, i) {
    var n = numberRe2.exec(string.slice(i, i + 2));
    return n ? (d.S = +n[0], i + n[0].length) : -1;
  }
  function parseMilliseconds2(d, string, i) {
    var n = numberRe2.exec(string.slice(i, i + 3));
    return n ? (d.L = +n[0], i + n[0].length) : -1;
  }
  function parseMicroseconds2(d, string, i) {
    var n = numberRe2.exec(string.slice(i, i + 6));
    return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
  }
  function parseLiteralPercent2(d, string, i) {
    var n = percentRe2.exec(string.slice(i, i + 1));
    return n ? i + n[0].length : -1;
  }
  function parseUnixTimestamp2(d, string, i) {
    var n = numberRe2.exec(string.slice(i));
    return n ? (d.Q = +n[0], i + n[0].length) : -1;
  }
  function parseUnixTimestampSeconds2(d, string, i) {
    var n = numberRe2.exec(string.slice(i));
    return n ? (d.s = +n[0], i + n[0].length) : -1;
  }
  function formatDayOfMonth2(d, p2) {
    return pad2(d.getDate(), p2, 2);
  }
  function formatHour242(d, p2) {
    return pad2(d.getHours(), p2, 2);
  }
  function formatHour122(d, p2) {
    return pad2(d.getHours() % 12 || 12, p2, 2);
  }
  function formatDayOfYear2(d, p2) {
    return pad2(1 + _index.timeDay.count((0, _index.timeYear)(d), d), p2, 3);
  }
  function formatMilliseconds2(d, p2) {
    return pad2(d.getMilliseconds(), p2, 3);
  }
  function formatMicroseconds2(d, p2) {
    return formatMilliseconds2(d, p2) + "000";
  }
  function formatMonthNumber2(d, p2) {
    return pad2(d.getMonth() + 1, p2, 2);
  }
  function formatMinutes2(d, p2) {
    return pad2(d.getMinutes(), p2, 2);
  }
  function formatSeconds2(d, p2) {
    return pad2(d.getSeconds(), p2, 2);
  }
  function formatWeekdayNumberMonday2(d) {
    var day = d.getDay();
    return day === 0 ? 7 : day;
  }
  function formatWeekNumberSunday2(d, p2) {
    return pad2(_index.timeSunday.count((0, _index.timeYear)(d) - 1, d), p2, 2);
  }
  function dISO2(d) {
    var day = d.getDay();
    return day >= 4 || day === 0 ? (0, _index.timeThursday)(d) : _index.timeThursday.ceil(d);
  }
  function formatWeekNumberISO2(d, p2) {
    d = dISO2(d);
    return pad2(_index.timeThursday.count((0, _index.timeYear)(d), d) + ((0, _index.timeYear)(d).getDay() === 4), p2, 2);
  }
  function formatWeekdayNumberSunday2(d) {
    return d.getDay();
  }
  function formatWeekNumberMonday2(d, p2) {
    return pad2(_index.timeMonday.count((0, _index.timeYear)(d) - 1, d), p2, 2);
  }
  function formatYear2(d, p2) {
    return pad2(d.getFullYear() % 100, p2, 2);
  }
  function formatYearISO2(d, p2) {
    d = dISO2(d);
    return pad2(d.getFullYear() % 100, p2, 2);
  }
  function formatFullYear2(d, p2) {
    return pad2(d.getFullYear() % 1e4, p2, 4);
  }
  function formatFullYearISO2(d, p2) {
    var day = d.getDay();
    d = day >= 4 || day === 0 ? (0, _index.timeThursday)(d) : _index.timeThursday.ceil(d);
    return pad2(d.getFullYear() % 1e4, p2, 4);
  }
  function formatZone2(d) {
    var z = d.getTimezoneOffset();
    return (z > 0 ? "-" : (z *= -1, "+")) + pad2(z / 60 | 0, "0", 2) + pad2(z % 60, "0", 2);
  }
  function formatUTCDayOfMonth2(d, p2) {
    return pad2(d.getUTCDate(), p2, 2);
  }
  function formatUTCHour242(d, p2) {
    return pad2(d.getUTCHours(), p2, 2);
  }
  function formatUTCHour122(d, p2) {
    return pad2(d.getUTCHours() % 12 || 12, p2, 2);
  }
  function formatUTCDayOfYear2(d, p2) {
    return pad2(1 + _index.utcDay.count((0, _index.utcYear)(d), d), p2, 3);
  }
  function formatUTCMilliseconds2(d, p2) {
    return pad2(d.getUTCMilliseconds(), p2, 3);
  }
  function formatUTCMicroseconds2(d, p2) {
    return formatUTCMilliseconds2(d, p2) + "000";
  }
  function formatUTCMonthNumber2(d, p2) {
    return pad2(d.getUTCMonth() + 1, p2, 2);
  }
  function formatUTCMinutes2(d, p2) {
    return pad2(d.getUTCMinutes(), p2, 2);
  }
  function formatUTCSeconds2(d, p2) {
    return pad2(d.getUTCSeconds(), p2, 2);
  }
  function formatUTCWeekdayNumberMonday2(d) {
    var dow = d.getUTCDay();
    return dow === 0 ? 7 : dow;
  }
  function formatUTCWeekNumberSunday2(d, p2) {
    return pad2(_index.utcSunday.count((0, _index.utcYear)(d) - 1, d), p2, 2);
  }
  function UTCdISO2(d) {
    var day = d.getUTCDay();
    return day >= 4 || day === 0 ? (0, _index.utcThursday)(d) : _index.utcThursday.ceil(d);
  }
  function formatUTCWeekNumberISO2(d, p2) {
    d = UTCdISO2(d);
    return pad2(_index.utcThursday.count((0, _index.utcYear)(d), d) + ((0, _index.utcYear)(d).getUTCDay() === 4), p2, 2);
  }
  function formatUTCWeekdayNumberSunday2(d) {
    return d.getUTCDay();
  }
  function formatUTCWeekNumberMonday2(d, p2) {
    return pad2(_index.utcMonday.count((0, _index.utcYear)(d) - 1, d), p2, 2);
  }
  function formatUTCYear2(d, p2) {
    return pad2(d.getUTCFullYear() % 100, p2, 2);
  }
  function formatUTCYearISO2(d, p2) {
    d = UTCdISO2(d);
    return pad2(d.getUTCFullYear() % 100, p2, 2);
  }
  function formatUTCFullYear2(d, p2) {
    return pad2(d.getUTCFullYear() % 1e4, p2, 4);
  }
  function formatUTCFullYearISO2(d, p2) {
    var day = d.getUTCDay();
    d = day >= 4 || day === 0 ? (0, _index.utcThursday)(d) : _index.utcThursday.ceil(d);
    return pad2(d.getUTCFullYear() % 1e4, p2, 4);
  }
  function formatUTCZone2() {
    return "+0000";
  }
  function formatLiteralPercent2() {
    return "%";
  }
  function formatUnixTimestamp2(d) {
    return +d;
  }
  function formatUnixTimestampSeconds2(d) {
    return Math.floor(+d / 1000);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-time-format/src/defaultLocale.js
var require_defaultLocale2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = defaultLocale3;
  exports.utcParse = exports.utcFormat = exports.timeParse = exports.timeFormat = undefined;
  var _locale = _interopRequireDefault(require_locale2());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var locale3;
  var timeFormat2;
  exports.timeFormat = timeFormat2;
  var timeParse2;
  exports.timeParse = timeParse2;
  var utcFormat2;
  exports.utcFormat = utcFormat2;
  var utcParse2;
  exports.utcParse = utcParse2;
  defaultLocale3({
    dateTime: "%x, %X",
    date: "%-m/%-d/%Y",
    time: "%-I:%M:%S %p",
    periods: ["AM", "PM"],
    days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
    shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
    shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
  });
  function defaultLocale3(definition) {
    locale3 = (0, _locale.default)(definition);
    exports.timeFormat = timeFormat2 = locale3.format;
    exports.timeParse = timeParse2 = locale3.parse;
    exports.utcFormat = utcFormat2 = locale3.utcFormat;
    exports.utcParse = utcParse2 = locale3.utcParse;
    return locale3;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-time-format/src/isoFormat.js
var require_isoFormat = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isoSpecifier = exports.default = undefined;
  var _defaultLocale = require_defaultLocale2();
  var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
  exports.isoSpecifier = isoSpecifier;
  function formatIsoNative(date2) {
    return date2.toISOString();
  }
  var formatIso = Date.prototype.toISOString ? formatIsoNative : (0, _defaultLocale.utcFormat)(isoSpecifier);
  var _default = formatIso;
  exports.default = _default;
});

// node_modules/@visx/vendor/vendor-cjs/d3-time-format/src/isoParse.js
var require_isoParse = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _isoFormat = require_isoFormat();
  var _defaultLocale = require_defaultLocale2();
  function parseIsoNative(string) {
    var date2 = new Date(string);
    return isNaN(date2) ? null : date2;
  }
  var parseIso = +new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : (0, _defaultLocale.utcParse)(_isoFormat.isoSpecifier);
  var _default = parseIso;
  exports.default = _default;
});

// node_modules/@visx/vendor/vendor-cjs/d3-time-format/src/index.js
var require_src7 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "isoFormat", {
    enumerable: true,
    get: function() {
      return _isoFormat.default;
    }
  });
  Object.defineProperty(exports, "isoParse", {
    enumerable: true,
    get: function() {
      return _isoParse.default;
    }
  });
  Object.defineProperty(exports, "timeFormat", {
    enumerable: true,
    get: function() {
      return _defaultLocale.timeFormat;
    }
  });
  Object.defineProperty(exports, "timeFormatDefaultLocale", {
    enumerable: true,
    get: function() {
      return _defaultLocale.default;
    }
  });
  Object.defineProperty(exports, "timeFormatLocale", {
    enumerable: true,
    get: function() {
      return _locale.default;
    }
  });
  Object.defineProperty(exports, "timeParse", {
    enumerable: true,
    get: function() {
      return _defaultLocale.timeParse;
    }
  });
  Object.defineProperty(exports, "utcFormat", {
    enumerable: true,
    get: function() {
      return _defaultLocale.utcFormat;
    }
  });
  Object.defineProperty(exports, "utcParse", {
    enumerable: true,
    get: function() {
      return _defaultLocale.utcParse;
    }
  });
  var _defaultLocale = _interopRequireWildcard(require_defaultLocale2());
  var _locale = _interopRequireDefault(require_locale2());
  var _isoFormat = _interopRequireDefault(require_isoFormat());
  var _isoParse = _interopRequireDefault(require_isoParse());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-scale/src/time.js
var require_time = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.calendar = calendar2;
  exports.default = time2;
  var _index = require_src6();
  var _index2 = require_src7();
  var _continuous = _interopRequireWildcard(require_continuous());
  var _init = require_init();
  var _nice = _interopRequireDefault(require_nice2());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function date2(t) {
    return new Date(t);
  }
  function number4(t) {
    return t instanceof Date ? +t : +new Date(+t);
  }
  function calendar2(ticks2, tickInterval, year, month, week, day, hour, minute, second2, format2) {
    var scale = (0, _continuous.default)(), invert = scale.invert, domain = scale.domain;
    var formatMillisecond = format2(".%L"), formatSecond = format2(":%S"), formatMinute = format2("%I:%M"), formatHour = format2("%I %p"), formatDay = format2("%a %d"), formatWeek = format2("%b %d"), formatMonth = format2("%B"), formatYear2 = format2("%Y");
    function tickFormat2(date3) {
      return (second2(date3) < date3 ? formatMillisecond : minute(date3) < date3 ? formatSecond : hour(date3) < date3 ? formatMinute : day(date3) < date3 ? formatHour : month(date3) < date3 ? week(date3) < date3 ? formatDay : formatWeek : year(date3) < date3 ? formatMonth : formatYear2)(date3);
    }
    scale.invert = function(y) {
      return new Date(invert(y));
    };
    scale.domain = function(_) {
      return arguments.length ? domain(Array.from(_, number4)) : domain().map(date2);
    };
    scale.ticks = function(interval) {
      var d = domain();
      return ticks2(d[0], d[d.length - 1], interval == null ? 10 : interval);
    };
    scale.tickFormat = function(count, specifier) {
      return specifier == null ? tickFormat2 : format2(specifier);
    };
    scale.nice = function(interval) {
      var d = domain();
      if (!interval || typeof interval.range !== "function")
        interval = tickInterval(d[0], d[d.length - 1], interval == null ? 10 : interval);
      return interval ? domain((0, _nice.default)(d, interval)) : scale;
    };
    scale.copy = function() {
      return (0, _continuous.copy)(scale, calendar2(ticks2, tickInterval, year, month, week, day, hour, minute, second2, format2));
    };
    return scale;
  }
  function time2() {
    return _init.initRange.apply(calendar2(_index.timeTicks, _index.timeTickInterval, _index.timeYear, _index.timeMonth, _index.timeWeek, _index.timeDay, _index.timeHour, _index.timeMinute, _index.timeSecond, _index2.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-scale/src/utcTime.js
var require_utcTime = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = utcTime2;
  var _index = require_src6();
  var _index2 = require_src7();
  var _time = require_time();
  var _init = require_init();
  function utcTime2() {
    return _init.initRange.apply((0, _time.calendar)(_index.utcTicks, _index.utcTickInterval, _index.utcYear, _index.utcMonth, _index.utcWeek, _index.utcDay, _index.utcHour, _index.utcMinute, _index.utcSecond, _index2.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-scale/src/sequential.js
var require_sequential = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.copy = copy2;
  exports.default = sequential;
  exports.sequentialLog = sequentialLog;
  exports.sequentialPow = sequentialPow;
  exports.sequentialSqrt = sequentialSqrt;
  exports.sequentialSymlog = sequentialSymlog;
  var _index = require_src4();
  var _continuous = require_continuous();
  var _init = require_init();
  var _linear = require_linear();
  var _log = require_log();
  var _symlog = require_symlog();
  var _pow = require_pow();
  function transformer2() {
    var x0 = 0, x1 = 1, t03, t13, k10, transform, interpolator = _continuous.identity, clamp2 = false, unknown;
    function scale(x) {
      return x == null || isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t03) * k10, clamp2 ? Math.max(0, Math.min(1, x)) : x));
    }
    scale.domain = function(_) {
      return arguments.length ? ([x0, x1] = _, t03 = transform(x0 = +x0), t13 = transform(x1 = +x1), k10 = t03 === t13 ? 0 : 1 / (t13 - t03), scale) : [x0, x1];
    };
    scale.clamp = function(_) {
      return arguments.length ? (clamp2 = !!_, scale) : clamp2;
    };
    scale.interpolator = function(_) {
      return arguments.length ? (interpolator = _, scale) : interpolator;
    };
    function range2(interpolate2) {
      return function(_) {
        var r0, r1;
        return arguments.length ? ([r0, r1] = _, interpolator = interpolate2(r0, r1), scale) : [interpolator(0), interpolator(1)];
      };
    }
    scale.range = range2(_index.interpolate);
    scale.rangeRound = range2(_index.interpolateRound);
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function(t) {
      transform = t, t03 = t(x0), t13 = t(x1), k10 = t03 === t13 ? 0 : 1 / (t13 - t03);
      return scale;
    };
  }
  function copy2(source, target) {
    return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
  }
  function sequential() {
    var scale = (0, _linear.linearish)(transformer2()(_continuous.identity));
    scale.copy = function() {
      return copy2(scale, sequential());
    };
    return _init.initInterpolator.apply(scale, arguments);
  }
  function sequentialLog() {
    var scale = (0, _log.loggish)(transformer2()).domain([1, 10]);
    scale.copy = function() {
      return copy2(scale, sequentialLog()).base(scale.base());
    };
    return _init.initInterpolator.apply(scale, arguments);
  }
  function sequentialSymlog() {
    var scale = (0, _symlog.symlogish)(transformer2());
    scale.copy = function() {
      return copy2(scale, sequentialSymlog()).constant(scale.constant());
    };
    return _init.initInterpolator.apply(scale, arguments);
  }
  function sequentialPow() {
    var scale = (0, _pow.powish)(transformer2());
    scale.copy = function() {
      return copy2(scale, sequentialPow()).exponent(scale.exponent());
    };
    return _init.initInterpolator.apply(scale, arguments);
  }
  function sequentialSqrt() {
    return sequentialPow.apply(null, arguments).exponent(0.5);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-scale/src/sequentialQuantile.js
var require_sequentialQuantile = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = sequentialQuantile;
  var _index = require_src2();
  var _continuous = require_continuous();
  var _init = require_init();
  function sequentialQuantile() {
    var domain = [], interpolator = _continuous.identity;
    function scale(x) {
      if (x != null && !isNaN(x = +x))
        return interpolator(((0, _index.bisect)(domain, x, 1) - 1) / (domain.length - 1));
    }
    scale.domain = function(_) {
      if (!arguments.length)
        return domain.slice();
      domain = [];
      for (let d of _)
        if (d != null && !isNaN(d = +d))
          domain.push(d);
      domain.sort(_index.ascending);
      return scale;
    };
    scale.interpolator = function(_) {
      return arguments.length ? (interpolator = _, scale) : interpolator;
    };
    scale.range = function() {
      return domain.map((d, i) => interpolator(i / (domain.length - 1)));
    };
    scale.quantiles = function(n) {
      return Array.from({
        length: n + 1
      }, (_, i) => (0, _index.quantile)(domain, i / n));
    };
    scale.copy = function() {
      return sequentialQuantile(interpolator).domain(domain);
    };
    return _init.initInterpolator.apply(scale, arguments);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-scale/src/diverging.js
var require_diverging = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = diverging;
  exports.divergingLog = divergingLog;
  exports.divergingPow = divergingPow;
  exports.divergingSqrt = divergingSqrt;
  exports.divergingSymlog = divergingSymlog;
  var _index = require_src4();
  var _continuous = require_continuous();
  var _init = require_init();
  var _linear = require_linear();
  var _log = require_log();
  var _sequential = require_sequential();
  var _symlog = require_symlog();
  var _pow = require_pow();
  function transformer2() {
    var x0 = 0, x1 = 0.5, x2 = 1, s = 1, t03, t13, t22, k10, k21, interpolator = _continuous.identity, transform, clamp2 = false, unknown;
    function scale(x) {
      return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t13) * (s * x < s * t13 ? k10 : k21), interpolator(clamp2 ? Math.max(0, Math.min(1, x)) : x));
    }
    scale.domain = function(_) {
      return arguments.length ? ([x0, x1, x2] = _, t03 = transform(x0 = +x0), t13 = transform(x1 = +x1), t22 = transform(x2 = +x2), k10 = t03 === t13 ? 0 : 0.5 / (t13 - t03), k21 = t13 === t22 ? 0 : 0.5 / (t22 - t13), s = t13 < t03 ? -1 : 1, scale) : [x0, x1, x2];
    };
    scale.clamp = function(_) {
      return arguments.length ? (clamp2 = !!_, scale) : clamp2;
    };
    scale.interpolator = function(_) {
      return arguments.length ? (interpolator = _, scale) : interpolator;
    };
    function range2(interpolate2) {
      return function(_) {
        var r0, r1, r2;
        return arguments.length ? ([r0, r1, r2] = _, interpolator = (0, _index.piecewise)(interpolate2, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];
      };
    }
    scale.range = range2(_index.interpolate);
    scale.rangeRound = range2(_index.interpolateRound);
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function(t) {
      transform = t, t03 = t(x0), t13 = t(x1), t22 = t(x2), k10 = t03 === t13 ? 0 : 0.5 / (t13 - t03), k21 = t13 === t22 ? 0 : 0.5 / (t22 - t13), s = t13 < t03 ? -1 : 1;
      return scale;
    };
  }
  function diverging() {
    var scale = (0, _linear.linearish)(transformer2()(_continuous.identity));
    scale.copy = function() {
      return (0, _sequential.copy)(scale, diverging());
    };
    return _init.initInterpolator.apply(scale, arguments);
  }
  function divergingLog() {
    var scale = (0, _log.loggish)(transformer2()).domain([0.1, 1, 10]);
    scale.copy = function() {
      return (0, _sequential.copy)(scale, divergingLog()).base(scale.base());
    };
    return _init.initInterpolator.apply(scale, arguments);
  }
  function divergingSymlog() {
    var scale = (0, _symlog.symlogish)(transformer2());
    scale.copy = function() {
      return (0, _sequential.copy)(scale, divergingSymlog()).constant(scale.constant());
    };
    return _init.initInterpolator.apply(scale, arguments);
  }
  function divergingPow() {
    var scale = (0, _pow.powish)(transformer2());
    scale.copy = function() {
      return (0, _sequential.copy)(scale, divergingPow()).exponent(scale.exponent());
    };
    return _init.initInterpolator.apply(scale, arguments);
  }
  function divergingSqrt() {
    return divergingPow.apply(null, arguments).exponent(0.5);
  }
});

// node_modules/@visx/vendor/vendor-cjs/d3-scale/src/index.js
var require_src8 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "scaleBand", {
    enumerable: true,
    get: function() {
      return _band.default;
    }
  });
  Object.defineProperty(exports, "scaleDiverging", {
    enumerable: true,
    get: function() {
      return _diverging.default;
    }
  });
  Object.defineProperty(exports, "scaleDivergingLog", {
    enumerable: true,
    get: function() {
      return _diverging.divergingLog;
    }
  });
  Object.defineProperty(exports, "scaleDivergingPow", {
    enumerable: true,
    get: function() {
      return _diverging.divergingPow;
    }
  });
  Object.defineProperty(exports, "scaleDivergingSqrt", {
    enumerable: true,
    get: function() {
      return _diverging.divergingSqrt;
    }
  });
  Object.defineProperty(exports, "scaleDivergingSymlog", {
    enumerable: true,
    get: function() {
      return _diverging.divergingSymlog;
    }
  });
  Object.defineProperty(exports, "scaleIdentity", {
    enumerable: true,
    get: function() {
      return _identity.default;
    }
  });
  Object.defineProperty(exports, "scaleImplicit", {
    enumerable: true,
    get: function() {
      return _ordinal.implicit;
    }
  });
  Object.defineProperty(exports, "scaleLinear", {
    enumerable: true,
    get: function() {
      return _linear.default;
    }
  });
  Object.defineProperty(exports, "scaleLog", {
    enumerable: true,
    get: function() {
      return _log.default;
    }
  });
  Object.defineProperty(exports, "scaleOrdinal", {
    enumerable: true,
    get: function() {
      return _ordinal.default;
    }
  });
  Object.defineProperty(exports, "scalePoint", {
    enumerable: true,
    get: function() {
      return _band.point;
    }
  });
  Object.defineProperty(exports, "scalePow", {
    enumerable: true,
    get: function() {
      return _pow.default;
    }
  });
  Object.defineProperty(exports, "scaleQuantile", {
    enumerable: true,
    get: function() {
      return _quantile.default;
    }
  });
  Object.defineProperty(exports, "scaleQuantize", {
    enumerable: true,
    get: function() {
      return _quantize.default;
    }
  });
  Object.defineProperty(exports, "scaleRadial", {
    enumerable: true,
    get: function() {
      return _radial.default;
    }
  });
  Object.defineProperty(exports, "scaleSequential", {
    enumerable: true,
    get: function() {
      return _sequential.default;
    }
  });
  Object.defineProperty(exports, "scaleSequentialLog", {
    enumerable: true,
    get: function() {
      return _sequential.sequentialLog;
    }
  });
  Object.defineProperty(exports, "scaleSequentialPow", {
    enumerable: true,
    get: function() {
      return _sequential.sequentialPow;
    }
  });
  Object.defineProperty(exports, "scaleSequentialQuantile", {
    enumerable: true,
    get: function() {
      return _sequentialQuantile.default;
    }
  });
  Object.defineProperty(exports, "scaleSequentialSqrt", {
    enumerable: true,
    get: function() {
      return _sequential.sequentialSqrt;
    }
  });
  Object.defineProperty(exports, "scaleSequentialSymlog", {
    enumerable: true,
    get: function() {
      return _sequential.sequentialSymlog;
    }
  });
  Object.defineProperty(exports, "scaleSqrt", {
    enumerable: true,
    get: function() {
      return _pow.sqrt;
    }
  });
  Object.defineProperty(exports, "scaleSymlog", {
    enumerable: true,
    get: function() {
      return _symlog.default;
    }
  });
  Object.defineProperty(exports, "scaleThreshold", {
    enumerable: true,
    get: function() {
      return _threshold.default;
    }
  });
  Object.defineProperty(exports, "scaleTime", {
    enumerable: true,
    get: function() {
      return _time.default;
    }
  });
  Object.defineProperty(exports, "scaleUtc", {
    enumerable: true,
    get: function() {
      return _utcTime.default;
    }
  });
  Object.defineProperty(exports, "tickFormat", {
    enumerable: true,
    get: function() {
      return _tickFormat.default;
    }
  });
  var _band = _interopRequireWildcard(require_band());
  var _identity = _interopRequireDefault(require_identity3());
  var _linear = _interopRequireDefault(require_linear());
  var _log = _interopRequireDefault(require_log());
  var _symlog = _interopRequireDefault(require_symlog());
  var _ordinal = _interopRequireWildcard(require_ordinal());
  var _pow = _interopRequireWildcard(require_pow());
  var _radial = _interopRequireDefault(require_radial());
  var _quantile = _interopRequireDefault(require_quantile2());
  var _quantize = _interopRequireDefault(require_quantize2());
  var _threshold = _interopRequireDefault(require_threshold());
  var _time = _interopRequireDefault(require_time());
  var _utcTime = _interopRequireDefault(require_utcTime());
  var _sequential = _interopRequireWildcard(require_sequential());
  var _sequentialQuantile = _interopRequireDefault(require_sequentialQuantile());
  var _diverging = _interopRequireWildcard(require_diverging());
  var _tickFormat = _interopRequireDefault(require_tickFormat());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
});

// node_modules/@visx/scale/lib/operators/domain.js
var require_domain = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = applyDomain2;
  function applyDomain2(scale, config2) {
    if (config2.domain) {
      if ("nice" in scale || "quantiles" in scale) {
        scale.domain(config2.domain);
      } else if ("padding" in scale) {
        scale.domain(config2.domain);
      } else {
        scale.domain(config2.domain);
      }
    }
  }
});

// node_modules/@visx/scale/lib/operators/range.js
var require_range2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = applyRange2;
  function applyRange2(scale, config2) {
    if (config2.range) {
      if ("padding" in scale) {
        scale.range(config2.range);
      } else {
        scale.range(config2.range);
      }
    }
  }
});

// node_modules/@visx/scale/lib/operators/align.js
var require_align = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = applyAlign2;
  function applyAlign2(scale, config2) {
    if ("align" in scale && "align" in config2 && typeof config2.align !== "undefined") {
      scale.align(config2.align);
    }
  }
});

// node_modules/@visx/scale/lib/operators/base.js
var require_base = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = applyBase2;
  function applyBase2(scale, config2) {
    if ("base" in scale && "base" in config2 && typeof config2.base !== "undefined") {
      scale.base(config2.base);
    }
  }
});

// node_modules/@visx/scale/lib/operators/clamp.js
var require_clamp = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = applyClamp2;
  function applyClamp2(scale, config2) {
    if ("clamp" in scale && "clamp" in config2 && typeof config2.clamp !== "undefined") {
      scale.clamp(config2.clamp);
    }
  }
});

// node_modules/@visx/scale/lib/operators/constant.js
var require_constant4 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = applyConstant2;
  function applyConstant2(scale, config2) {
    if ("constant" in scale && "constant" in config2 && typeof config2.constant !== "undefined") {
      scale.constant(config2.constant);
    }
  }
});

// node_modules/@visx/scale/lib/operators/exponent.js
var require_exponent2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = applyExponent2;
  function applyExponent2(scale, config2) {
    if ("exponent" in scale && "exponent" in config2 && typeof config2.exponent !== "undefined") {
      scale.exponent(config2.exponent);
    }
  }
});

// node_modules/@visx/scale/lib/utils/createColorInterpolator.js
var require_createColorInterpolator = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = createColorInterpolator2;
  var _d3Interpolate = require_src4();
  var interpolatorMap2 = {
    lab: _d3Interpolate.interpolateLab,
    hcl: _d3Interpolate.interpolateHcl,
    "hcl-long": _d3Interpolate.interpolateHclLong,
    hsl: _d3Interpolate.interpolateHsl,
    "hsl-long": _d3Interpolate.interpolateHslLong,
    cubehelix: _d3Interpolate.interpolateCubehelix,
    "cubehelix-long": _d3Interpolate.interpolateCubehelixLong,
    rgb: _d3Interpolate.interpolateRgb
  };
  function createColorInterpolator2(interpolate2) {
    switch (interpolate2) {
      case "lab":
      case "hcl":
      case "hcl-long":
      case "hsl":
      case "hsl-long":
      case "cubehelix":
      case "cubehelix-long":
      case "rgb":
        return interpolatorMap2[interpolate2];
      default:
    }
    var { type, gamma: gamma2 } = interpolate2;
    var interpolator = interpolatorMap2[type];
    return typeof gamma2 === "undefined" ? interpolator : interpolator.gamma(gamma2);
  }
});

// node_modules/@visx/scale/lib/operators/interpolate.js
var require_interpolate = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = applyInterpolate2;
  var _createColorInterpolator = _interopRequireDefault(require_createColorInterpolator());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function applyInterpolate2(scale, config2) {
    if ("interpolate" in config2 && "interpolate" in scale && typeof config2.interpolate !== "undefined") {
      var interpolator = (0, _createColorInterpolator.default)(config2.interpolate);
      scale.interpolate(interpolator);
    }
  }
});

// node_modules/@visx/scale/lib/utils/isUtcScale.js
var require_isUtcScale = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = isUtcScale2;
  var TEST_TIME2 = new Date(Date.UTC(2020, 1, 2, 3, 4, 5));
  var TEST_FORMAT2 = "%Y-%m-%d %H:%M";
  function isUtcScale2(scale) {
    var output = scale.tickFormat(1, TEST_FORMAT2)(TEST_TIME2);
    return output === "2020-02-02 03:04";
  }
});

// node_modules/@visx/scale/lib/operators/nice.js
var require_nice3 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = applyNice2;
  var _d3Time = require_src6();
  var _isUtcScale = _interopRequireDefault(require_isUtcScale());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var localTimeIntervals2 = {
    day: _d3Time.timeDay,
    hour: _d3Time.timeHour,
    minute: _d3Time.timeMinute,
    month: _d3Time.timeMonth,
    second: _d3Time.timeSecond,
    week: _d3Time.timeWeek,
    year: _d3Time.timeYear
  };
  var utcIntervals2 = {
    day: _d3Time.utcDay,
    hour: _d3Time.utcHour,
    minute: _d3Time.utcMinute,
    month: _d3Time.utcMonth,
    second: _d3Time.utcSecond,
    week: _d3Time.utcWeek,
    year: _d3Time.utcYear
  };
  function applyNice2(scale, config2) {
    if ("nice" in config2 && typeof config2.nice !== "undefined" && "nice" in scale) {
      var nice2 = config2.nice;
      if (typeof nice2 === "boolean") {
        if (nice2) {
          scale.nice();
        }
      } else if (typeof nice2 === "number") {
        scale.nice(nice2);
      } else {
        var timeScale = scale;
        var isUtc = (0, _isUtcScale.default)(timeScale);
        if (typeof nice2 === "string") {
          timeScale.nice(isUtc ? utcIntervals2[nice2] : localTimeIntervals2[nice2]);
        } else {
          var { interval, step } = nice2;
          var parsedInterval = (isUtc ? utcIntervals2[interval] : localTimeIntervals2[interval]).every(step);
          if (parsedInterval != null) {
            timeScale.nice(parsedInterval);
          }
        }
      }
    }
  }
});

// node_modules/@visx/scale/lib/operators/padding.js
var require_padding = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = applyPadding2;
  function applyPadding2(scale, config2) {
    if ("padding" in scale && "padding" in config2 && typeof config2.padding !== "undefined") {
      scale.padding(config2.padding);
    }
    if ("paddingInner" in scale && "paddingInner" in config2 && typeof config2.paddingInner !== "undefined") {
      scale.paddingInner(config2.paddingInner);
    }
    if ("paddingOuter" in scale && "paddingOuter" in config2 && typeof config2.paddingOuter !== "undefined") {
      scale.paddingOuter(config2.paddingOuter);
    }
  }
});

// node_modules/@visx/scale/lib/operators/reverse.js
var require_reverse2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = applyReverse2;
  function applyReverse2(scale, config2) {
    if (config2.reverse) {
      var reversedRange = scale.range().slice().reverse();
      if ("padding" in scale) {
        scale.range(reversedRange);
      } else {
        scale.range(reversedRange);
      }
    }
  }
});

// node_modules/@visx/scale/lib/operators/round.js
var require_round2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = applyRound2;
  var _d3Interpolate = require_src4();
  function applyRound2(scale, config2) {
    if ("round" in config2 && typeof config2.round !== "undefined") {
      if (config2.round && "interpolate" in config2 && typeof config2.interpolate !== "undefined") {
        console.warn("[visx/scale/applyRound] ignoring round: scale config contains round and interpolate. only applying interpolate. config:", config2);
      } else if ("round" in scale) {
        scale.round(config2.round);
      } else if ("interpolate" in scale && config2.round) {
        scale.interpolate(_d3Interpolate.interpolateRound);
      }
    }
  }
});

// node_modules/@visx/scale/lib/operators/unknown.js
var require_unknown = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = applyUnknown2;
  function applyUnknown2(scale, config2) {
    if ("unknown" in scale && "unknown" in config2 && typeof config2.unknown !== "undefined") {
      scale.unknown(config2.unknown);
    }
  }
});

// node_modules/@visx/scale/lib/operators/zero.js
var require_zero = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = applyZero2;
  function applyZero2(scale, config2) {
    if ("zero" in config2 && config2.zero === true) {
      var domain = scale.domain();
      var a = domain[0], b = domain[1];
      var isDescending = b < a;
      var _ref = isDescending ? [b, a] : [a, b], min = _ref[0], max = _ref[1];
      var domainWithZero = [Math.min(0, min), Math.max(0, max)];
      scale.domain(isDescending ? domainWithZero.reverse() : domainWithZero);
    }
  }
});

// node_modules/@visx/scale/lib/operators/scaleOperator.js
var require_scaleOperator = __commonJS((exports) => {
  exports.__esModule = true;
  exports.ALL_OPERATORS = undefined;
  exports.default = scaleOperator2;
  var _domain = _interopRequireDefault(require_domain());
  var _range = _interopRequireDefault(require_range2());
  var _align = _interopRequireDefault(require_align());
  var _base = _interopRequireDefault(require_base());
  var _clamp = _interopRequireDefault(require_clamp());
  var _constant = _interopRequireDefault(require_constant4());
  var _exponent = _interopRequireDefault(require_exponent2());
  var _interpolate = _interopRequireDefault(require_interpolate());
  var _nice = _interopRequireDefault(require_nice3());
  var _padding = _interopRequireDefault(require_padding());
  var _reverse = _interopRequireDefault(require_reverse2());
  var _round = _interopRequireDefault(require_round2());
  var _unknown = _interopRequireDefault(require_unknown());
  var _zero = _interopRequireDefault(require_zero());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var ALL_OPERATORS2 = [
    "domain",
    "nice",
    "zero",
    "interpolate",
    "round",
    "range",
    "reverse",
    "align",
    "base",
    "clamp",
    "constant",
    "exponent",
    "padding",
    "unknown"
  ];
  exports.ALL_OPERATORS = ALL_OPERATORS2;
  var operators2 = {
    domain: _domain.default,
    nice: _nice.default,
    zero: _zero.default,
    interpolate: _interpolate.default,
    round: _round.default,
    align: _align.default,
    base: _base.default,
    clamp: _clamp.default,
    constant: _constant.default,
    exponent: _exponent.default,
    padding: _padding.default,
    range: _range.default,
    reverse: _reverse.default,
    unknown: _unknown.default
  };
  function scaleOperator2() {
    for (var _len = arguments.length, ops = new Array(_len), _key = 0;_key < _len; _key++) {
      ops[_key] = arguments[_key];
    }
    var selection = new Set(ops);
    var selectedOps = ALL_OPERATORS2.filter(function(o) {
      return selection.has(o);
    });
    return function applyOperators(scale, config2) {
      if (typeof config2 !== "undefined") {
        selectedOps.forEach(function(op) {
          operators2[op](scale, config2);
        });
      }
      return scale;
    };
  }
});

// node_modules/@visx/scale/lib/scales/band.js
var require_band2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = createBandScale2;
  exports.updateBandScale = undefined;
  var _d3Scale = require_src8();
  var _scaleOperator = _interopRequireDefault(require_scaleOperator());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var updateBandScale2 = (0, _scaleOperator.default)("domain", "range", "reverse", "align", "padding", "round");
  exports.updateBandScale = updateBandScale2;
  function createBandScale2(config2) {
    return updateBandScale2((0, _d3Scale.scaleBand)(), config2);
  }
});

// node_modules/@visx/scale/lib/scales/point.js
var require_point = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = createPointScale2;
  exports.updatePointScale = undefined;
  var _d3Scale = require_src8();
  var _scaleOperator = _interopRequireDefault(require_scaleOperator());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var updatePointScale2 = (0, _scaleOperator.default)("domain", "range", "reverse", "align", "padding", "round");
  exports.updatePointScale = updatePointScale2;
  function createPointScale2(config2) {
    return updatePointScale2((0, _d3Scale.scalePoint)(), config2);
  }
});

// node_modules/@visx/scale/lib/scales/linear.js
var require_linear2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = createLinearScale2;
  exports.updateLinearScale = undefined;
  var _d3Scale = require_src8();
  var _scaleOperator = _interopRequireDefault(require_scaleOperator());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var updateLinearScale2 = (0, _scaleOperator.default)("domain", "range", "reverse", "clamp", "interpolate", "nice", "round", "zero");
  exports.updateLinearScale = updateLinearScale2;
  function createLinearScale2(config2) {
    return updateLinearScale2((0, _d3Scale.scaleLinear)(), config2);
  }
});

// node_modules/@visx/scale/lib/scales/radial.js
var require_radial2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = createRadialScale;
  exports.updateRadialScale = undefined;
  var _d3Scale = require_src8();
  var _scaleOperator = _interopRequireDefault(require_scaleOperator());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var updateRadialScale = (0, _scaleOperator.default)("domain", "range", "clamp", "nice", "round", "unknown");
  exports.updateRadialScale = updateRadialScale;
  function createRadialScale(config2) {
    return updateRadialScale((0, _d3Scale.scaleRadial)(), config2);
  }
});

// node_modules/@visx/scale/lib/scales/time.js
var require_time2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = createTimeScale2;
  exports.updateTimeScale = undefined;
  var _d3Scale = require_src8();
  var _scaleOperator = _interopRequireDefault(require_scaleOperator());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var updateTimeScale2 = (0, _scaleOperator.default)("domain", "range", "reverse", "clamp", "interpolate", "nice", "round");
  exports.updateTimeScale = updateTimeScale2;
  function createTimeScale2(config2) {
    return updateTimeScale2((0, _d3Scale.scaleTime)(), config2);
  }
});

// node_modules/@visx/scale/lib/scales/utc.js
var require_utc = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = createUtcScale2;
  exports.updateUtcScale = undefined;
  var _d3Scale = require_src8();
  var _scaleOperator = _interopRequireDefault(require_scaleOperator());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var updateUtcScale2 = (0, _scaleOperator.default)("domain", "range", "reverse", "clamp", "interpolate", "nice", "round");
  exports.updateUtcScale = updateUtcScale2;
  function createUtcScale2(config2) {
    return updateUtcScale2((0, _d3Scale.scaleUtc)(), config2);
  }
});

// node_modules/@visx/scale/lib/scales/log.js
var require_log2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = createLogScale2;
  exports.updateLogScale = undefined;
  var _d3Scale = require_src8();
  var _scaleOperator = _interopRequireDefault(require_scaleOperator());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var updateLogScale2 = (0, _scaleOperator.default)("domain", "range", "reverse", "base", "clamp", "interpolate", "nice", "round");
  exports.updateLogScale = updateLogScale2;
  function createLogScale2(config2) {
    return updateLogScale2((0, _d3Scale.scaleLog)(), config2);
  }
});

// node_modules/@visx/scale/lib/scales/power.js
var require_power = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = createPowScale2;
  exports.updatePowScale = undefined;
  var _d3Scale = require_src8();
  var _scaleOperator = _interopRequireDefault(require_scaleOperator());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var updatePowScale2 = (0, _scaleOperator.default)("domain", "range", "reverse", "clamp", "exponent", "interpolate", "nice", "round", "zero");
  exports.updatePowScale = updatePowScale2;
  function createPowScale2(config2) {
    return updatePowScale2((0, _d3Scale.scalePow)(), config2);
  }
});

// node_modules/@visx/scale/lib/scales/ordinal.js
var require_ordinal2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = createOrdinalScale2;
  exports.updateOrdinalScale = undefined;
  var _d3Scale = require_src8();
  var _scaleOperator = _interopRequireDefault(require_scaleOperator());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var updateOrdinalScale2 = (0, _scaleOperator.default)("domain", "range", "reverse", "unknown");
  exports.updateOrdinalScale = updateOrdinalScale2;
  function createOrdinalScale2(config2) {
    return updateOrdinalScale2((0, _d3Scale.scaleOrdinal)(), config2);
  }
});

// node_modules/@visx/scale/lib/scales/quantize.js
var require_quantize3 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = createQuantizeScale2;
  exports.updateQuantizeScale = undefined;
  var _d3Scale = require_src8();
  var _scaleOperator = _interopRequireDefault(require_scaleOperator());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var updateQuantizeScale2 = (0, _scaleOperator.default)("domain", "range", "reverse", "nice", "zero");
  exports.updateQuantizeScale = updateQuantizeScale2;
  function createQuantizeScale2(config2) {
    return updateQuantizeScale2((0, _d3Scale.scaleQuantize)(), config2);
  }
});

// node_modules/@visx/scale/lib/scales/quantile.js
var require_quantile3 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = createQuantileScale2;
  exports.updateQuantileScale = undefined;
  var _d3Scale = require_src8();
  var _scaleOperator = _interopRequireDefault(require_scaleOperator());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var updateQuantileScale2 = (0, _scaleOperator.default)("domain", "range", "reverse");
  exports.updateQuantileScale = updateQuantileScale2;
  function createQuantileScale2(config2) {
    return updateQuantileScale2((0, _d3Scale.scaleQuantile)(), config2);
  }
});

// node_modules/@visx/scale/lib/scales/symlog.js
var require_symlog2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = createSymlogScale2;
  exports.updateSymlogScale = undefined;
  var _d3Scale = require_src8();
  var _scaleOperator = _interopRequireDefault(require_scaleOperator());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var updateSymlogScale2 = (0, _scaleOperator.default)("domain", "range", "reverse", "clamp", "constant", "nice", "zero", "round");
  exports.updateSymlogScale = updateSymlogScale2;
  function createSymlogScale2(config2) {
    return updateSymlogScale2((0, _d3Scale.scaleSymlog)(), config2);
  }
});

// node_modules/@visx/scale/lib/scales/threshold.js
var require_threshold2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = createThresholdScale2;
  exports.updateThresholdScale = undefined;
  var _d3Scale = require_src8();
  var _scaleOperator = _interopRequireDefault(require_scaleOperator());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var updateThresholdScale2 = (0, _scaleOperator.default)("domain", "range", "reverse");
  exports.updateThresholdScale = updateThresholdScale2;
  function createThresholdScale2(config2) {
    return updateThresholdScale2((0, _d3Scale.scaleThreshold)(), config2);
  }
});

// node_modules/@visx/scale/lib/scales/squareRoot.js
var require_squareRoot = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = createSqrtScale2;
  exports.updateSqrtScale = undefined;
  var _d3Scale = require_src8();
  var _scaleOperator = _interopRequireDefault(require_scaleOperator());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var updateSqrtScale2 = (0, _scaleOperator.default)("domain", "range", "reverse", "clamp", "interpolate", "nice", "round", "zero");
  exports.updateSqrtScale = updateSqrtScale2;
  function createSqrtScale2(config2) {
    return updateSqrtScale2((0, _d3Scale.scaleSqrt)(), config2);
  }
});

// node_modules/@visx/scale/lib/createScale.js
var require_createScale = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _linear = _interopRequireDefault(require_linear2());
  var _log = _interopRequireDefault(require_log2());
  var _power = _interopRequireDefault(require_power());
  var _squareRoot = _interopRequireDefault(require_squareRoot());
  var _symlog = _interopRequireDefault(require_symlog2());
  var _time = _interopRequireDefault(require_time2());
  var _utc = _interopRequireDefault(require_utc());
  var _quantile = _interopRequireDefault(require_quantile3());
  var _quantize = _interopRequireDefault(require_quantize3());
  var _threshold = _interopRequireDefault(require_threshold2());
  var _ordinal = _interopRequireDefault(require_ordinal2());
  var _point = _interopRequireDefault(require_point());
  var _band = _interopRequireDefault(require_band2());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function createScale2(config2) {
    if (typeof config2 !== "undefined" && "type" in config2) {
      switch (config2.type) {
        case "linear":
          return (0, _linear.default)(config2);
        case "log":
          return (0, _log.default)(config2);
        case "pow":
          return (0, _power.default)(config2);
        case "sqrt":
          return (0, _squareRoot.default)(config2);
        case "symlog":
          return (0, _symlog.default)(config2);
        case "time":
          return (0, _time.default)(config2);
        case "utc":
          return (0, _utc.default)(config2);
        case "quantile":
          return (0, _quantile.default)(config2);
        case "quantize":
          return (0, _quantize.default)(config2);
        case "threshold":
          return (0, _threshold.default)(config2);
        case "ordinal":
          return (0, _ordinal.default)(config2);
        case "point":
          return (0, _point.default)(config2);
        case "band":
          return (0, _band.default)(config2);
        default:
      }
    }
    return (0, _linear.default)(config2);
  }
  var _default = createScale2;
  exports.default = _default;
});

// node_modules/@visx/scale/lib/updateScale.js
var require_updateScale = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _scaleOperator = _interopRequireWildcard(require_scaleOperator());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  var applyAllOperators = _scaleOperator.default.apply(undefined, _scaleOperator.ALL_OPERATORS);
  function updateScale(scale, config2) {
    return applyAllOperators(scale.copy(), config2);
  }
  var _default = updateScale;
  exports.default = _default;
});

// node_modules/@visx/scale/lib/utils/inferScaleType.js
var require_inferScaleType = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = inferScaleType;
  var _isUtcScale = _interopRequireDefault(require_isUtcScale());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function inferScaleType(scale) {
    if ("paddingInner" in scale) {
      return "band";
    }
    if ("padding" in scale) {
      return "point";
    }
    if ("quantiles" in scale) {
      return "quantile";
    }
    if ("base" in scale) {
      return "log";
    }
    if ("exponent" in scale) {
      return scale.exponent() === 0.5 ? "sqrt" : "pow";
    }
    if ("constant" in scale) {
      return "symlog";
    }
    if ("clamp" in scale) {
      if (scale.ticks()[0] instanceof Date) {
        return (0, _isUtcScale.default)(scale) ? "utc" : "time";
      }
      return "linear";
    }
    if ("nice" in scale) {
      return "quantize";
    }
    if ("invertExtent" in scale) {
      return "threshold";
    }
    return "ordinal";
  }
});

// node_modules/@visx/scale/lib/utils/coerceNumber.js
var require_coerceNumber = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = coerceNumber;
  function coerceNumber(val) {
    if ((typeof val === "function" || typeof val === "object" && !!val) && "valueOf" in val) {
      var num = val.valueOf();
      if (typeof num === "number")
        return num;
    }
    return val;
  }
});

// node_modules/@visx/scale/lib/utils/getTicks.js
var require_getTicks = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = getTicks;
  function getTicks(scale, numTicks) {
    var s = scale;
    if ("ticks" in s) {
      return s.ticks(numTicks);
    }
    return s.domain().filter(function(_, index, arr) {
      return numTicks == null || arr.length <= numTicks || index % Math.round((arr.length - 1) / numTicks) === 0;
    });
  }
});

// node_modules/@visx/scale/lib/utils/toString.js
var require_toString = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = toString;
  function toString(x) {
    return x == null ? undefined : x.toString();
  }
});

// node_modules/@visx/scale/lib/utils/scaleCanBeZeroed.js
var require_scaleCanBeZeroed = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = scaleCanBeZeroed2;
  var zeroableScaleTypes2 = new Set(["linear", "pow", "quantize", "sqrt", "symlog"]);
  function scaleCanBeZeroed2(scaleConfig) {
    return zeroableScaleTypes2.has(scaleConfig.type);
  }
});

// node_modules/@visx/scale/lib/types/Base.js
var require_Base = __commonJS((exports) => {
  exports.__esModule = true;
});

// node_modules/@visx/scale/lib/types/Nice.js
var require_Nice = __commonJS((exports) => {
  exports.__esModule = true;
});

// node_modules/@visx/scale/lib/types/Scale.js
var require_Scale = __commonJS((exports) => {
  exports.__esModule = true;
});

// node_modules/@visx/scale/lib/types/ScaleConfig.js
var require_ScaleConfig = __commonJS((exports) => {
  exports.__esModule = true;
});

// node_modules/@visx/scale/lib/types/ScaleInterpolate.js
var require_ScaleInterpolate = __commonJS((exports) => {
  exports.__esModule = true;
});

// node_modules/@visx/scale/lib/index.js
var require_lib2 = __commonJS((exports) => {
  exports.__esModule = true;
  var _exportNames = {
    scaleBand: true,
    scalePoint: true,
    scaleLinear: true,
    scaleRadial: true,
    scaleTime: true,
    scaleUtc: true,
    scaleLog: true,
    scalePower: true,
    scaleOrdinal: true,
    scaleQuantize: true,
    scaleQuantile: true,
    scaleSymlog: true,
    scaleThreshold: true,
    scaleSqrt: true,
    createScale: true,
    updateScale: true,
    inferScaleType: true,
    coerceNumber: true,
    getTicks: true,
    toString: true,
    scaleCanBeZeroed: true
  };
  exports.updateScale = exports.toString = exports.scaleUtc = exports.scaleTime = exports.scaleThreshold = exports.scaleSymlog = exports.scaleSqrt = exports.scaleRadial = exports.scaleQuantize = exports.scaleQuantile = exports.scalePower = exports.scalePoint = exports.scaleOrdinal = exports.scaleLog = exports.scaleLinear = exports.scaleCanBeZeroed = exports.scaleBand = exports.inferScaleType = exports.getTicks = exports.createScale = exports.coerceNumber = undefined;
  var _band = _interopRequireDefault(require_band2());
  exports.scaleBand = _band.default;
  var _point = _interopRequireDefault(require_point());
  exports.scalePoint = _point.default;
  var _linear = _interopRequireDefault(require_linear2());
  exports.scaleLinear = _linear.default;
  var _radial = _interopRequireDefault(require_radial2());
  exports.scaleRadial = _radial.default;
  var _time = _interopRequireDefault(require_time2());
  exports.scaleTime = _time.default;
  var _utc = _interopRequireDefault(require_utc());
  exports.scaleUtc = _utc.default;
  var _log = _interopRequireDefault(require_log2());
  exports.scaleLog = _log.default;
  var _power = _interopRequireDefault(require_power());
  exports.scalePower = _power.default;
  var _ordinal = _interopRequireDefault(require_ordinal2());
  exports.scaleOrdinal = _ordinal.default;
  var _quantize = _interopRequireDefault(require_quantize3());
  exports.scaleQuantize = _quantize.default;
  var _quantile = _interopRequireDefault(require_quantile3());
  exports.scaleQuantile = _quantile.default;
  var _symlog = _interopRequireDefault(require_symlog2());
  exports.scaleSymlog = _symlog.default;
  var _threshold = _interopRequireDefault(require_threshold2());
  exports.scaleThreshold = _threshold.default;
  var _squareRoot = _interopRequireDefault(require_squareRoot());
  exports.scaleSqrt = _squareRoot.default;
  var _createScale = _interopRequireDefault(require_createScale());
  exports.createScale = _createScale.default;
  var _updateScale = _interopRequireDefault(require_updateScale());
  exports.updateScale = _updateScale.default;
  var _inferScaleType = _interopRequireDefault(require_inferScaleType());
  exports.inferScaleType = _inferScaleType.default;
  var _coerceNumber = _interopRequireDefault(require_coerceNumber());
  exports.coerceNumber = _coerceNumber.default;
  var _getTicks = _interopRequireDefault(require_getTicks());
  exports.getTicks = _getTicks.default;
  var _toString = _interopRequireDefault(require_toString());
  exports.toString = _toString.default;
  var _scaleCanBeZeroed = _interopRequireDefault(require_scaleCanBeZeroed());
  exports.scaleCanBeZeroed = _scaleCanBeZeroed.default;
  var _Base = require_Base();
  Object.keys(_Base).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports && exports[key] === _Base[key])
      return;
    exports[key] = _Base[key];
  });
  var _Nice = require_Nice();
  Object.keys(_Nice).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports && exports[key] === _Nice[key])
      return;
    exports[key] = _Nice[key];
  });
  var _Scale = require_Scale();
  Object.keys(_Scale).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports && exports[key] === _Scale[key])
      return;
    exports[key] = _Scale[key];
  });
  var _ScaleConfig = require_ScaleConfig();
  Object.keys(_ScaleConfig).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports && exports[key] === _ScaleConfig[key])
      return;
    exports[key] = _ScaleConfig[key];
  });
  var _ScaleInterpolate = require_ScaleInterpolate();
  Object.keys(_ScaleInterpolate).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports && exports[key] === _ScaleInterpolate[key])
      return;
    exports[key] = _ScaleInterpolate[key];
  });
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
});

// node_modules/d3-path/dist/d3-path.js
var require_d3_path = __commonJS((exports, module) => {
  (function(global2, factory) {
    typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = global2 || self, factory(global2.d3 = global2.d3 || {}));
  })(exports, function(exports2) {
    var pi = Math.PI, tau = 2 * pi, epsilon = 0.000001, tauEpsilon = tau - epsilon;
    function Path() {
      this._x0 = this._y0 = this._x1 = this._y1 = null;
      this._ = "";
    }
    function path() {
      return new Path;
    }
    Path.prototype = path.prototype = {
      constructor: Path,
      moveTo: function(x, y) {
        this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
      },
      closePath: function() {
        if (this._x1 !== null) {
          this._x1 = this._x0, this._y1 = this._y0;
          this._ += "Z";
        }
      },
      lineTo: function(x, y) {
        this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
      },
      quadraticCurveTo: function(x1, y1, x, y) {
        this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
      },
      bezierCurveTo: function(x1, y1, x2, y2, x, y) {
        this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
      },
      arcTo: function(x1, y1, x2, y2, r) {
        x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
        var x0 = this._x1, y0 = this._y1, x21 = x2 - x1, y21 = y2 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
        if (r < 0)
          throw new Error("negative radius: " + r);
        if (this._x1 === null) {
          this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
        } else if (!(l01_2 > epsilon))
          ;
        else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
          this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
        } else {
          var x20 = x2 - x0, y20 = y2 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
          if (Math.abs(t01 - 1) > epsilon) {
            this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
          }
          this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
        }
      },
      arc: function(x, y, r, a0, a1, ccw) {
        x = +x, y = +y, r = +r, ccw = !!ccw;
        var dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x + dx, y0 = y + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
        if (r < 0)
          throw new Error("negative radius: " + r);
        if (this._x1 === null) {
          this._ += "M" + x0 + "," + y0;
        } else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
          this._ += "L" + x0 + "," + y0;
        }
        if (!r)
          return;
        if (da < 0)
          da = da % tau + tau;
        if (da > tauEpsilon) {
          this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
        } else if (da > epsilon) {
          this._ += "A" + r + "," + r + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
        }
      },
      rect: function(x, y, w, h) {
        this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + +w + "v" + +h + "h" + -w + "Z";
      },
      toString: function() {
        return this._;
      }
    };
    exports2.path = path;
    Object.defineProperty(exports2, "__esModule", { value: true });
  });
});

// node_modules/@visx/shape/node_modules/d3-shape/dist/d3-shape.js
var require_d3_shape = __commonJS((exports, module) => {
  (function(global2, factory) {
    typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_d3_path()) : typeof define === "function" && define.amd ? define(["exports", "d3-path"], factory) : (global2 = global2 || self, factory(global2.d3 = global2.d3 || {}, global2.d3));
  })(exports, function(exports2, d3Path) {
    function constant(x2) {
      return function constant() {
        return x2;
      };
    }
    var abs = Math.abs;
    var atan2 = Math.atan2;
    var cos = Math.cos;
    var max = Math.max;
    var min = Math.min;
    var sin = Math.sin;
    var sqrt2 = Math.sqrt;
    var epsilon = 0.000000000001;
    var pi = Math.PI;
    var halfPi = pi / 2;
    var tau = 2 * pi;
    function acos(x2) {
      return x2 > 1 ? 0 : x2 < -1 ? pi : Math.acos(x2);
    }
    function asin(x2) {
      return x2 >= 1 ? halfPi : x2 <= -1 ? -halfPi : Math.asin(x2);
    }
    function arcInnerRadius(d) {
      return d.innerRadius;
    }
    function arcOuterRadius(d) {
      return d.outerRadius;
    }
    function arcStartAngle(d) {
      return d.startAngle;
    }
    function arcEndAngle(d) {
      return d.endAngle;
    }
    function arcPadAngle(d) {
      return d && d.padAngle;
    }
    function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
      var x10 = x1 - x0, y10 = y1 - y0, x32 = x3 - x2, y32 = y3 - y2, t = y32 * x10 - x32 * y10;
      if (t * t < epsilon)
        return;
      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
      return [x0 + t * x10, y0 + t * y10];
    }
    function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
      var x01 = x0 - x1, y01 = y0 - y1, lo = (cw ? rc : -rc) / sqrt2(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x11 = x0 + ox, y11 = y0 + oy, x10 = x1 + ox, y10 = y1 + oy, x00 = (x11 + x10) / 2, y00 = (y11 + y10) / 2, dx = x10 - x11, dy = y10 - y11, d2 = dx * dx + dy * dy, r = r1 - rc, D3 = x11 * y10 - x10 * y11, d = (dy < 0 ? -1 : 1) * sqrt2(max(0, r * r * d2 - D3 * D3)), cx0 = (D3 * dy - dx * d) / d2, cy0 = (-D3 * dx - dy * d) / d2, cx1 = (D3 * dy + dx * d) / d2, cy1 = (-D3 * dx + dy * d) / d2, dx0 = cx0 - x00, dy0 = cy0 - y00, dx1 = cx1 - x00, dy1 = cy1 - y00;
      if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1)
        cx0 = cx1, cy0 = cy1;
      return {
        cx: cx0,
        cy: cy0,
        x01: -ox,
        y01: -oy,
        x11: cx0 * (r1 / r - 1),
        y11: cy0 * (r1 / r - 1)
      };
    }
    function arc() {
      var innerRadius = arcInnerRadius, outerRadius = arcOuterRadius, cornerRadius = constant(0), padRadius = null, startAngle = arcStartAngle, endAngle = arcEndAngle, padAngle = arcPadAngle, context = null;
      function arc2() {
        var buffer, r, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - halfPi, a1 = endAngle.apply(this, arguments) - halfPi, da = abs(a1 - a0), cw = a1 > a0;
        if (!context)
          context = buffer = d3Path.path();
        if (r1 < r0)
          r = r1, r1 = r0, r0 = r;
        if (!(r1 > epsilon))
          context.moveTo(0, 0);
        else if (da > tau - epsilon) {
          context.moveTo(r1 * cos(a0), r1 * sin(a0));
          context.arc(0, 0, r1, a0, a1, !cw);
          if (r0 > epsilon) {
            context.moveTo(r0 * cos(a1), r0 * sin(a1));
            context.arc(0, 0, r0, a1, a0, cw);
          }
        } else {
          var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da, da1 = da, ap = padAngle.apply(this, arguments) / 2, rp = ap > epsilon && (padRadius ? +padRadius.apply(this, arguments) : sqrt2(r0 * r0 + r1 * r1)), rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t03, t13;
          if (rp > epsilon) {
            var p0 = asin(rp / r0 * sin(ap)), p1 = asin(rp / r1 * sin(ap));
            if ((da0 -= p0 * 2) > epsilon)
              p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;
            else
              da0 = 0, a00 = a10 = (a0 + a1) / 2;
            if ((da1 -= p1 * 2) > epsilon)
              p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;
            else
              da1 = 0, a01 = a11 = (a0 + a1) / 2;
          }
          var x01 = r1 * cos(a01), y01 = r1 * sin(a01), x10 = r0 * cos(a10), y10 = r0 * sin(a10);
          if (rc > epsilon) {
            var x11 = r1 * cos(a11), y11 = r1 * sin(a11), x00 = r0 * cos(a00), y00 = r0 * sin(a00), oc;
            if (da < pi && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
              var ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt2(ax * ax + ay * ay) * sqrt2(bx * bx + by * by))) / 2), lc = sqrt2(oc[0] * oc[0] + oc[1] * oc[1]);
              rc0 = min(rc, (r0 - lc) / (kc - 1));
              rc1 = min(rc, (r1 - lc) / (kc + 1));
            }
          }
          if (!(da1 > epsilon))
            context.moveTo(x01, y01);
          else if (rc1 > epsilon) {
            t03 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
            t13 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
            context.moveTo(t03.cx + t03.x01, t03.cy + t03.y01);
            if (rc1 < rc)
              context.arc(t03.cx, t03.cy, rc1, atan2(t03.y01, t03.x01), atan2(t13.y01, t13.x01), !cw);
            else {
              context.arc(t03.cx, t03.cy, rc1, atan2(t03.y01, t03.x01), atan2(t03.y11, t03.x11), !cw);
              context.arc(0, 0, r1, atan2(t03.cy + t03.y11, t03.cx + t03.x11), atan2(t13.cy + t13.y11, t13.cx + t13.x11), !cw);
              context.arc(t13.cx, t13.cy, rc1, atan2(t13.y11, t13.x11), atan2(t13.y01, t13.x01), !cw);
            }
          } else
            context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);
          if (!(r0 > epsilon) || !(da0 > epsilon))
            context.lineTo(x10, y10);
          else if (rc0 > epsilon) {
            t03 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
            t13 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
            context.lineTo(t03.cx + t03.x01, t03.cy + t03.y01);
            if (rc0 < rc)
              context.arc(t03.cx, t03.cy, rc0, atan2(t03.y01, t03.x01), atan2(t13.y01, t13.x01), !cw);
            else {
              context.arc(t03.cx, t03.cy, rc0, atan2(t03.y01, t03.x01), atan2(t03.y11, t03.x11), !cw);
              context.arc(0, 0, r0, atan2(t03.cy + t03.y11, t03.cx + t03.x11), atan2(t13.cy + t13.y11, t13.cx + t13.x11), cw);
              context.arc(t13.cx, t13.cy, rc0, atan2(t13.y11, t13.x11), atan2(t13.y01, t13.x01), !cw);
            }
          } else
            context.arc(0, 0, r0, a10, a00, cw);
        }
        context.closePath();
        if (buffer)
          return context = null, buffer + "" || null;
      }
      arc2.centroid = function() {
        var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a2 = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;
        return [cos(a2) * r, sin(a2) * r];
      };
      arc2.innerRadius = function(_) {
        return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant(+_), arc2) : innerRadius;
      };
      arc2.outerRadius = function(_) {
        return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant(+_), arc2) : outerRadius;
      };
      arc2.cornerRadius = function(_) {
        return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant(+_), arc2) : cornerRadius;
      };
      arc2.padRadius = function(_) {
        return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant(+_), arc2) : padRadius;
      };
      arc2.startAngle = function(_) {
        return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), arc2) : startAngle;
      };
      arc2.endAngle = function(_) {
        return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), arc2) : endAngle;
      };
      arc2.padAngle = function(_) {
        return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), arc2) : padAngle;
      };
      arc2.context = function(_) {
        return arguments.length ? (context = _ == null ? null : _, arc2) : context;
      };
      return arc2;
    }
    function Linear(context) {
      this._context = context;
    }
    Linear.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
            break;
          case 1:
            this._point = 2;
          default:
            this._context.lineTo(x2, y2);
            break;
        }
      }
    };
    function curveLinear(context) {
      return new Linear(context);
    }
    function x(p2) {
      return p2[0];
    }
    function y(p2) {
      return p2[1];
    }
    function line() {
      var x$1 = x, y$1 = y, defined = constant(true), context = null, curve = curveLinear, output = null;
      function line2(data) {
        var i, n = data.length, d, defined0 = false, buffer;
        if (context == null)
          output = curve(buffer = d3Path.path());
        for (i = 0;i <= n; ++i) {
          if (!(i < n && defined(d = data[i], i, data)) === defined0) {
            if (defined0 = !defined0)
              output.lineStart();
            else
              output.lineEnd();
          }
          if (defined0)
            output.point(+x$1(d, i, data), +y$1(d, i, data));
        }
        if (buffer)
          return output = null, buffer + "" || null;
      }
      line2.x = function(_) {
        return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant(+_), line2) : x$1;
      };
      line2.y = function(_) {
        return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant(+_), line2) : y$1;
      };
      line2.defined = function(_) {
        return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), line2) : defined;
      };
      line2.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), line2) : curve;
      };
      line2.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line2) : context;
      };
      return line2;
    }
    function area() {
      var x0 = x, x1 = null, y0 = constant(0), y1 = y, defined = constant(true), context = null, curve = curveLinear, output = null;
      function area2(data) {
        var i, j2, k3, n = data.length, d, defined0 = false, buffer, x0z = new Array(n), y0z = new Array(n);
        if (context == null)
          output = curve(buffer = d3Path.path());
        for (i = 0;i <= n; ++i) {
          if (!(i < n && defined(d = data[i], i, data)) === defined0) {
            if (defined0 = !defined0) {
              j2 = i;
              output.areaStart();
              output.lineStart();
            } else {
              output.lineEnd();
              output.lineStart();
              for (k3 = i - 1;k3 >= j2; --k3) {
                output.point(x0z[k3], y0z[k3]);
              }
              output.lineEnd();
              output.areaEnd();
            }
          }
          if (defined0) {
            x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
            output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
          }
        }
        if (buffer)
          return output = null, buffer + "" || null;
      }
      function arealine() {
        return line().defined(defined).curve(curve).context(context);
      }
      area2.x = function(_) {
        return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), x1 = null, area2) : x0;
      };
      area2.x0 = function(_) {
        return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), area2) : x0;
      };
      area2.x1 = function(_) {
        return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area2) : x1;
      };
      area2.y = function(_) {
        return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), y1 = null, area2) : y0;
      };
      area2.y0 = function(_) {
        return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), area2) : y0;
      };
      area2.y1 = function(_) {
        return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area2) : y1;
      };
      area2.lineX0 = area2.lineY0 = function() {
        return arealine().x(x0).y(y0);
      };
      area2.lineY1 = function() {
        return arealine().x(x0).y(y1);
      };
      area2.lineX1 = function() {
        return arealine().x(x1).y(y0);
      };
      area2.defined = function(_) {
        return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), area2) : defined;
      };
      area2.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), area2) : curve;
      };
      area2.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area2) : context;
      };
      return area2;
    }
    function descending2(a2, b) {
      return b < a2 ? -1 : b > a2 ? 1 : b >= a2 ? 0 : NaN;
    }
    function identity2(d) {
      return d;
    }
    function pie() {
      var value = identity2, sortValues = descending2, sort = null, startAngle = constant(0), endAngle = constant(tau), padAngle = constant(0);
      function pie2(data) {
        var i, n = data.length, j2, k3, sum2 = 0, index = new Array(n), arcs = new Array(n), a0 = +startAngle.apply(this, arguments), da = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)), a1, p2 = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)), pa = p2 * (da < 0 ? -1 : 1), v;
        for (i = 0;i < n; ++i) {
          if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
            sum2 += v;
          }
        }
        if (sortValues != null)
          index.sort(function(i2, j3) {
            return sortValues(arcs[i2], arcs[j3]);
          });
        else if (sort != null)
          index.sort(function(i2, j3) {
            return sort(data[i2], data[j3]);
          });
        for (i = 0, k3 = sum2 ? (da - n * pa) / sum2 : 0;i < n; ++i, a0 = a1) {
          j2 = index[i], v = arcs[j2], a1 = a0 + (v > 0 ? v * k3 : 0) + pa, arcs[j2] = {
            data: data[j2],
            index: i,
            value: v,
            startAngle: a0,
            endAngle: a1,
            padAngle: p2
          };
        }
        return arcs;
      }
      pie2.value = function(_) {
        return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), pie2) : value;
      };
      pie2.sortValues = function(_) {
        return arguments.length ? (sortValues = _, sort = null, pie2) : sortValues;
      };
      pie2.sort = function(_) {
        return arguments.length ? (sort = _, sortValues = null, pie2) : sort;
      };
      pie2.startAngle = function(_) {
        return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), pie2) : startAngle;
      };
      pie2.endAngle = function(_) {
        return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), pie2) : endAngle;
      };
      pie2.padAngle = function(_) {
        return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), pie2) : padAngle;
      };
      return pie2;
    }
    var curveRadialLinear = curveRadial(curveLinear);
    function Radial(curve) {
      this._curve = curve;
    }
    Radial.prototype = {
      areaStart: function() {
        this._curve.areaStart();
      },
      areaEnd: function() {
        this._curve.areaEnd();
      },
      lineStart: function() {
        this._curve.lineStart();
      },
      lineEnd: function() {
        this._curve.lineEnd();
      },
      point: function(a2, r) {
        this._curve.point(r * Math.sin(a2), r * -Math.cos(a2));
      }
    };
    function curveRadial(curve) {
      function radial(context) {
        return new Radial(curve(context));
      }
      radial._curve = curve;
      return radial;
    }
    function lineRadial(l) {
      var c6 = l.curve;
      l.angle = l.x, delete l.x;
      l.radius = l.y, delete l.y;
      l.curve = function(_) {
        return arguments.length ? c6(curveRadial(_)) : c6()._curve;
      };
      return l;
    }
    function lineRadial$1() {
      return lineRadial(line().curve(curveRadialLinear));
    }
    function areaRadial() {
      var a2 = area().curve(curveRadialLinear), c6 = a2.curve, x0 = a2.lineX0, x1 = a2.lineX1, y0 = a2.lineY0, y1 = a2.lineY1;
      a2.angle = a2.x, delete a2.x;
      a2.startAngle = a2.x0, delete a2.x0;
      a2.endAngle = a2.x1, delete a2.x1;
      a2.radius = a2.y, delete a2.y;
      a2.innerRadius = a2.y0, delete a2.y0;
      a2.outerRadius = a2.y1, delete a2.y1;
      a2.lineStartAngle = function() {
        return lineRadial(x0());
      }, delete a2.lineX0;
      a2.lineEndAngle = function() {
        return lineRadial(x1());
      }, delete a2.lineX1;
      a2.lineInnerRadius = function() {
        return lineRadial(y0());
      }, delete a2.lineY0;
      a2.lineOuterRadius = function() {
        return lineRadial(y1());
      }, delete a2.lineY1;
      a2.curve = function(_) {
        return arguments.length ? c6(curveRadial(_)) : c6()._curve;
      };
      return a2;
    }
    function pointRadial(x2, y2) {
      return [(y2 = +y2) * Math.cos(x2 -= Math.PI / 2), y2 * Math.sin(x2)];
    }
    var slice = Array.prototype.slice;
    function linkSource(d) {
      return d.source;
    }
    function linkTarget(d) {
      return d.target;
    }
    function link(curve) {
      var source = linkSource, target = linkTarget, x$1 = x, y$1 = y, context = null;
      function link2() {
        var buffer, argv = slice.call(arguments), s2 = source.apply(this, argv), t = target.apply(this, argv);
        if (!context)
          context = buffer = d3Path.path();
        curve(context, +x$1.apply(this, (argv[0] = s2, argv)), +y$1.apply(this, argv), +x$1.apply(this, (argv[0] = t, argv)), +y$1.apply(this, argv));
        if (buffer)
          return context = null, buffer + "" || null;
      }
      link2.source = function(_) {
        return arguments.length ? (source = _, link2) : source;
      };
      link2.target = function(_) {
        return arguments.length ? (target = _, link2) : target;
      };
      link2.x = function(_) {
        return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant(+_), link2) : x$1;
      };
      link2.y = function(_) {
        return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant(+_), link2) : y$1;
      };
      link2.context = function(_) {
        return arguments.length ? (context = _ == null ? null : _, link2) : context;
      };
      return link2;
    }
    function curveHorizontal(context, x0, y0, x1, y1) {
      context.moveTo(x0, y0);
      context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);
    }
    function curveVertical(context, x0, y0, x1, y1) {
      context.moveTo(x0, y0);
      context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);
    }
    function curveRadial$1(context, x0, y0, x1, y1) {
      var p0 = pointRadial(x0, y0), p1 = pointRadial(x0, y0 = (y0 + y1) / 2), p2 = pointRadial(x1, y0), p3 = pointRadial(x1, y1);
      context.moveTo(p0[0], p0[1]);
      context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);
    }
    function linkHorizontal() {
      return link(curveHorizontal);
    }
    function linkVertical() {
      return link(curveVertical);
    }
    function linkRadial() {
      var l = link(curveRadial$1);
      l.angle = l.x, delete l.x;
      l.radius = l.y, delete l.y;
      return l;
    }
    var circle = {
      draw: function(context, size) {
        var r = Math.sqrt(size / pi);
        context.moveTo(r, 0);
        context.arc(0, 0, r, 0, tau);
      }
    };
    var cross = {
      draw: function(context, size) {
        var r = Math.sqrt(size / 5) / 2;
        context.moveTo(-3 * r, -r);
        context.lineTo(-r, -r);
        context.lineTo(-r, -3 * r);
        context.lineTo(r, -3 * r);
        context.lineTo(r, -r);
        context.lineTo(3 * r, -r);
        context.lineTo(3 * r, r);
        context.lineTo(r, r);
        context.lineTo(r, 3 * r);
        context.lineTo(-r, 3 * r);
        context.lineTo(-r, r);
        context.lineTo(-3 * r, r);
        context.closePath();
      }
    };
    var tan30 = Math.sqrt(1 / 3), tan30_2 = tan30 * 2;
    var diamond = {
      draw: function(context, size) {
        var y2 = Math.sqrt(size / tan30_2), x2 = y2 * tan30;
        context.moveTo(0, -y2);
        context.lineTo(x2, 0);
        context.lineTo(0, y2);
        context.lineTo(-x2, 0);
        context.closePath();
      }
    };
    var ka = 0.8908130915292852, kr = Math.sin(pi / 10) / Math.sin(7 * pi / 10), kx = Math.sin(tau / 10) * kr, ky = -Math.cos(tau / 10) * kr;
    var star = {
      draw: function(context, size) {
        var r = Math.sqrt(size * ka), x2 = kx * r, y2 = ky * r;
        context.moveTo(0, -r);
        context.lineTo(x2, y2);
        for (var i = 1;i < 5; ++i) {
          var a2 = tau * i / 5, c6 = Math.cos(a2), s2 = Math.sin(a2);
          context.lineTo(s2 * r, -c6 * r);
          context.lineTo(c6 * x2 - s2 * y2, s2 * x2 + c6 * y2);
        }
        context.closePath();
      }
    };
    var square = {
      draw: function(context, size) {
        var w = Math.sqrt(size), x2 = -w / 2;
        context.rect(x2, x2, w, w);
      }
    };
    var sqrt3 = Math.sqrt(3);
    var triangle = {
      draw: function(context, size) {
        var y2 = -Math.sqrt(size / (sqrt3 * 3));
        context.moveTo(0, y2 * 2);
        context.lineTo(-sqrt3 * y2, -y2);
        context.lineTo(sqrt3 * y2, -y2);
        context.closePath();
      }
    };
    var c = -0.5, s = Math.sqrt(3) / 2, k2 = 1 / Math.sqrt(12), a = (k2 / 2 + 1) * 3;
    var wye = {
      draw: function(context, size) {
        var r = Math.sqrt(size / a), x0 = r / 2, y0 = r * k2, x1 = x0, y1 = r * k2 + r, x2 = -x1, y2 = y1;
        context.moveTo(x0, y0);
        context.lineTo(x1, y1);
        context.lineTo(x2, y2);
        context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
        context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
        context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
        context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
        context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
        context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
        context.closePath();
      }
    };
    var symbols = [
      circle,
      cross,
      diamond,
      square,
      star,
      triangle,
      wye
    ];
    function symbol() {
      var type = constant(circle), size = constant(64), context = null;
      function symbol2() {
        var buffer;
        if (!context)
          context = buffer = d3Path.path();
        type.apply(this, arguments).draw(context, +size.apply(this, arguments));
        if (buffer)
          return context = null, buffer + "" || null;
      }
      symbol2.type = function(_) {
        return arguments.length ? (type = typeof _ === "function" ? _ : constant(_), symbol2) : type;
      };
      symbol2.size = function(_) {
        return arguments.length ? (size = typeof _ === "function" ? _ : constant(+_), symbol2) : size;
      };
      symbol2.context = function(_) {
        return arguments.length ? (context = _ == null ? null : _, symbol2) : context;
      };
      return symbol2;
    }
    function noop2() {
    }
    function point2(that, x2, y2) {
      that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x2) / 6, (that._y0 + 4 * that._y1 + y2) / 6);
    }
    function Basis(context) {
      this._context = context;
    }
    Basis.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 3:
            point2(this, this._x1, this._y1);
          case 2:
            this._context.lineTo(this._x1, this._y1);
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
          default:
            point2(this, x2, y2);
            break;
        }
        this._x0 = this._x1, this._x1 = x2;
        this._y0 = this._y1, this._y1 = y2;
      }
    };
    function basis2(context) {
      return new Basis(context);
    }
    function BasisClosed(context) {
      this._context = context;
    }
    BasisClosed.prototype = {
      areaStart: noop2,
      areaEnd: noop2,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x2, this._y2);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
            this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x2, this._y2);
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            break;
          }
        }
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._x2 = x2, this._y2 = y2;
            break;
          case 1:
            this._point = 2;
            this._x3 = x2, this._y3 = y2;
            break;
          case 2:
            this._point = 3;
            this._x4 = x2, this._y4 = y2;
            this._context.moveTo((this._x0 + 4 * this._x1 + x2) / 6, (this._y0 + 4 * this._y1 + y2) / 6);
            break;
          default:
            point2(this, x2, y2);
            break;
        }
        this._x0 = this._x1, this._x1 = x2;
        this._y0 = this._y1, this._y1 = y2;
      }
    };
    function basisClosed(context) {
      return new BasisClosed(context);
    }
    function BasisOpen(context) {
      this._context = context;
    }
    BasisOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0:
            this._point = 1;
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            var x0 = (this._x0 + 4 * this._x1 + x2) / 6, y0 = (this._y0 + 4 * this._y1 + y2) / 6;
            this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
            break;
          case 3:
            this._point = 4;
          default:
            point2(this, x2, y2);
            break;
        }
        this._x0 = this._x1, this._x1 = x2;
        this._y0 = this._y1, this._y1 = y2;
      }
    };
    function basisOpen(context) {
      return new BasisOpen(context);
    }
    function Bundle(context, beta) {
      this._basis = new Basis(context);
      this._beta = beta;
    }
    Bundle.prototype = {
      lineStart: function() {
        this._x = [];
        this._y = [];
        this._basis.lineStart();
      },
      lineEnd: function() {
        var x2 = this._x, y2 = this._y, j2 = x2.length - 1;
        if (j2 > 0) {
          var x0 = x2[0], y0 = y2[0], dx = x2[j2] - x0, dy = y2[j2] - y0, i = -1, t;
          while (++i <= j2) {
            t = i / j2;
            this._basis.point(this._beta * x2[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y2[i] + (1 - this._beta) * (y0 + t * dy));
          }
        }
        this._x = this._y = null;
        this._basis.lineEnd();
      },
      point: function(x2, y2) {
        this._x.push(+x2);
        this._y.push(+y2);
      }
    };
    var bundle = function custom(beta) {
      function bundle2(context) {
        return beta === 1 ? new Basis(context) : new Bundle(context, beta);
      }
      bundle2.beta = function(beta2) {
        return custom(+beta2);
      };
      return bundle2;
    }(0.85);
    function point$1(that, x2, y2) {
      that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x2), that._y2 + that._k * (that._y1 - y2), that._x2, that._y2);
    }
    function Cardinal(context, tension) {
      this._context = context;
      this._k = (1 - tension) / 6;
    }
    Cardinal.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2:
            this._context.lineTo(this._x2, this._y2);
            break;
          case 3:
            point$1(this, this._x1, this._y1);
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
            break;
          case 1:
            this._point = 2;
            this._x1 = x2, this._y1 = y2;
            break;
          case 2:
            this._point = 3;
          default:
            point$1(this, x2, y2);
            break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
      }
    };
    var cardinal = function custom(tension) {
      function cardinal2(context) {
        return new Cardinal(context, tension);
      }
      cardinal2.tension = function(tension2) {
        return custom(+tension2);
      };
      return cardinal2;
    }(0);
    function CardinalClosed(context, tension) {
      this._context = context;
      this._k = (1 - tension) / 6;
    }
    CardinalClosed.prototype = {
      areaStart: noop2,
      areaEnd: noop2,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.lineTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            this.point(this._x5, this._y5);
            break;
          }
        }
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._x3 = x2, this._y3 = y2;
            break;
          case 1:
            this._point = 2;
            this._context.moveTo(this._x4 = x2, this._y4 = y2);
            break;
          case 2:
            this._point = 3;
            this._x5 = x2, this._y5 = y2;
            break;
          default:
            point$1(this, x2, y2);
            break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
      }
    };
    var cardinalClosed = function custom(tension) {
      function cardinal2(context) {
        return new CardinalClosed(context, tension);
      }
      cardinal2.tension = function(tension2) {
        return custom(+tension2);
      };
      return cardinal2;
    }(0);
    function CardinalOpen(context, tension) {
      this._context = context;
      this._k = (1 - tension) / 6;
    }
    CardinalOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0:
            this._point = 1;
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
            break;
          case 3:
            this._point = 4;
          default:
            point$1(this, x2, y2);
            break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
      }
    };
    var cardinalOpen = function custom(tension) {
      function cardinal2(context) {
        return new CardinalOpen(context, tension);
      }
      cardinal2.tension = function(tension2) {
        return custom(+tension2);
      };
      return cardinal2;
    }(0);
    function point$2(that, x2, y2) {
      var { _x1: x1, _y1: y1, _x2: x22, _y2: y22 } = that;
      if (that._l01_a > epsilon) {
        var a2 = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n = 3 * that._l01_a * (that._l01_a + that._l12_a);
        x1 = (x1 * a2 - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
        y1 = (y1 * a2 - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
      }
      if (that._l23_a > epsilon) {
        var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m = 3 * that._l23_a * (that._l23_a + that._l12_a);
        x22 = (x22 * b + that._x1 * that._l23_2a - x2 * that._l12_2a) / m;
        y22 = (y22 * b + that._y1 * that._l23_2a - y2 * that._l12_2a) / m;
      }
      that._context.bezierCurveTo(x1, y1, x22, y22, that._x2, that._y2);
    }
    function CatmullRom(context, alpha) {
      this._context = context;
      this._alpha = alpha;
    }
    CatmullRom.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2:
            this._context.lineTo(this._x2, this._y2);
            break;
          case 3:
            this.point(this._x2, this._y2);
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        if (this._point) {
          var x23 = this._x2 - x2, y23 = this._y2 - y2;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
          default:
            point$2(this, x2, y2);
            break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
      }
    };
    var catmullRom = function custom(alpha) {
      function catmullRom2(context) {
        return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
      }
      catmullRom2.alpha = function(alpha2) {
        return custom(+alpha2);
      };
      return catmullRom2;
    }(0.5);
    function CatmullRomClosed(context, alpha) {
      this._context = context;
      this._alpha = alpha;
    }
    CatmullRomClosed.prototype = {
      areaStart: noop2,
      areaEnd: noop2,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.lineTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            this.point(this._x5, this._y5);
            break;
          }
        }
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        if (this._point) {
          var x23 = this._x2 - x2, y23 = this._y2 - y2;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch (this._point) {
          case 0:
            this._point = 1;
            this._x3 = x2, this._y3 = y2;
            break;
          case 1:
            this._point = 2;
            this._context.moveTo(this._x4 = x2, this._y4 = y2);
            break;
          case 2:
            this._point = 3;
            this._x5 = x2, this._y5 = y2;
            break;
          default:
            point$2(this, x2, y2);
            break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
      }
    };
    var catmullRomClosed = function custom(alpha) {
      function catmullRom2(context) {
        return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
      }
      catmullRom2.alpha = function(alpha2) {
        return custom(+alpha2);
      };
      return catmullRom2;
    }(0.5);
    function CatmullRomOpen(context, alpha) {
      this._context = context;
      this._alpha = alpha;
    }
    CatmullRomOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        if (this._point) {
          var x23 = this._x2 - x2, y23 = this._y2 - y2;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch (this._point) {
          case 0:
            this._point = 1;
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
            break;
          case 3:
            this._point = 4;
          default:
            point$2(this, x2, y2);
            break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
      }
    };
    var catmullRomOpen = function custom(alpha) {
      function catmullRom2(context) {
        return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
      }
      catmullRom2.alpha = function(alpha2) {
        return custom(+alpha2);
      };
      return catmullRom2;
    }(0.5);
    function LinearClosed(context) {
      this._context = context;
    }
    LinearClosed.prototype = {
      areaStart: noop2,
      areaEnd: noop2,
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._point)
          this._context.closePath();
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        if (this._point)
          this._context.lineTo(x2, y2);
        else
          this._point = 1, this._context.moveTo(x2, y2);
      }
    };
    function linearClosed(context) {
      return new LinearClosed(context);
    }
    function sign(x2) {
      return x2 < 0 ? -1 : 1;
    }
    function slope3(that, x2, y2) {
      var h0 = that._x1 - that._x0, h1 = x2 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0), p2 = (s0 * h1 + s1 * h0) / (h0 + h1);
      return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p2)) || 0;
    }
    function slope2(that, t) {
      var h = that._x1 - that._x0;
      return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
    }
    function point$3(that, t03, t13) {
      var { _x0: x0, _y0: y0, _x1: x1, _y1: y1 } = that, dx = (x1 - x0) / 3;
      that._context.bezierCurveTo(x0 + dx, y0 + dx * t03, x1 - dx, y1 - dx * t13, x1, y1);
    }
    function MonotoneX(context) {
      this._context = context;
    }
    MonotoneX.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2:
            this._context.lineTo(this._x1, this._y1);
            break;
          case 3:
            point$3(this, this._t0, slope2(this, this._t0));
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        var t13 = NaN;
        x2 = +x2, y2 = +y2;
        if (x2 === this._x1 && y2 === this._y1)
          return;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            point$3(this, slope2(this, t13 = slope3(this, x2, y2)), t13);
            break;
          default:
            point$3(this, this._t0, t13 = slope3(this, x2, y2));
            break;
        }
        this._x0 = this._x1, this._x1 = x2;
        this._y0 = this._y1, this._y1 = y2;
        this._t0 = t13;
      }
    };
    function MonotoneY(context) {
      this._context = new ReflectContext(context);
    }
    (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x2, y2) {
      MonotoneX.prototype.point.call(this, y2, x2);
    };
    function ReflectContext(context) {
      this._context = context;
    }
    ReflectContext.prototype = {
      moveTo: function(x2, y2) {
        this._context.moveTo(y2, x2);
      },
      closePath: function() {
        this._context.closePath();
      },
      lineTo: function(x2, y2) {
        this._context.lineTo(y2, x2);
      },
      bezierCurveTo: function(x1, y1, x2, y2, x3, y3) {
        this._context.bezierCurveTo(y1, x1, y2, x2, y3, x3);
      }
    };
    function monotoneX(context) {
      return new MonotoneX(context);
    }
    function monotoneY(context) {
      return new MonotoneY(context);
    }
    function Natural(context) {
      this._context = context;
    }
    Natural.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = [];
        this._y = [];
      },
      lineEnd: function() {
        var x2 = this._x, y2 = this._y, n = x2.length;
        if (n) {
          this._line ? this._context.lineTo(x2[0], y2[0]) : this._context.moveTo(x2[0], y2[0]);
          if (n === 2) {
            this._context.lineTo(x2[1], y2[1]);
          } else {
            var px = controlPoints(x2), py = controlPoints(y2);
            for (var i0 = 0, i1 = 1;i1 < n; ++i0, ++i1) {
              this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x2[i1], y2[i1]);
            }
          }
        }
        if (this._line || this._line !== 0 && n === 1)
          this._context.closePath();
        this._line = 1 - this._line;
        this._x = this._y = null;
      },
      point: function(x2, y2) {
        this._x.push(+x2);
        this._y.push(+y2);
      }
    };
    function controlPoints(x2) {
      var i, n = x2.length - 1, m, a2 = new Array(n), b = new Array(n), r = new Array(n);
      a2[0] = 0, b[0] = 2, r[0] = x2[0] + 2 * x2[1];
      for (i = 1;i < n - 1; ++i)
        a2[i] = 1, b[i] = 4, r[i] = 4 * x2[i] + 2 * x2[i + 1];
      a2[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x2[n - 1] + x2[n];
      for (i = 1;i < n; ++i)
        m = a2[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
      a2[n - 1] = r[n - 1] / b[n - 1];
      for (i = n - 2;i >= 0; --i)
        a2[i] = (r[i] - a2[i + 1]) / b[i];
      b[n - 1] = (x2[n] + a2[n - 1]) / 2;
      for (i = 0;i < n - 1; ++i)
        b[i] = 2 * x2[i + 1] - a2[i + 1];
      return [a2, b];
    }
    function natural(context) {
      return new Natural(context);
    }
    function Step(context, t) {
      this._context = context;
      this._t = t;
    }
    Step.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = this._y = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (0 < this._t && this._t < 1 && this._point === 2)
          this._context.lineTo(this._x, this._y);
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        if (this._line >= 0)
          this._t = 1 - this._t, this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
            break;
          case 1:
            this._point = 2;
          default: {
            if (this._t <= 0) {
              this._context.lineTo(this._x, y2);
              this._context.lineTo(x2, y2);
            } else {
              var x1 = this._x * (1 - this._t) + x2 * this._t;
              this._context.lineTo(x1, this._y);
              this._context.lineTo(x1, y2);
            }
            break;
          }
        }
        this._x = x2, this._y = y2;
      }
    };
    function step(context) {
      return new Step(context, 0.5);
    }
    function stepBefore(context) {
      return new Step(context, 0);
    }
    function stepAfter(context) {
      return new Step(context, 1);
    }
    function none(series, order) {
      if (!((n = series.length) > 1))
        return;
      for (var i = 1, j2, s0, s1 = series[order[0]], n, m = s1.length;i < n; ++i) {
        s0 = s1, s1 = series[order[i]];
        for (j2 = 0;j2 < m; ++j2) {
          s1[j2][1] += s1[j2][0] = isNaN(s0[j2][1]) ? s0[j2][0] : s0[j2][1];
        }
      }
    }
    function none$1(series) {
      var n = series.length, o = new Array(n);
      while (--n >= 0)
        o[n] = n;
      return o;
    }
    function stackValue(d, key) {
      return d[key];
    }
    function stack() {
      var keys = constant([]), order = none$1, offset = none, value = stackValue;
      function stack2(data) {
        var kz = keys.apply(this, arguments), i, m = data.length, n = kz.length, sz = new Array(n), oz;
        for (i = 0;i < n; ++i) {
          for (var ki = kz[i], si = sz[i] = new Array(m), j2 = 0, sij;j2 < m; ++j2) {
            si[j2] = sij = [0, +value(data[j2], ki, j2, data)];
            sij.data = data[j2];
          }
          si.key = ki;
        }
        for (i = 0, oz = order(sz);i < n; ++i) {
          sz[oz[i]].index = i;
        }
        offset(sz, oz);
        return sz;
      }
      stack2.keys = function(_) {
        return arguments.length ? (keys = typeof _ === "function" ? _ : constant(slice.call(_)), stack2) : keys;
      };
      stack2.value = function(_) {
        return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), stack2) : value;
      };
      stack2.order = function(_) {
        return arguments.length ? (order = _ == null ? none$1 : typeof _ === "function" ? _ : constant(slice.call(_)), stack2) : order;
      };
      stack2.offset = function(_) {
        return arguments.length ? (offset = _ == null ? none : _, stack2) : offset;
      };
      return stack2;
    }
    function expand(series, order) {
      if (!((n = series.length) > 0))
        return;
      for (var i, n, j2 = 0, m = series[0].length, y2;j2 < m; ++j2) {
        for (y2 = i = 0;i < n; ++i)
          y2 += series[i][j2][1] || 0;
        if (y2)
          for (i = 0;i < n; ++i)
            series[i][j2][1] /= y2;
      }
      none(series, order);
    }
    function diverging(series, order) {
      if (!((n = series.length) > 0))
        return;
      for (var i, j2 = 0, d, dy, yp, yn, n, m = series[order[0]].length;j2 < m; ++j2) {
        for (yp = yn = 0, i = 0;i < n; ++i) {
          if ((dy = (d = series[order[i]][j2])[1] - d[0]) > 0) {
            d[0] = yp, d[1] = yp += dy;
          } else if (dy < 0) {
            d[1] = yn, d[0] = yn += dy;
          } else {
            d[0] = 0, d[1] = dy;
          }
        }
      }
    }
    function silhouette(series, order) {
      if (!((n = series.length) > 0))
        return;
      for (var j2 = 0, s0 = series[order[0]], n, m = s0.length;j2 < m; ++j2) {
        for (var i = 0, y2 = 0;i < n; ++i)
          y2 += series[i][j2][1] || 0;
        s0[j2][1] += s0[j2][0] = -y2 / 2;
      }
      none(series, order);
    }
    function wiggle(series, order) {
      if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0))
        return;
      for (var y2 = 0, j2 = 1, s0, m, n;j2 < m; ++j2) {
        for (var i = 0, s1 = 0, s2 = 0;i < n; ++i) {
          var si = series[order[i]], sij0 = si[j2][1] || 0, sij1 = si[j2 - 1][1] || 0, s3 = (sij0 - sij1) / 2;
          for (var k3 = 0;k3 < i; ++k3) {
            var sk = series[order[k3]], skj0 = sk[j2][1] || 0, skj1 = sk[j2 - 1][1] || 0;
            s3 += skj0 - skj1;
          }
          s1 += sij0, s2 += s3 * sij0;
        }
        s0[j2 - 1][1] += s0[j2 - 1][0] = y2;
        if (s1)
          y2 -= s2 / s1;
      }
      s0[j2 - 1][1] += s0[j2 - 1][0] = y2;
      none(series, order);
    }
    function appearance(series) {
      var peaks = series.map(peak);
      return none$1(series).sort(function(a2, b) {
        return peaks[a2] - peaks[b];
      });
    }
    function peak(series) {
      var i = -1, j2 = 0, n = series.length, vi, vj = -Infinity;
      while (++i < n)
        if ((vi = +series[i][1]) > vj)
          vj = vi, j2 = i;
      return j2;
    }
    function ascending2(series) {
      var sums = series.map(sum);
      return none$1(series).sort(function(a2, b) {
        return sums[a2] - sums[b];
      });
    }
    function sum(series) {
      var s2 = 0, i = -1, n = series.length, v;
      while (++i < n)
        if (v = +series[i][1])
          s2 += v;
      return s2;
    }
    function descending$1(series) {
      return ascending2(series).reverse();
    }
    function insideOut(series) {
      var n = series.length, i, j2, sums = series.map(sum), order = appearance(series), top = 0, bottom = 0, tops = [], bottoms = [];
      for (i = 0;i < n; ++i) {
        j2 = order[i];
        if (top < bottom) {
          top += sums[j2];
          tops.push(j2);
        } else {
          bottom += sums[j2];
          bottoms.push(j2);
        }
      }
      return bottoms.reverse().concat(tops);
    }
    function reverse(series) {
      return none$1(series).reverse();
    }
    exports2.arc = arc;
    exports2.area = area;
    exports2.areaRadial = areaRadial;
    exports2.curveBasis = basis2;
    exports2.curveBasisClosed = basisClosed;
    exports2.curveBasisOpen = basisOpen;
    exports2.curveBundle = bundle;
    exports2.curveCardinal = cardinal;
    exports2.curveCardinalClosed = cardinalClosed;
    exports2.curveCardinalOpen = cardinalOpen;
    exports2.curveCatmullRom = catmullRom;
    exports2.curveCatmullRomClosed = catmullRomClosed;
    exports2.curveCatmullRomOpen = catmullRomOpen;
    exports2.curveLinear = curveLinear;
    exports2.curveLinearClosed = linearClosed;
    exports2.curveMonotoneX = monotoneX;
    exports2.curveMonotoneY = monotoneY;
    exports2.curveNatural = natural;
    exports2.curveStep = step;
    exports2.curveStepAfter = stepAfter;
    exports2.curveStepBefore = stepBefore;
    exports2.line = line;
    exports2.lineRadial = lineRadial$1;
    exports2.linkHorizontal = linkHorizontal;
    exports2.linkRadial = linkRadial;
    exports2.linkVertical = linkVertical;
    exports2.pie = pie;
    exports2.pointRadial = pointRadial;
    exports2.radialArea = areaRadial;
    exports2.radialLine = lineRadial$1;
    exports2.stack = stack;
    exports2.stackOffsetDiverging = diverging;
    exports2.stackOffsetExpand = expand;
    exports2.stackOffsetNone = none;
    exports2.stackOffsetSilhouette = silhouette;
    exports2.stackOffsetWiggle = wiggle;
    exports2.stackOrderAppearance = appearance;
    exports2.stackOrderAscending = ascending2;
    exports2.stackOrderDescending = descending$1;
    exports2.stackOrderInsideOut = insideOut;
    exports2.stackOrderNone = none$1;
    exports2.stackOrderReverse = reverse;
    exports2.symbol = symbol;
    exports2.symbolCircle = circle;
    exports2.symbolCross = cross;
    exports2.symbolDiamond = diamond;
    exports2.symbolSquare = square;
    exports2.symbolStar = star;
    exports2.symbolTriangle = triangle;
    exports2.symbolWye = wye;
    exports2.symbols = symbols;
    Object.defineProperty(exports2, "__esModule", { value: true });
  });
});

// node_modules/@visx/shape/lib/util/setNumberOrNumberAccessor.js
var require_setNumberOrNumberAccessor = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = setNumberOrNumberAccessor;
  function setNumberOrNumberAccessor(func, value) {
    if (typeof value === "number")
      func(value);
    else
      func(value);
  }
});

// node_modules/@visx/shape/lib/util/stackOrder.js
var require_stackOrder = __commonJS((exports) => {
  exports.__esModule = true;
  exports.STACK_ORDER_NAMES = exports.STACK_ORDERS = undefined;
  exports.default = stackOrder;
  var _d3Shape = require_d3_shape();
  var STACK_ORDERS = {
    ascending: _d3Shape.stackOrderAscending,
    descending: _d3Shape.stackOrderDescending,
    insideout: _d3Shape.stackOrderInsideOut,
    none: _d3Shape.stackOrderNone,
    reverse: _d3Shape.stackOrderReverse
  };
  exports.STACK_ORDERS = STACK_ORDERS;
  var STACK_ORDER_NAMES = Object.keys(STACK_ORDERS);
  exports.STACK_ORDER_NAMES = STACK_ORDER_NAMES;
  function stackOrder(order) {
    return order && STACK_ORDERS[order] || STACK_ORDERS.none;
  }
});

// node_modules/@visx/shape/lib/util/stackOffset.js
var require_stackOffset = __commonJS((exports) => {
  exports.__esModule = true;
  exports.STACK_OFFSET_NAMES = exports.STACK_OFFSETS = undefined;
  exports.default = stackOffset;
  var _d3Shape = require_d3_shape();
  var STACK_OFFSETS = {
    expand: _d3Shape.stackOffsetExpand,
    diverging: _d3Shape.stackOffsetDiverging,
    none: _d3Shape.stackOffsetNone,
    silhouette: _d3Shape.stackOffsetSilhouette,
    wiggle: _d3Shape.stackOffsetWiggle
  };
  exports.STACK_OFFSETS = STACK_OFFSETS;
  var STACK_OFFSET_NAMES = Object.keys(STACK_OFFSETS);
  exports.STACK_OFFSET_NAMES = STACK_OFFSET_NAMES;
  function stackOffset(offset) {
    return offset && STACK_OFFSETS[offset] || STACK_OFFSETS.none;
  }
});

// node_modules/@visx/shape/lib/util/D3ShapeFactories.js
var require_D3ShapeFactories = __commonJS((exports) => {
  exports.__esModule = true;
  exports.arc = arc;
  exports.area = area;
  exports.line = line;
  exports.pie = pie;
  exports.radialLine = radialLine;
  exports.stack = stack;
  var _d3Shape = require_d3_shape();
  var _setNumberOrNumberAccessor = _interopRequireDefault(require_setNumberOrNumberAccessor());
  var _stackOrder = _interopRequireDefault(require_stackOrder());
  var _stackOffset = _interopRequireDefault(require_stackOffset());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function arc(_temp) {
    var _ref = _temp === undefined ? {} : _temp, innerRadius = _ref.innerRadius, outerRadius = _ref.outerRadius, cornerRadius = _ref.cornerRadius, startAngle = _ref.startAngle, endAngle = _ref.endAngle, padAngle = _ref.padAngle, padRadius = _ref.padRadius;
    var path = (0, _d3Shape.arc)();
    if (innerRadius != null)
      (0, _setNumberOrNumberAccessor.default)(path.innerRadius, innerRadius);
    if (outerRadius != null)
      (0, _setNumberOrNumberAccessor.default)(path.outerRadius, outerRadius);
    if (cornerRadius != null)
      (0, _setNumberOrNumberAccessor.default)(path.cornerRadius, cornerRadius);
    if (startAngle != null)
      (0, _setNumberOrNumberAccessor.default)(path.startAngle, startAngle);
    if (endAngle != null)
      (0, _setNumberOrNumberAccessor.default)(path.endAngle, endAngle);
    if (padAngle != null)
      (0, _setNumberOrNumberAccessor.default)(path.padAngle, padAngle);
    if (padRadius != null)
      (0, _setNumberOrNumberAccessor.default)(path.padRadius, padRadius);
    return path;
  }
  function area(_temp2) {
    var _ref2 = _temp2 === undefined ? {} : _temp2, x = _ref2.x, x0 = _ref2.x0, x1 = _ref2.x1, y = _ref2.y, y0 = _ref2.y0, y1 = _ref2.y1, defined = _ref2.defined, curve = _ref2.curve;
    var path = (0, _d3Shape.area)();
    if (x)
      (0, _setNumberOrNumberAccessor.default)(path.x, x);
    if (x0)
      (0, _setNumberOrNumberAccessor.default)(path.x0, x0);
    if (x1)
      (0, _setNumberOrNumberAccessor.default)(path.x1, x1);
    if (y)
      (0, _setNumberOrNumberAccessor.default)(path.y, y);
    if (y0)
      (0, _setNumberOrNumberAccessor.default)(path.y0, y0);
    if (y1)
      (0, _setNumberOrNumberAccessor.default)(path.y1, y1);
    if (defined)
      path.defined(defined);
    if (curve)
      path.curve(curve);
    return path;
  }
  function line(_temp3) {
    var _ref3 = _temp3 === undefined ? {} : _temp3, x = _ref3.x, y = _ref3.y, defined = _ref3.defined, curve = _ref3.curve;
    var path = (0, _d3Shape.line)();
    if (x)
      (0, _setNumberOrNumberAccessor.default)(path.x, x);
    if (y)
      (0, _setNumberOrNumberAccessor.default)(path.y, y);
    if (defined)
      path.defined(defined);
    if (curve)
      path.curve(curve);
    return path;
  }
  function pie(_temp4) {
    var _ref4 = _temp4 === undefined ? {} : _temp4, startAngle = _ref4.startAngle, endAngle = _ref4.endAngle, padAngle = _ref4.padAngle, value = _ref4.value, sort = _ref4.sort, sortValues = _ref4.sortValues;
    var path = (0, _d3Shape.pie)();
    if (sort === null)
      path.sort(sort);
    else if (sort != null)
      path.sort(sort);
    if (sortValues === null)
      path.sortValues(sortValues);
    else if (sortValues != null)
      path.sortValues(sortValues);
    if (value != null)
      path.value(value);
    if (padAngle != null)
      (0, _setNumberOrNumberAccessor.default)(path.padAngle, padAngle);
    if (startAngle != null)
      (0, _setNumberOrNumberAccessor.default)(path.startAngle, startAngle);
    if (endAngle != null)
      (0, _setNumberOrNumberAccessor.default)(path.endAngle, endAngle);
    return path;
  }
  function radialLine(_temp5) {
    var _ref5 = _temp5 === undefined ? {} : _temp5, angle = _ref5.angle, radius = _ref5.radius, defined = _ref5.defined, curve = _ref5.curve;
    var path = (0, _d3Shape.radialLine)();
    if (angle)
      (0, _setNumberOrNumberAccessor.default)(path.angle, angle);
    if (radius)
      (0, _setNumberOrNumberAccessor.default)(path.radius, radius);
    if (defined)
      path.defined(defined);
    if (curve)
      path.curve(curve);
    return path;
  }
  function stack(_ref6) {
    var { keys, value, order, offset } = _ref6;
    var path = (0, _d3Shape.stack)();
    if (keys)
      path.keys(keys);
    if (value)
      (0, _setNumberOrNumberAccessor.default)(path.value, value);
    if (order)
      path.order((0, _stackOrder.default)(order));
    if (offset)
      path.offset((0, _stackOffset.default)(offset));
    return path;
  }
});

// node_modules/@visx/shape/lib/shapes/Arc.js
var require_Arc = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = Arc;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _D3ShapeFactories = require_D3ShapeFactories();
  var _excluded = ["className", "data", "innerRadius", "outerRadius", "cornerRadius", "startAngle", "endAngle", "padAngle", "padRadius", "children", "innerRef"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function Arc(_ref) {
    var { className, data, innerRadius, outerRadius, cornerRadius, startAngle, endAngle, padAngle, padRadius, children, innerRef } = _ref, restProps = _objectWithoutPropertiesLoose(_ref, _excluded);
    var path = (0, _D3ShapeFactories.arc)({
      innerRadius,
      outerRadius,
      cornerRadius,
      startAngle,
      endAngle,
      padAngle,
      padRadius
    });
    if (children)
      return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, children({
        path
      }));
    if (!data && (startAngle == null || endAngle == null || innerRadius == null || outerRadius == null)) {
      console.warn("[@visx/shape/Arc]: expected data because one of startAngle, endAngle, innerRadius, outerRadius is undefined. Bailing.");
      return null;
    }
    return /* @__PURE__ */ _react.default.createElement("path", _extends({
      ref: innerRef,
      className: (0, _classnames.default)("visx-arc", className),
      d: path(data) || ""
    }, restProps));
  }
});

// node_modules/@visx/shape/lib/shapes/Pie.js
var require_Pie = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = Pie;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _group = require_lib();
  var _D3ShapeFactories = require_D3ShapeFactories();
  var _excluded = ["className", "top", "left", "data", "centroid", "innerRadius", "outerRadius", "cornerRadius", "startAngle", "endAngle", "padAngle", "padRadius", "pieSort", "pieSortValues", "pieValue", "children", "fill"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function Pie(_ref) {
    var { className, top, left, data: _ref$data } = _ref, data = _ref$data === undefined ? [] : _ref$data, centroid = _ref.centroid, _ref$innerRadius = _ref.innerRadius, innerRadius = _ref$innerRadius === undefined ? 0 : _ref$innerRadius, outerRadius = _ref.outerRadius, cornerRadius = _ref.cornerRadius, startAngle = _ref.startAngle, endAngle = _ref.endAngle, padAngle = _ref.padAngle, padRadius = _ref.padRadius, pieSort = _ref.pieSort, pieSortValues = _ref.pieSortValues, pieValue = _ref.pieValue, children = _ref.children, _ref$fill = _ref.fill, fill = _ref$fill === undefined ? "" : _ref$fill, restProps = _objectWithoutPropertiesLoose(_ref, _excluded);
    var path = (0, _D3ShapeFactories.arc)({
      innerRadius,
      outerRadius,
      cornerRadius,
      padRadius
    });
    var pie = (0, _D3ShapeFactories.pie)({
      startAngle,
      endAngle,
      padAngle,
      value: pieValue,
      sort: pieSort,
      sortValues: pieSortValues
    });
    var arcs = pie(data);
    if (children)
      return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, children({
        arcs,
        path,
        pie
      }));
    return /* @__PURE__ */ _react.default.createElement(_group.Group, {
      className: "visx-pie-arcs-group",
      top,
      left
    }, arcs.map(function(arc, i) {
      return /* @__PURE__ */ _react.default.createElement("g", {
        key: "pie-arc-" + i
      }, /* @__PURE__ */ _react.default.createElement("path", _extends({
        className: (0, _classnames.default)("visx-pie-arc", className),
        d: path(arc) || "",
        fill: fill == null || typeof fill === "string" ? fill : fill(arc)
      }, restProps)), centroid == null ? undefined : centroid(path.centroid(arc), arc));
    }));
  }
});

// node_modules/@visx/shape/lib/shapes/Line.js
var require_Line = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = Line;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _excluded = ["from", "to", "fill", "className", "innerRef"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function Line(_ref) {
    var _ref$from = _ref.from, from = _ref$from === undefined ? {
      x: 0,
      y: 0
    } : _ref$from, _ref$to = _ref.to, to2 = _ref$to === undefined ? {
      x: 1,
      y: 1
    } : _ref$to, _ref$fill = _ref.fill, fill = _ref$fill === undefined ? "transparent" : _ref$fill, className = _ref.className, innerRef = _ref.innerRef, restProps = _objectWithoutPropertiesLoose(_ref, _excluded);
    var isRectilinear = from.x === to2.x || from.y === to2.y;
    return /* @__PURE__ */ _react.default.createElement("line", _extends({
      ref: innerRef,
      className: (0, _classnames.default)("visx-line", className),
      x1: from.x,
      y1: from.y,
      x2: to2.x,
      y2: to2.y,
      fill,
      shapeRendering: isRectilinear ? "crispEdges" : "auto"
    }, restProps));
  }
});

// node_modules/@visx/shape/lib/shapes/LinePath.js
var require_LinePath = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = LinePath;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _D3ShapeFactories = require_D3ShapeFactories();
  var _excluded = ["children", "data", "x", "y", "fill", "className", "curve", "innerRef", "defined"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function LinePath(_ref) {
    var { children, data: _ref$data } = _ref, data = _ref$data === undefined ? [] : _ref$data, x = _ref.x, y = _ref.y, _ref$fill = _ref.fill, fill = _ref$fill === undefined ? "transparent" : _ref$fill, className = _ref.className, curve = _ref.curve, innerRef = _ref.innerRef, _ref$defined = _ref.defined, defined = _ref$defined === undefined ? function() {
      return true;
    } : _ref$defined, restProps = _objectWithoutPropertiesLoose(_ref, _excluded);
    var path = (0, _D3ShapeFactories.line)({
      x,
      y,
      defined,
      curve
    });
    if (children)
      return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, children({
        path
      }));
    return /* @__PURE__ */ _react.default.createElement("path", _extends({
      ref: innerRef,
      className: (0, _classnames.default)("visx-linepath", className),
      d: path(data) || "",
      fill,
      strokeLinecap: "round"
    }, restProps));
  }
});

// node_modules/@visx/shape/lib/shapes/LineRadial.js
var require_LineRadial = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = LineRadial;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _D3ShapeFactories = require_D3ShapeFactories();
  var _excluded = ["className", "angle", "radius", "defined", "curve", "data", "innerRef", "children", "fill"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function LineRadial(_ref) {
    var { className, angle, radius, defined, curve, data: _ref$data } = _ref, data = _ref$data === undefined ? [] : _ref$data, innerRef = _ref.innerRef, children = _ref.children, _ref$fill = _ref.fill, fill = _ref$fill === undefined ? "transparent" : _ref$fill, restProps = _objectWithoutPropertiesLoose(_ref, _excluded);
    var path = (0, _D3ShapeFactories.radialLine)({
      angle,
      radius,
      defined,
      curve
    });
    if (children)
      return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, children({
        path
      }));
    return /* @__PURE__ */ _react.default.createElement("path", _extends({
      ref: innerRef,
      className: (0, _classnames.default)("visx-line-radial", className),
      d: path(data) || "",
      fill
    }, restProps));
  }
});

// node_modules/@visx/shape/lib/shapes/Area.js
var require_Area = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = Area;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _D3ShapeFactories = require_D3ShapeFactories();
  var _excluded = ["children", "x", "x0", "x1", "y", "y0", "y1", "data", "defined", "className", "curve", "innerRef"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function Area(_ref) {
    var { children, x, x0, x1, y, y0, y1, data: _ref$data } = _ref, data = _ref$data === undefined ? [] : _ref$data, _ref$defined = _ref.defined, defined = _ref$defined === undefined ? function() {
      return true;
    } : _ref$defined, className = _ref.className, curve = _ref.curve, innerRef = _ref.innerRef, restProps = _objectWithoutPropertiesLoose(_ref, _excluded);
    var path = (0, _D3ShapeFactories.area)({
      x,
      x0,
      x1,
      y,
      y0,
      y1,
      defined,
      curve
    });
    if (children)
      return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, children({
        path
      }));
    return /* @__PURE__ */ _react.default.createElement("path", _extends({
      ref: innerRef,
      className: (0, _classnames.default)("visx-area", className),
      d: path(data) || ""
    }, restProps));
  }
});

// node_modules/@visx/shape/lib/shapes/AreaClosed.js
var require_AreaClosed = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = AreaClosed;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _setNumberOrNumberAccessor = _interopRequireDefault(require_setNumberOrNumberAccessor());
  var _D3ShapeFactories = require_D3ShapeFactories();
  var _excluded = ["x", "x0", "x1", "y", "y1", "y0", "yScale", "data", "defined", "className", "curve", "innerRef", "children"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function AreaClosed(_ref) {
    var { x, x0, x1, y, y1, y0, yScale, data: _ref$data } = _ref, data = _ref$data === undefined ? [] : _ref$data, _ref$defined = _ref.defined, defined = _ref$defined === undefined ? function() {
      return true;
    } : _ref$defined, className = _ref.className, curve = _ref.curve, innerRef = _ref.innerRef, children = _ref.children, restProps = _objectWithoutPropertiesLoose(_ref, _excluded);
    var path = (0, _D3ShapeFactories.area)({
      x,
      x0,
      x1,
      defined,
      curve
    });
    if (y0 == null) {
      path.y0(yScale.range()[0]);
    } else {
      (0, _setNumberOrNumberAccessor.default)(path.y0, y0);
    }
    if (y && !y1)
      (0, _setNumberOrNumberAccessor.default)(path.y1, y);
    if (y1 && !y)
      (0, _setNumberOrNumberAccessor.default)(path.y1, y1);
    if (children)
      return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, children({
        path
      }));
    return /* @__PURE__ */ _react.default.createElement("path", _extends({
      ref: innerRef,
      className: (0, _classnames.default)("visx-area-closed", className),
      d: path(data) || ""
    }, restProps));
  }
});

// node_modules/@visx/shape/lib/shapes/Stack.js
var require_Stack = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = Stack;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _group = require_lib();
  var _D3ShapeFactories = require_D3ShapeFactories();
  var _excluded = ["className", "top", "left", "keys", "data", "curve", "defined", "x", "x0", "x1", "y0", "y1", "value", "order", "offset", "color", "children"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function Stack(_ref) {
    var { className, top, left, keys, data, curve, defined, x, x0, x1, y0, y1, value, order, offset, color: color2, children } = _ref, restProps = _objectWithoutPropertiesLoose(_ref, _excluded);
    var stack = (0, _D3ShapeFactories.stack)({
      keys,
      value,
      order,
      offset
    });
    var path = (0, _D3ShapeFactories.area)({
      x,
      x0,
      x1,
      y0,
      y1,
      curve,
      defined
    });
    var stacks = stack(data);
    if (children)
      return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, children({
        stacks,
        path,
        stack
      }));
    return /* @__PURE__ */ _react.default.createElement(_group.Group, {
      top,
      left
    }, stacks.map(function(series, i) {
      return /* @__PURE__ */ _react.default.createElement("path", _extends({
        className: (0, _classnames.default)("visx-stack", className),
        key: "stack-" + i + "-" + (series.key || ""),
        d: path(series) || "",
        fill: color2 == null ? undefined : color2(series.key, i)
      }, restProps));
    }));
  }
});

// node_modules/@visx/shape/lib/shapes/AreaStack.js
var require_AreaStack = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = AreaStack;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _Stack = _interopRequireDefault(require_Stack());
  var _excluded = ["className", "top", "left", "keys", "data", "curve", "defined", "x", "x0", "x1", "y0", "y1", "value", "order", "offset", "color", "children"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function AreaStack(_ref) {
    var { className, top, left, keys, data, curve, defined, x, x0, x1, y0, y1, value, order, offset, color: color2, children } = _ref, restProps = _objectWithoutPropertiesLoose(_ref, _excluded);
    return /* @__PURE__ */ _react.default.createElement(_Stack.default, _extends({
      className,
      top,
      left,
      keys,
      data,
      curve,
      defined,
      x,
      x0,
      x1,
      y0,
      y1,
      value,
      order,
      offset,
      color: color2
    }, restProps), children || function(_ref2) {
      var { stacks, path } = _ref2;
      return stacks.map(function(series, i) {
        return /* @__PURE__ */ _react.default.createElement("path", _extends({
          className: (0, _classnames.default)("visx-area-stack", className),
          key: "area-stack-" + i + "-" + (series.key || ""),
          d: path(series) || "",
          fill: color2 == null ? undefined : color2(series.key, i)
        }, restProps));
      });
    });
  }
});

// node_modules/@visx/shape/lib/shapes/Bar.js
var require_Bar = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = Bar;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _excluded = ["className", "innerRef"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function Bar(_ref) {
    var { className, innerRef } = _ref, restProps = _objectWithoutPropertiesLoose(_ref, _excluded);
    return /* @__PURE__ */ _react.default.createElement("rect", _extends({
      ref: innerRef,
      className: (0, _classnames.default)("visx-bar", className)
    }, restProps));
  }
});

// node_modules/@visx/shape/lib/shapes/BarRounded.js
var require_BarRounded = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = BarRounded;
  exports.useBarRoundedPath = useBarRoundedPath;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _excluded = ["children", "className", "innerRef", "x", "y", "width", "height", "radius", "all", "top", "bottom", "left", "right", "topLeft", "topRight", "bottomLeft", "bottomRight"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function useBarRoundedPath(_ref) {
    var { all, bottom, bottomLeft, bottomRight, height, left, radius, right, top, topLeft, topRight, width, x, y } = _ref;
    topRight = all || top || right || topRight;
    bottomRight = all || bottom || right || bottomRight;
    bottomLeft = all || bottom || left || bottomLeft;
    topLeft = all || top || left || topLeft;
    radius = Math.max(1, Math.min(radius, Math.min(width, height) / 2));
    var diameter = 2 * radius;
    var path = ("M" + (x + radius) + "," + y + " h" + (width - diameter) + `
 ` + (topRight ? "a" + radius + "," + radius + " 0 0 1 " + radius + "," + radius : "h" + radius + "v" + radius) + `
 v` + (height - diameter) + `
 ` + (bottomRight ? "a" + radius + "," + radius + " 0 0 1 " + -radius + "," + radius : "v" + radius + "h" + -radius) + `
 h` + (diameter - width) + `
 ` + (bottomLeft ? "a" + radius + "," + radius + " 0 0 1 " + -radius + "," + -radius : "h" + -radius + "v" + -radius) + `
 v` + (diameter - height) + `
 ` + (topLeft ? "a" + radius + "," + radius + " 0 0 1 " + radius + "," + -radius : "v" + -radius + "h" + radius) + `
z`).split(`
`).join("");
    return path;
  }
  function BarRounded(_ref2) {
    var { children, className, innerRef, x, y, width, height, radius, all: _ref2$all } = _ref2, all = _ref2$all === undefined ? false : _ref2$all, _ref2$top = _ref2.top, top = _ref2$top === undefined ? false : _ref2$top, _ref2$bottom = _ref2.bottom, bottom = _ref2$bottom === undefined ? false : _ref2$bottom, _ref2$left = _ref2.left, left = _ref2$left === undefined ? false : _ref2$left, _ref2$right = _ref2.right, right = _ref2$right === undefined ? false : _ref2$right, _ref2$topLeft = _ref2.topLeft, topLeft = _ref2$topLeft === undefined ? false : _ref2$topLeft, _ref2$topRight = _ref2.topRight, topRight = _ref2$topRight === undefined ? false : _ref2$topRight, _ref2$bottomLeft = _ref2.bottomLeft, bottomLeft = _ref2$bottomLeft === undefined ? false : _ref2$bottomLeft, _ref2$bottomRight = _ref2.bottomRight, bottomRight = _ref2$bottomRight === undefined ? false : _ref2$bottomRight, restProps = _objectWithoutPropertiesLoose(_ref2, _excluded);
    var path = useBarRoundedPath({
      x,
      y,
      width,
      height,
      radius,
      all,
      top,
      bottom,
      left,
      right,
      topLeft,
      topRight,
      bottomLeft,
      bottomRight
    });
    if (children)
      return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, children({
        path
      }));
    return /* @__PURE__ */ _react.default.createElement("path", _extends({
      ref: innerRef,
      className: (0, _classnames.default)("visx-bar-rounded", className),
      d: path
    }, restProps));
  }
});

// node_modules/@visx/shape/lib/util/getBandwidth.js
var require_getBandwidth = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = getBandwidth;
  function getBandwidth(scale) {
    if ("bandwidth" in scale) {
      return scale.bandwidth();
    }
    var range2 = scale.range();
    var domain = scale.domain();
    return Math.abs(range2[range2.length - 1] - range2[0]) / domain.length;
  }
});

// node_modules/@visx/shape/lib/shapes/BarGroup.js
var require_BarGroup = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = BarGroup;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _group = require_lib();
  var _Bar = _interopRequireDefault(require_Bar());
  var _getBandwidth = _interopRequireDefault(require_getBandwidth());
  var _excluded = ["data", "className", "top", "left", "x0", "x0Scale", "x1Scale", "yScale", "color", "keys", "height", "children"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function BarGroup(_ref) {
    var { data, className, top, left, x0, x0Scale, x1Scale, yScale, color: color2, keys, height, children } = _ref, restProps = _objectWithoutPropertiesLoose(_ref, _excluded);
    var barWidth = (0, _getBandwidth.default)(x1Scale);
    var barGroups = data.map(function(group, i) {
      return {
        index: i,
        x0: x0Scale(x0(group)),
        bars: keys.map(function(key, j2) {
          var value = group[key];
          return {
            index: j2,
            key,
            value,
            width: barWidth,
            x: x1Scale(key) || 0,
            y: yScale(value) || 0,
            color: color2(key, j2),
            height: height - (yScale(value) || 0)
          };
        })
      };
    });
    if (children)
      return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, children(barGroups));
    return /* @__PURE__ */ _react.default.createElement(_group.Group, {
      className: (0, _classnames.default)("visx-bar-group", className),
      top,
      left
    }, barGroups.map(function(barGroup) {
      return /* @__PURE__ */ _react.default.createElement(_group.Group, {
        key: "bar-group-" + barGroup.index + "-" + barGroup.x0,
        left: barGroup.x0
      }, barGroup.bars.map(function(bar) {
        return /* @__PURE__ */ _react.default.createElement(_Bar.default, _extends({
          key: "bar-group-bar-" + barGroup.index + "-" + bar.index + "-" + bar.value + "-" + bar.key,
          x: bar.x,
          y: bar.y,
          width: bar.width,
          height: bar.height,
          fill: bar.color
        }, restProps));
      }));
    }));
  }
});

// node_modules/@visx/shape/lib/shapes/BarGroupHorizontal.js
var require_BarGroupHorizontal = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = BarGroupHorizontal;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _group = require_lib();
  var _Bar = _interopRequireDefault(require_Bar());
  var _getBandwidth = _interopRequireDefault(require_getBandwidth());
  var _excluded = ["data", "className", "top", "left", "x", "y0", "y0Scale", "y1Scale", "xScale", "color", "keys", "width", "children"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function BarGroupHorizontal(_ref) {
    var { data, className, top, left, x: _ref$x } = _ref, x = _ref$x === undefined ? function() {
      return 0;
    } : _ref$x, y0 = _ref.y0, y0Scale = _ref.y0Scale, y1Scale = _ref.y1Scale, xScale = _ref.xScale, color2 = _ref.color, keys = _ref.keys, width = _ref.width, children = _ref.children, restProps = _objectWithoutPropertiesLoose(_ref, _excluded);
    var barHeight = (0, _getBandwidth.default)(y1Scale);
    var barGroups = data.map(function(group, i) {
      return {
        index: i,
        y0: y0Scale(y0(group)) || 0,
        bars: keys.map(function(key, j2) {
          var value = group[key];
          return {
            index: j2,
            key,
            value,
            height: barHeight,
            x: x(value) || 0,
            y: y1Scale(key) || 0,
            color: color2(key, j2),
            width: xScale(value) || 0
          };
        })
      };
    });
    if (children)
      return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, children(barGroups));
    return /* @__PURE__ */ _react.default.createElement(_group.Group, {
      className: (0, _classnames.default)("visx-bar-group-horizontal", className),
      top,
      left
    }, barGroups.map(function(barGroup) {
      return /* @__PURE__ */ _react.default.createElement(_group.Group, {
        key: "bar-group-" + barGroup.index + "-" + barGroup.y0,
        top: barGroup.y0
      }, barGroup.bars.map(function(bar) {
        return /* @__PURE__ */ _react.default.createElement(_Bar.default, _extends({
          key: "bar-group-bar-" + barGroup.index + "-" + bar.index + "-" + bar.value + "-" + bar.key,
          x: bar.x,
          y: bar.y,
          width: bar.width,
          height: bar.height,
          fill: bar.color
        }, restProps));
      }));
    }));
  }
});

// node_modules/@visx/shape/lib/util/accessors.js
var require_accessors = __commonJS((exports) => {
  exports.__esModule = true;
  exports.getFirstItem = getFirstItem;
  exports.getSecondItem = getSecondItem;
  exports.getSource = getSource;
  exports.getTarget = getTarget;
  exports.getX = getX;
  exports.getY = getY;
  function getX(l) {
    return typeof (l == null ? undefined : l.x) === "number" ? l == null ? undefined : l.x : 0;
  }
  function getY(l) {
    return typeof (l == null ? undefined : l.y) === "number" ? l == null ? undefined : l.y : 0;
  }
  function getSource(l) {
    return l == null ? undefined : l.source;
  }
  function getTarget(l) {
    return l == null ? undefined : l.target;
  }
  function getFirstItem(d) {
    return d == null ? undefined : d[0];
  }
  function getSecondItem(d) {
    return d == null ? undefined : d[1];
  }
});

// node_modules/@visx/shape/lib/shapes/BarStack.js
var require_BarStack = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = BarStack;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _d3Shape = require_d3_shape();
  var _group = require_lib();
  var _accessors = require_accessors();
  var _getBandwidth = _interopRequireDefault(require_getBandwidth());
  var _setNumberOrNumberAccessor = _interopRequireDefault(require_setNumberOrNumberAccessor());
  var _stackOrder = _interopRequireDefault(require_stackOrder());
  var _stackOffset = _interopRequireDefault(require_stackOffset());
  var _Bar = _interopRequireDefault(require_Bar());
  var _excluded = ["data", "className", "top", "left", "x", "y0", "y1", "xScale", "yScale", "color", "keys", "value", "order", "offset", "children"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function BarStack(_ref) {
    var { data, className, top, left, x, y0: _ref$y } = _ref, y0 = _ref$y === undefined ? _accessors.getFirstItem : _ref$y, _ref$y2 = _ref.y1, y1 = _ref$y2 === undefined ? _accessors.getSecondItem : _ref$y2, xScale = _ref.xScale, yScale = _ref.yScale, color2 = _ref.color, keys = _ref.keys, value = _ref.value, order = _ref.order, offset = _ref.offset, children = _ref.children, restProps = _objectWithoutPropertiesLoose(_ref, _excluded);
    var stack = (0, _d3Shape.stack)();
    if (keys)
      stack.keys(keys);
    if (value)
      (0, _setNumberOrNumberAccessor.default)(stack.value, value);
    if (order)
      stack.order((0, _stackOrder.default)(order));
    if (offset)
      stack.offset((0, _stackOffset.default)(offset));
    var stacks = stack(data);
    var barWidth = (0, _getBandwidth.default)(xScale);
    var barStacks = stacks.map(function(barStack, i) {
      var key = barStack.key;
      return {
        index: i,
        key,
        bars: barStack.map(function(bar, j2) {
          var barHeight = (yScale(y0(bar)) || 0) - (yScale(y1(bar)) || 0);
          var barY = yScale(y1(bar));
          var barX = "bandwidth" in xScale ? xScale(x(bar.data)) : Math.max((xScale(x(bar.data)) || 0) - barWidth / 2);
          return {
            bar,
            key,
            index: j2,
            height: barHeight,
            width: barWidth,
            x: barX || 0,
            y: barY || 0,
            color: color2(barStack.key, j2)
          };
        })
      };
    });
    if (children)
      return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, children(barStacks));
    return /* @__PURE__ */ _react.default.createElement(_group.Group, {
      className: (0, _classnames.default)("visx-bar-stack", className),
      top,
      left
    }, barStacks.map(function(barStack) {
      return barStack.bars.map(function(bar) {
        return /* @__PURE__ */ _react.default.createElement(_Bar.default, _extends({
          key: "bar-stack-" + barStack.index + "-" + bar.index,
          x: bar.x,
          y: bar.y,
          height: bar.height,
          width: bar.width,
          fill: bar.color
        }, restProps));
      });
    }));
  }
});

// node_modules/@visx/shape/lib/shapes/BarStackHorizontal.js
var require_BarStackHorizontal = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = BarStackHorizontal;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _d3Shape = require_d3_shape();
  var _group = require_lib();
  var _accessors = require_accessors();
  var _getBandwidth = _interopRequireDefault(require_getBandwidth());
  var _setNumberOrNumberAccessor = _interopRequireDefault(require_setNumberOrNumberAccessor());
  var _stackOrder = _interopRequireDefault(require_stackOrder());
  var _stackOffset = _interopRequireDefault(require_stackOffset());
  var _Bar = _interopRequireDefault(require_Bar());
  var _excluded = ["data", "className", "top", "left", "y", "x0", "x1", "xScale", "yScale", "color", "keys", "value", "order", "offset", "children"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function BarStackHorizontal(_ref) {
    var { data, className, top, left, y, x0: _ref$x } = _ref, x0 = _ref$x === undefined ? _accessors.getFirstItem : _ref$x, _ref$x2 = _ref.x1, x1 = _ref$x2 === undefined ? _accessors.getSecondItem : _ref$x2, xScale = _ref.xScale, yScale = _ref.yScale, color2 = _ref.color, keys = _ref.keys, value = _ref.value, order = _ref.order, offset = _ref.offset, children = _ref.children, restProps = _objectWithoutPropertiesLoose(_ref, _excluded);
    var stack = (0, _d3Shape.stack)();
    if (keys)
      stack.keys(keys);
    if (value)
      (0, _setNumberOrNumberAccessor.default)(stack.value, value);
    if (order)
      stack.order((0, _stackOrder.default)(order));
    if (offset)
      stack.offset((0, _stackOffset.default)(offset));
    var stacks = stack(data);
    var barHeight = (0, _getBandwidth.default)(yScale);
    var barStacks = stacks.map(function(barStack, i) {
      var key = barStack.key;
      return {
        index: i,
        key,
        bars: barStack.map(function(bar, j2) {
          var barWidth = (xScale(x1(bar)) || 0) - (xScale(x0(bar)) || 0);
          var barX = xScale(x0(bar));
          var barY = "bandwidth" in yScale ? yScale(y(bar.data)) : Math.max((yScale(y(bar.data)) || 0) - barWidth / 2);
          return {
            bar,
            key,
            index: j2,
            height: barHeight,
            width: barWidth,
            x: barX || 0,
            y: barY || 0,
            color: color2(barStack.key, j2)
          };
        })
      };
    });
    if (children)
      return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, children(barStacks));
    return /* @__PURE__ */ _react.default.createElement(_group.Group, {
      className: (0, _classnames.default)("visx-bar-stack-horizontal", className),
      top,
      left
    }, barStacks.map(function(barStack) {
      return barStack.bars.map(function(bar) {
        return /* @__PURE__ */ _react.default.createElement(_Bar.default, _extends({
          key: "bar-stack-" + barStack.index + "-" + bar.index,
          x: bar.x,
          y: bar.y,
          height: bar.height,
          width: bar.width,
          fill: bar.color
        }, restProps));
      });
    }));
  }
});

// node_modules/@visx/shape/lib/util/trigonometry.js
var require_trigonometry = __commonJS((exports) => {
  exports.__esModule = true;
  exports.degreesToRadians = undefined;
  var degreesToRadians = function degreesToRadians(degrees2) {
    return Math.PI / 180 * degrees2;
  };
  exports.degreesToRadians = degreesToRadians;
});

// node_modules/@visx/shape/lib/shapes/link/diagonal/LinkHorizontal.js
var require_LinkHorizontal = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = LinkHorizontalDiagonal;
  exports.pathHorizontalDiagonal = pathHorizontalDiagonal;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _d3Shape = require_d3_shape();
  var _accessors = require_accessors();
  var _excluded = ["className", "children", "data", "innerRef", "path", "x", "y", "source", "target"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function pathHorizontalDiagonal(_ref) {
    var { source, target, x, y } = _ref;
    return function(data) {
      var link = (0, _d3Shape.linkHorizontal)();
      link.x(x);
      link.y(y);
      link.source(source);
      link.target(target);
      return link(data);
    };
  }
  function LinkHorizontalDiagonal(_ref2) {
    var { className, children, data, innerRef, path, x: _ref2$x } = _ref2, x = _ref2$x === undefined ? _accessors.getY : _ref2$x, _ref2$y = _ref2.y, y = _ref2$y === undefined ? _accessors.getX : _ref2$y, _ref2$source = _ref2.source, source = _ref2$source === undefined ? _accessors.getSource : _ref2$source, _ref2$target = _ref2.target, target = _ref2$target === undefined ? _accessors.getTarget : _ref2$target, restProps = _objectWithoutPropertiesLoose(_ref2, _excluded);
    var pathGen = path || pathHorizontalDiagonal({
      source,
      target,
      x,
      y
    });
    if (children)
      return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, children({
        path: pathGen
      }));
    return /* @__PURE__ */ _react.default.createElement("path", _extends({
      ref: innerRef,
      className: (0, _classnames.default)("visx-link visx-link-horizontal-diagonal", className),
      d: pathGen(data) || ""
    }, restProps));
  }
});

// node_modules/@visx/shape/lib/shapes/link/diagonal/LinkVertical.js
var require_LinkVertical = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = LinkVerticalDiagonal;
  exports.pathVerticalDiagonal = pathVerticalDiagonal;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _d3Shape = require_d3_shape();
  var _accessors = require_accessors();
  var _excluded = ["className", "children", "data", "innerRef", "path", "x", "y", "source", "target"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function pathVerticalDiagonal(_ref) {
    var { source, target, x, y } = _ref;
    return function(data) {
      var link = (0, _d3Shape.linkVertical)();
      link.x(x);
      link.y(y);
      link.source(source);
      link.target(target);
      return link(data);
    };
  }
  function LinkVerticalDiagonal(_ref2) {
    var { className, children, data, innerRef, path, x: _ref2$x } = _ref2, x = _ref2$x === undefined ? _accessors.getX : _ref2$x, _ref2$y = _ref2.y, y = _ref2$y === undefined ? _accessors.getY : _ref2$y, _ref2$source = _ref2.source, source = _ref2$source === undefined ? _accessors.getSource : _ref2$source, _ref2$target = _ref2.target, target = _ref2$target === undefined ? _accessors.getTarget : _ref2$target, restProps = _objectWithoutPropertiesLoose(_ref2, _excluded);
    var pathGen = path || pathVerticalDiagonal({
      source,
      target,
      x,
      y
    });
    if (children)
      return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, children({
        path: pathGen
      }));
    return /* @__PURE__ */ _react.default.createElement("path", _extends({
      ref: innerRef,
      className: (0, _classnames.default)("visx-link visx-link-vertical-diagonal", className),
      d: pathGen(data) || ""
    }, restProps));
  }
});

// node_modules/@visx/shape/lib/shapes/link/diagonal/LinkRadial.js
var require_LinkRadial = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = LinkRadialDiagonal;
  exports.pathRadialDiagonal = pathRadialDiagonal;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _d3Shape = require_d3_shape();
  var _accessors = require_accessors();
  var _excluded = ["className", "children", "data", "innerRef", "path", "angle", "radius", "source", "target"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function pathRadialDiagonal(_ref) {
    var { source, target, angle, radius } = _ref;
    return function(data) {
      var link = (0, _d3Shape.linkRadial)();
      link.angle(angle);
      link.radius(radius);
      link.source(source);
      link.target(target);
      return link(data);
    };
  }
  function LinkRadialDiagonal(_ref2) {
    var { className, children, data, innerRef, path, angle: _ref2$angle } = _ref2, angle = _ref2$angle === undefined ? _accessors.getX : _ref2$angle, _ref2$radius = _ref2.radius, radius = _ref2$radius === undefined ? _accessors.getY : _ref2$radius, _ref2$source = _ref2.source, source = _ref2$source === undefined ? _accessors.getSource : _ref2$source, _ref2$target = _ref2.target, target = _ref2$target === undefined ? _accessors.getTarget : _ref2$target, restProps = _objectWithoutPropertiesLoose(_ref2, _excluded);
    var pathGen = path || pathRadialDiagonal({
      source,
      target,
      angle,
      radius
    });
    if (children)
      return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, children({
        path: pathGen
      }));
    return /* @__PURE__ */ _react.default.createElement("path", _extends({
      ref: innerRef,
      className: (0, _classnames.default)("visx-link visx-link-radial-diagonal", className),
      d: pathGen(data) || ""
    }, restProps));
  }
});

// node_modules/@visx/shape/lib/shapes/link/curve/LinkHorizontalCurve.js
var require_LinkHorizontalCurve = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = LinkHorizontalCurve;
  exports.pathHorizontalCurve = pathHorizontalCurve;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _d3Path = require_d3_path();
  var _accessors = require_accessors();
  var _excluded = ["className", "children", "data", "innerRef", "path", "percent", "x", "y", "source", "target"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function pathHorizontalCurve(_ref) {
    var { source, target, x, y, percent } = _ref;
    return function(link) {
      var sourceData = source(link);
      var targetData = target(link);
      var sx = x(sourceData);
      var sy = y(sourceData);
      var tx = x(targetData);
      var ty = y(targetData);
      var dx = tx - sx;
      var dy = ty - sy;
      var ix = percent * (dx + dy);
      var iy = percent * (dy - dx);
      var path = (0, _d3Path.path)();
      path.moveTo(sx, sy);
      path.bezierCurveTo(sx + ix, sy + iy, tx + iy, ty - ix, tx, ty);
      return path.toString();
    };
  }
  function LinkHorizontalCurve(_ref2) {
    var { className, children, data, innerRef, path, percent: _ref2$percent } = _ref2, percent = _ref2$percent === undefined ? 0.2 : _ref2$percent, _ref2$x = _ref2.x, x = _ref2$x === undefined ? _accessors.getY : _ref2$x, _ref2$y = _ref2.y, y = _ref2$y === undefined ? _accessors.getX : _ref2$y, _ref2$source = _ref2.source, source = _ref2$source === undefined ? _accessors.getSource : _ref2$source, _ref2$target = _ref2.target, target = _ref2$target === undefined ? _accessors.getTarget : _ref2$target, restProps = _objectWithoutPropertiesLoose(_ref2, _excluded);
    var pathGen = path || pathHorizontalCurve({
      source,
      target,
      x,
      y,
      percent
    });
    if (children)
      return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, children({
        path: pathGen
      }));
    return /* @__PURE__ */ _react.default.createElement("path", _extends({
      ref: innerRef,
      className: (0, _classnames.default)("visx-link visx-link-horizontal-curve", className),
      d: pathGen(data) || ""
    }, restProps));
  }
});

// node_modules/@visx/shape/lib/shapes/link/curve/LinkVerticalCurve.js
var require_LinkVerticalCurve = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = LinkVerticalCurve;
  exports.pathVerticalCurve = pathVerticalCurve;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _d3Path = require_d3_path();
  var _accessors = require_accessors();
  var _excluded = ["className", "children", "data", "innerRef", "path", "percent", "x", "y", "source", "target"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function pathVerticalCurve(_ref) {
    var { source, target, x, y, percent } = _ref;
    return function(link) {
      var sourceData = source(link);
      var targetData = target(link);
      var sx = x(sourceData);
      var sy = y(sourceData);
      var tx = x(targetData);
      var ty = y(targetData);
      var dx = tx - sx;
      var dy = ty - sy;
      var ix = percent * (dx + dy);
      var iy = percent * (dy - dx);
      var path = (0, _d3Path.path)();
      path.moveTo(sx, sy);
      path.bezierCurveTo(sx + ix, sy + iy, tx + iy, ty - ix, tx, ty);
      return path.toString();
    };
  }
  function LinkVerticalCurve(_ref2) {
    var { className, children, data, innerRef, path, percent: _ref2$percent } = _ref2, percent = _ref2$percent === undefined ? 0.2 : _ref2$percent, _ref2$x = _ref2.x, x = _ref2$x === undefined ? _accessors.getX : _ref2$x, _ref2$y = _ref2.y, y = _ref2$y === undefined ? _accessors.getY : _ref2$y, _ref2$source = _ref2.source, source = _ref2$source === undefined ? _accessors.getSource : _ref2$source, _ref2$target = _ref2.target, target = _ref2$target === undefined ? _accessors.getTarget : _ref2$target, restProps = _objectWithoutPropertiesLoose(_ref2, _excluded);
    var pathGen = path || pathVerticalCurve({
      source,
      target,
      x,
      y,
      percent
    });
    if (children)
      return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, children({
        path: pathGen
      }));
    return /* @__PURE__ */ _react.default.createElement("path", _extends({
      ref: innerRef,
      className: (0, _classnames.default)("visx-link visx-link-vertical-curve", className),
      d: pathGen(data) || ""
    }, restProps));
  }
});

// node_modules/@visx/shape/lib/shapes/link/curve/LinkRadialCurve.js
var require_LinkRadialCurve = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = LinkRadialCurve;
  exports.pathRadialCurve = pathRadialCurve;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _d3Path = require_d3_path();
  var _accessors = require_accessors();
  var _excluded = ["className", "children", "data", "innerRef", "path", "percent", "x", "y", "source", "target"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function pathRadialCurve(_ref) {
    var { source, target, x, y, percent } = _ref;
    return function(link) {
      var sourceData = source(link);
      var targetData = target(link);
      var sa = x(sourceData) - Math.PI / 2;
      var sr = y(sourceData);
      var ta = x(targetData) - Math.PI / 2;
      var tr = y(targetData);
      var sc = Math.cos(sa);
      var ss = Math.sin(sa);
      var tc = Math.cos(ta);
      var ts2 = Math.sin(ta);
      var sx = sr * sc;
      var sy = sr * ss;
      var tx = tr * tc;
      var ty = tr * ts2;
      var dx = tx - sx;
      var dy = ty - sy;
      var ix = percent * (dx + dy);
      var iy = percent * (dy - dx);
      var path = (0, _d3Path.path)();
      path.moveTo(sx, sy);
      path.bezierCurveTo(sx + ix, sy + iy, tx + iy, ty - ix, tx, ty);
      return path.toString();
    };
  }
  function LinkRadialCurve(_ref2) {
    var { className, children, data, innerRef, path, percent: _ref2$percent } = _ref2, percent = _ref2$percent === undefined ? 0.2 : _ref2$percent, _ref2$x = _ref2.x, x = _ref2$x === undefined ? _accessors.getX : _ref2$x, _ref2$y = _ref2.y, y = _ref2$y === undefined ? _accessors.getY : _ref2$y, _ref2$source = _ref2.source, source = _ref2$source === undefined ? _accessors.getSource : _ref2$source, _ref2$target = _ref2.target, target = _ref2$target === undefined ? _accessors.getTarget : _ref2$target, restProps = _objectWithoutPropertiesLoose(_ref2, _excluded);
    var pathGen = path || pathRadialCurve({
      source,
      target,
      x,
      y,
      percent
    });
    if (children)
      return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, children({
        path: pathGen
      }));
    return /* @__PURE__ */ _react.default.createElement("path", _extends({
      ref: innerRef,
      className: (0, _classnames.default)("visx-link visx-link-radial-curve", className),
      d: pathGen(data) || ""
    }, restProps));
  }
});

// node_modules/@visx/shape/lib/shapes/link/line/LinkHorizontalLine.js
var require_LinkHorizontalLine = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = LinkHorizontalLine;
  exports.pathHorizontalLine = pathHorizontalLine;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _d3Path = require_d3_path();
  var _accessors = require_accessors();
  var _excluded = ["className", "children", "innerRef", "data", "path", "x", "y", "source", "target"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function pathHorizontalLine(_ref) {
    var { source, target, x, y } = _ref;
    return function(data) {
      var sourceData = source(data);
      var targetData = target(data);
      var sx = x(sourceData);
      var sy = y(sourceData);
      var tx = x(targetData);
      var ty = y(targetData);
      var path = (0, _d3Path.path)();
      path.moveTo(sx, sy);
      path.lineTo(tx, ty);
      return path.toString();
    };
  }
  function LinkHorizontalLine(_ref2) {
    var { className, children, innerRef, data, path, x: _ref2$x } = _ref2, x = _ref2$x === undefined ? _accessors.getY : _ref2$x, _ref2$y = _ref2.y, y = _ref2$y === undefined ? _accessors.getX : _ref2$y, _ref2$source = _ref2.source, source = _ref2$source === undefined ? _accessors.getSource : _ref2$source, _ref2$target = _ref2.target, target = _ref2$target === undefined ? _accessors.getTarget : _ref2$target, restProps = _objectWithoutPropertiesLoose(_ref2, _excluded);
    var pathGen = path || pathHorizontalLine({
      source,
      target,
      x,
      y
    });
    if (children)
      return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, children({
        path: pathGen
      }));
    return /* @__PURE__ */ _react.default.createElement("path", _extends({
      ref: innerRef,
      className: (0, _classnames.default)("visx-link visx-link-horizontal-line", className),
      d: pathGen(data) || ""
    }, restProps));
  }
});

// node_modules/@visx/shape/lib/shapes/link/line/LinkVerticalLine.js
var require_LinkVerticalLine = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = LinkVerticalLine;
  exports.pathVerticalLine = pathVerticalLine;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _d3Path = require_d3_path();
  var _accessors = require_accessors();
  var _excluded = ["className", "innerRef", "data", "path", "x", "y", "source", "target", "children"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function pathVerticalLine(_ref) {
    var { source, target, x, y } = _ref;
    return function(data) {
      var sourceData = source(data);
      var targetData = target(data);
      var sx = x(sourceData);
      var sy = y(sourceData);
      var tx = x(targetData);
      var ty = y(targetData);
      var path = (0, _d3Path.path)();
      path.moveTo(sx, sy);
      path.lineTo(tx, ty);
      return path.toString();
    };
  }
  function LinkVerticalLine(_ref2) {
    var { className, innerRef, data, path, x: _ref2$x } = _ref2, x = _ref2$x === undefined ? _accessors.getX : _ref2$x, _ref2$y = _ref2.y, y = _ref2$y === undefined ? _accessors.getY : _ref2$y, _ref2$source = _ref2.source, source = _ref2$source === undefined ? _accessors.getSource : _ref2$source, _ref2$target = _ref2.target, target = _ref2$target === undefined ? _accessors.getTarget : _ref2$target, children = _ref2.children, restProps = _objectWithoutPropertiesLoose(_ref2, _excluded);
    var pathGen = path || pathVerticalLine({
      source,
      target,
      x,
      y
    });
    if (children)
      return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, children({
        path: pathGen
      }));
    return /* @__PURE__ */ _react.default.createElement("path", _extends({
      ref: innerRef,
      className: (0, _classnames.default)("visx-link visx-link-vertical-line", className),
      d: pathGen(data) || ""
    }, restProps));
  }
});

// node_modules/@visx/shape/lib/shapes/link/line/LinkRadialLine.js
var require_LinkRadialLine = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = LinkRadialLine;
  exports.pathRadialLine = pathRadialLine;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _d3Path = require_d3_path();
  var _accessors = require_accessors();
  var _excluded = ["className", "innerRef", "data", "path", "x", "y", "source", "target", "children"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function pathRadialLine(_ref) {
    var { source, target, x, y } = _ref;
    return function(data) {
      var sourceData = source(data);
      var targetData = target(data);
      var sa = x(sourceData) - Math.PI / 2;
      var sr = y(sourceData);
      var ta = x(targetData) - Math.PI / 2;
      var tr = y(targetData);
      var sc = Math.cos(sa);
      var ss = Math.sin(sa);
      var tc = Math.cos(ta);
      var ts2 = Math.sin(ta);
      var path = (0, _d3Path.path)();
      path.moveTo(sr * sc, sr * ss);
      path.lineTo(tr * tc, tr * ts2);
      return path.toString();
    };
  }
  function LinkRadialLine(_ref2) {
    var { className, innerRef, data, path, x: _ref2$x } = _ref2, x = _ref2$x === undefined ? _accessors.getX : _ref2$x, _ref2$y = _ref2.y, y = _ref2$y === undefined ? _accessors.getY : _ref2$y, _ref2$source = _ref2.source, source = _ref2$source === undefined ? _accessors.getSource : _ref2$source, _ref2$target = _ref2.target, target = _ref2$target === undefined ? _accessors.getTarget : _ref2$target, children = _ref2.children, restProps = _objectWithoutPropertiesLoose(_ref2, _excluded);
    var pathGen = path || pathRadialLine({
      source,
      target,
      x,
      y
    });
    if (children)
      return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, children({
        path: pathGen
      }));
    return /* @__PURE__ */ _react.default.createElement("path", _extends({
      ref: innerRef,
      className: (0, _classnames.default)("visx-link visx-link-radial-line", className),
      d: pathGen(data) || ""
    }, restProps));
  }
});

// node_modules/@visx/shape/lib/shapes/link/step/LinkHorizontalStep.js
var require_LinkHorizontalStep = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = LinkHorizontalStep;
  exports.pathHorizontalStep = pathHorizontalStep;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _d3Path = require_d3_path();
  var _accessors = require_accessors();
  var _excluded = ["className", "innerRef", "data", "path", "percent", "x", "y", "source", "target", "children"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function pathHorizontalStep(_ref) {
    var { source, target, x, y, percent } = _ref;
    return function(link) {
      var sourceData = source(link);
      var targetData = target(link);
      var sx = x(sourceData);
      var sy = y(sourceData);
      var tx = x(targetData);
      var ty = y(targetData);
      var path = (0, _d3Path.path)();
      path.moveTo(sx, sy);
      path.lineTo(sx + (tx - sx) * percent, sy);
      path.lineTo(sx + (tx - sx) * percent, ty);
      path.lineTo(tx, ty);
      return path.toString();
    };
  }
  function LinkHorizontalStep(_ref2) {
    var { className, innerRef, data, path, percent: _ref2$percent } = _ref2, percent = _ref2$percent === undefined ? 0.5 : _ref2$percent, _ref2$x = _ref2.x, x = _ref2$x === undefined ? _accessors.getY : _ref2$x, _ref2$y = _ref2.y, y = _ref2$y === undefined ? _accessors.getX : _ref2$y, _ref2$source = _ref2.source, source = _ref2$source === undefined ? _accessors.getSource : _ref2$source, _ref2$target = _ref2.target, target = _ref2$target === undefined ? _accessors.getTarget : _ref2$target, children = _ref2.children, restProps = _objectWithoutPropertiesLoose(_ref2, _excluded);
    var pathGen = path || pathHorizontalStep({
      source,
      target,
      x,
      y,
      percent
    });
    if (children)
      return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, children({
        path: pathGen
      }));
    return /* @__PURE__ */ _react.default.createElement("path", _extends({
      ref: innerRef,
      className: (0, _classnames.default)("visx-link visx-link-horizontal-step", className),
      d: pathGen(data) || ""
    }, restProps));
  }
});

// node_modules/@visx/shape/lib/shapes/link/step/LinkVerticalStep.js
var require_LinkVerticalStep = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = LinkVerticalStep;
  exports.pathVerticalStep = pathVerticalStep;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _d3Path = require_d3_path();
  var _accessors = require_accessors();
  var _excluded = ["className", "innerRef", "data", "path", "percent", "x", "y", "source", "target", "children"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function pathVerticalStep(_ref) {
    var { source, target, x, y, percent } = _ref;
    return function(link) {
      var sourceData = source(link);
      var targetData = target(link);
      var sx = x(sourceData);
      var sy = y(sourceData);
      var tx = x(targetData);
      var ty = y(targetData);
      var path = (0, _d3Path.path)();
      path.moveTo(sx, sy);
      path.lineTo(sx, sy + (ty - sy) * percent);
      path.lineTo(tx, sy + (ty - sy) * percent);
      path.lineTo(tx, ty);
      return path.toString();
    };
  }
  function LinkVerticalStep(_ref2) {
    var { className, innerRef, data, path, percent: _ref2$percent } = _ref2, percent = _ref2$percent === undefined ? 0.5 : _ref2$percent, _ref2$x = _ref2.x, x = _ref2$x === undefined ? _accessors.getX : _ref2$x, _ref2$y = _ref2.y, y = _ref2$y === undefined ? _accessors.getY : _ref2$y, _ref2$source = _ref2.source, source = _ref2$source === undefined ? _accessors.getSource : _ref2$source, _ref2$target = _ref2.target, target = _ref2$target === undefined ? _accessors.getTarget : _ref2$target, children = _ref2.children, restProps = _objectWithoutPropertiesLoose(_ref2, _excluded);
    var pathGen = path || pathVerticalStep({
      source,
      target,
      x,
      y,
      percent
    });
    if (children)
      return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, children({
        path: pathGen
      }));
    return /* @__PURE__ */ _react.default.createElement("path", _extends({
      ref: innerRef,
      className: (0, _classnames.default)("visx-link visx-link-vertical-step", className),
      d: pathGen(data) || ""
    }, restProps));
  }
});

// node_modules/@visx/shape/lib/shapes/link/step/LinkRadialStep.js
var require_LinkRadialStep = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = LinkRadialStep;
  exports.pathRadialStep = pathRadialStep;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _accessors = require_accessors();
  var _excluded = ["className", "innerRef", "data", "path", "x", "y", "source", "target", "children"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function pathRadialStep(_ref) {
    var { source, target, x, y } = _ref;
    return function(link) {
      var sourceData = source(link);
      var targetData = target(link);
      var sx = x(sourceData);
      var sy = y(sourceData);
      var tx = x(targetData);
      var ty = y(targetData);
      var sa = sx - Math.PI / 2;
      var sr = sy;
      var ta = tx - Math.PI / 2;
      var tr = ty;
      var sc = Math.cos(sa);
      var ss = Math.sin(sa);
      var tc = Math.cos(ta);
      var ts2 = Math.sin(ta);
      var sf = Math.abs(ta - sa) > Math.PI ? ta <= sa : ta > sa;
      return `
      M` + sr * sc + "," + sr * ss + `
      A` + sr + "," + sr + ",0,0," + (sf ? 1 : 0) + "," + sr * tc + "," + sr * ts2 + `
      L` + tr * tc + "," + tr * ts2 + `
    `;
    };
  }
  function LinkRadialStep(_ref2) {
    var { className, innerRef, data, path, x: _ref2$x } = _ref2, x = _ref2$x === undefined ? _accessors.getX : _ref2$x, _ref2$y = _ref2.y, y = _ref2$y === undefined ? _accessors.getY : _ref2$y, _ref2$source = _ref2.source, source = _ref2$source === undefined ? _accessors.getSource : _ref2$source, _ref2$target = _ref2.target, target = _ref2$target === undefined ? _accessors.getTarget : _ref2$target, children = _ref2.children, restProps = _objectWithoutPropertiesLoose(_ref2, _excluded);
    var pathGen = path || pathRadialStep({
      source,
      target,
      x,
      y
    });
    if (children)
      return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, children({
        path: pathGen
      }));
    return /* @__PURE__ */ _react.default.createElement("path", _extends({
      ref: innerRef,
      className: (0, _classnames.default)("visx-link visx-link-radial-step", className),
      d: pathGen(data) || ""
    }, restProps));
  }
});

// node_modules/@visx/shape/lib/shapes/Polygon.js
var require_Polygon = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = Polygon;
  exports.getPoints = exports.getPoint = undefined;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _trigonometry = require_trigonometry();
  var _excluded = ["sides", "size", "center", "rotate", "className", "children", "innerRef", "points"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var DEFAULT_CENTER = {
    x: 0,
    y: 0
  };
  var getPoint = function getPoint(_ref) {
    var _ref$sides = _ref.sides, sides = _ref$sides === undefined ? 4 : _ref$sides, _ref$size = _ref.size, size = _ref$size === undefined ? 25 : _ref$size, _ref$center = _ref.center, center = _ref$center === undefined ? DEFAULT_CENTER : _ref$center, _ref$rotate = _ref.rotate, rotate = _ref$rotate === undefined ? 0 : _ref$rotate, side = _ref.side;
    var degrees2 = 360 / sides * side - rotate;
    var radians2 = (0, _trigonometry.degreesToRadians)(degrees2);
    return {
      x: center.x + size * Math.cos(radians2),
      y: center.y + size * Math.sin(radians2)
    };
  };
  exports.getPoint = getPoint;
  var getPoints = function getPoints(_ref2) {
    var { sides, size, center, rotate } = _ref2;
    return new Array(sides).fill(0).map(function(_, side) {
      return getPoint({
        sides,
        size,
        center,
        rotate,
        side
      });
    });
  };
  exports.getPoints = getPoints;
  function Polygon(_ref3) {
    var _ref3$sides = _ref3.sides, sides = _ref3$sides === undefined ? 4 : _ref3$sides, _ref3$size = _ref3.size, size = _ref3$size === undefined ? 25 : _ref3$size, _ref3$center = _ref3.center, center = _ref3$center === undefined ? DEFAULT_CENTER : _ref3$center, _ref3$rotate = _ref3.rotate, rotate = _ref3$rotate === undefined ? 0 : _ref3$rotate, className = _ref3.className, children = _ref3.children, innerRef = _ref3.innerRef, points = _ref3.points, restProps = _objectWithoutPropertiesLoose(_ref3, _excluded);
    var pointsToRender = points || getPoints({
      sides,
      size,
      center,
      rotate
    }).map(function(_ref4) {
      var { x, y } = _ref4;
      return [x, y];
    });
    if (children)
      return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, children({
        points: pointsToRender
      }));
    return /* @__PURE__ */ _react.default.createElement("polygon", _extends({
      ref: innerRef,
      className: (0, _classnames.default)("visx-polygon", className),
      points: pointsToRender.join(" ")
    }, restProps));
  }
});

// node_modules/@visx/shape/lib/shapes/Circle.js
var require_Circle = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = Circle;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _excluded = ["className", "innerRef"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function Circle(_ref) {
    var { className, innerRef } = _ref, restProps = _objectWithoutPropertiesLoose(_ref, _excluded);
    return /* @__PURE__ */ _react.default.createElement("circle", _extends({
      ref: innerRef,
      className: (0, _classnames.default)("visx-circle", className)
    }, restProps));
  }
});

// node_modules/@visx/shape/lib/util/getOrCreateMeasurementElement.js
var require_getOrCreateMeasurementElement = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = getOrCreateMeasurementElement;
  var SVG_NAMESPACE_URL = "http://www.w3.org/2000/svg";
  function getOrCreateMeasurementElement(elementId) {
    var pathElement = document.getElementById(elementId);
    if (!pathElement) {
      var svg = document.createElementNS(SVG_NAMESPACE_URL, "svg");
      svg.setAttribute("aria-hidden", "true");
      svg.style.opacity = "0";
      svg.style.width = "0";
      svg.style.height = "0";
      svg.style.position = "absolute";
      svg.style.top = "-100%";
      svg.style.left = "-100%";
      svg.style.pointerEvents = "none";
      pathElement = document.createElementNS(SVG_NAMESPACE_URL, "path");
      pathElement.setAttribute("id", elementId);
      svg.appendChild(pathElement);
      document.body.appendChild(svg);
    }
    return pathElement;
  }
});

// node_modules/@visx/shape/lib/util/getSplitLineSegments.js
var require_getSplitLineSegments = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = getSplitLineSegments;
  var _getOrCreateMeasurementElement = _interopRequireDefault(require_getOrCreateMeasurementElement());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var MEASUREMENT_ELEMENT_ID = "__visx_splitpath_svg_path_measurement_id";
  var TRUE = function TRUE() {
    return true;
  };
  function getSplitLineSegments(_ref) {
    var { path, pointsInSegments, segmentation: _ref$segmentation } = _ref, segmentation = _ref$segmentation === undefined ? "x" : _ref$segmentation, _ref$sampleRate = _ref.sampleRate, sampleRate = _ref$sampleRate === undefined ? 1 : _ref$sampleRate;
    try {
      var pathElement = (0, _getOrCreateMeasurementElement.default)(MEASUREMENT_ELEMENT_ID);
      pathElement.setAttribute("d", path);
      var totalLength = pathElement.getTotalLength();
      var numSegments = pointsInSegments.length;
      var lineSegments = pointsInSegments.map(function() {
        return [];
      });
      if (segmentation === "x" || segmentation === "y") {
        var segmentStarts = pointsInSegments.map(function(points) {
          var _points$find;
          return (_points$find = points.find(function(p2) {
            return typeof p2[segmentation] === "number";
          })) == null ? undefined : _points$find[segmentation];
        });
        var first = pathElement.getPointAtLength(0);
        var last = pathElement.getPointAtLength(totalLength);
        var isIncreasing = last[segmentation] > first[segmentation];
        var isBeyondSegmentStart = isIncreasing ? segmentStarts.map(function(start2) {
          return typeof start2 === "undefined" ? TRUE : function(xOrY) {
            return xOrY >= start2;
          };
        }) : segmentStarts.map(function(start2) {
          return typeof start2 === "undefined" ? TRUE : function(xOrY) {
            return xOrY <= start2;
          };
        });
        var currentSegment = 0;
        for (var distance = 0;distance <= totalLength; distance += sampleRate) {
          var sample = pathElement.getPointAtLength(distance);
          var position = sample[segmentation];
          while (currentSegment < numSegments - 1 && isBeyondSegmentStart[currentSegment + 1](position)) {
            currentSegment += 1;
          }
          lineSegments[currentSegment].push(sample);
        }
      } else {
        var numPointsInSegment = pointsInSegments.map(function(points) {
          return points.length;
        });
        var numPoints = numPointsInSegment.reduce(function(sum, curr) {
          return sum + curr;
        }, 0);
        var lengthBetweenPoints = totalLength / Math.max(1, numPoints - 1);
        var _segmentStarts = numPointsInSegment.slice(0, numSegments - 1);
        _segmentStarts.unshift(0);
        for (var i = 2;i < numSegments; i += 1) {
          _segmentStarts[i] += _segmentStarts[i - 1];
        }
        for (var _i = 0;_i < numSegments; _i += 1) {
          _segmentStarts[_i] *= lengthBetweenPoints;
        }
        var _currentSegment = 0;
        for (var _distance = 0;_distance <= totalLength; _distance += sampleRate) {
          var _sample = pathElement.getPointAtLength(_distance);
          while (_currentSegment < numSegments - 1 && _distance >= _segmentStarts[_currentSegment + 1]) {
            _currentSegment += 1;
          }
          lineSegments[_currentSegment].push(_sample);
        }
      }
      return lineSegments;
    } catch (e) {
      return [];
    }
  }
});

// node_modules/@visx/shape/lib/shapes/SplitLinePath.js
var require_SplitLinePath = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = SplitLinePath;
  var _propTypes = _interopRequireDefault(require_prop_types());
  var _react = _interopRequireWildcard(react);
  var _getSplitLineSegments = _interopRequireDefault(require_getSplitLineSegments());
  var _D3ShapeFactories = require_D3ShapeFactories();
  var _LinePath = _interopRequireDefault(require_LinePath());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  var getX = function getX(d) {
    return d.x || 0;
  };
  var getY = function getY(d) {
    return d.y || 0;
  };
  function SplitLinePath(_ref) {
    var { children, className, curve, defined, segmentation, sampleRate, segments, x, y, styles } = _ref;
    var pointsInSegments = (0, _react.useMemo)(function() {
      var xFn = typeof x === "number" || typeof x === "undefined" ? function() {
        return x;
      } : x;
      var yFn = typeof y === "number" || typeof y === "undefined" ? function() {
        return y;
      } : y;
      return segments.map(function(s) {
        return s.map(function(value, i) {
          return {
            x: xFn(value, i, s),
            y: yFn(value, i, s)
          };
        });
      });
    }, [x, y, segments]);
    var pathString = (0, _react.useMemo)(function() {
      var path = (0, _D3ShapeFactories.line)({
        x,
        y,
        defined,
        curve
      });
      return path(segments.flat()) || "";
    }, [x, y, defined, curve, segments]);
    var splitLineSegments = (0, _react.useMemo)(function() {
      return (0, _getSplitLineSegments.default)({
        path: pathString,
        segmentation,
        pointsInSegments,
        sampleRate
      });
    }, [pathString, segmentation, pointsInSegments, sampleRate]);
    return /* @__PURE__ */ _react.default.createElement("g", null, splitLineSegments.map(function(segment, index) {
      return children ? /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, {
        key: index
      }, children({
        index,
        segment,
        styles: styles[index] || styles[index % styles.length]
      })) : /* @__PURE__ */ _react.default.createElement(_LinePath.default, _extends({
        key: index,
        className,
        data: segment,
        x: getX,
        y: getY
      }, styles[index] || styles[index % styles.length]));
    }));
  }
  SplitLinePath.propTypes = {
    segments: _propTypes.default.arrayOf(_propTypes.default.array).isRequired,
    styles: _propTypes.default.array.isRequired,
    children: _propTypes.default.func,
    className: _propTypes.default.string
  };
});

// node_modules/@visx/shape/lib/types/D3ShapeConfig.js
var require_D3ShapeConfig = __commonJS((exports) => {
  exports.__esModule = true;
});

// node_modules/@visx/shape/lib/index.js
var require_lib3 = __commonJS((exports) => {
  exports.__esModule = true;
  var _exportNames = {
    Arc: true,
    Pie: true,
    Line: true,
    LinePath: true,
    LineRadial: true,
    Area: true,
    AreaClosed: true,
    AreaStack: true,
    Bar: true,
    BarRounded: true,
    BarGroup: true,
    BarGroupHorizontal: true,
    BarStack: true,
    BarStackHorizontal: true,
    Stack: true,
    stackOffset: true,
    stackOrder: true,
    LinkHorizontal: true,
    LinkVertical: true,
    LinkRadial: true,
    LinkHorizontalCurve: true,
    LinkVerticalCurve: true,
    LinkRadialCurve: true,
    LinkHorizontalLine: true,
    LinkVerticalLine: true,
    LinkRadialLine: true,
    LinkHorizontalStep: true,
    LinkVerticalStep: true,
    LinkRadialStep: true,
    Polygon: true,
    Circle: true,
    SplitLinePath: true,
    STACK_OFFSETS: true,
    STACK_OFFSET_NAMES: true,
    STACK_ORDERS: true,
    STACK_ORDER_NAMES: true,
    degreesToRadians: true,
    pathHorizontalDiagonal: true,
    pathVerticalDiagonal: true,
    pathRadialDiagonal: true,
    pathHorizontalCurve: true,
    pathVerticalCurve: true,
    pathRadialCurve: true,
    pathHorizontalLine: true,
    pathVerticalLine: true,
    pathRadialLine: true,
    pathHorizontalStep: true,
    pathVerticalStep: true,
    pathRadialStep: true,
    getPoints: true,
    getPoint: true
  };
  exports.stackOrder = exports.stackOffset = exports.pathVerticalStep = exports.pathVerticalLine = exports.pathVerticalDiagonal = exports.pathVerticalCurve = exports.pathRadialStep = exports.pathRadialLine = exports.pathRadialDiagonal = exports.pathRadialCurve = exports.pathHorizontalStep = exports.pathHorizontalLine = exports.pathHorizontalDiagonal = exports.pathHorizontalCurve = exports.getPoints = exports.getPoint = exports.degreesToRadians = exports.Stack = exports.SplitLinePath = exports.STACK_ORDER_NAMES = exports.STACK_ORDERS = exports.STACK_OFFSET_NAMES = exports.STACK_OFFSETS = exports.Polygon = exports.Pie = exports.LinkVerticalStep = exports.LinkVerticalLine = exports.LinkVerticalCurve = exports.LinkVertical = exports.LinkRadialStep = exports.LinkRadialLine = exports.LinkRadialCurve = exports.LinkRadial = exports.LinkHorizontalStep = exports.LinkHorizontalLine = exports.LinkHorizontalCurve = exports.LinkHorizontal = exports.LineRadial = exports.LinePath = exports.Line = exports.Circle = exports.BarStackHorizontal = exports.BarStack = exports.BarRounded = exports.BarGroupHorizontal = exports.BarGroup = exports.Bar = exports.AreaStack = exports.AreaClosed = exports.Area = exports.Arc = undefined;
  var _Arc = _interopRequireDefault(require_Arc());
  exports.Arc = _Arc.default;
  var _Pie = _interopRequireDefault(require_Pie());
  exports.Pie = _Pie.default;
  var _Line = _interopRequireDefault(require_Line());
  exports.Line = _Line.default;
  var _LinePath = _interopRequireDefault(require_LinePath());
  exports.LinePath = _LinePath.default;
  var _LineRadial = _interopRequireDefault(require_LineRadial());
  exports.LineRadial = _LineRadial.default;
  var _Area = _interopRequireDefault(require_Area());
  exports.Area = _Area.default;
  var _AreaClosed = _interopRequireDefault(require_AreaClosed());
  exports.AreaClosed = _AreaClosed.default;
  var _AreaStack = _interopRequireDefault(require_AreaStack());
  exports.AreaStack = _AreaStack.default;
  var _Bar = _interopRequireDefault(require_Bar());
  exports.Bar = _Bar.default;
  var _BarRounded = _interopRequireDefault(require_BarRounded());
  exports.BarRounded = _BarRounded.default;
  var _BarGroup = _interopRequireDefault(require_BarGroup());
  exports.BarGroup = _BarGroup.default;
  var _BarGroupHorizontal = _interopRequireDefault(require_BarGroupHorizontal());
  exports.BarGroupHorizontal = _BarGroupHorizontal.default;
  var _BarStack = _interopRequireDefault(require_BarStack());
  exports.BarStack = _BarStack.default;
  var _BarStackHorizontal = _interopRequireDefault(require_BarStackHorizontal());
  exports.BarStackHorizontal = _BarStackHorizontal.default;
  var _Stack = _interopRequireDefault(require_Stack());
  exports.Stack = _Stack.default;
  var _stackOffset = _interopRequireWildcard(require_stackOffset());
  exports.stackOffset = _stackOffset.default;
  exports.STACK_OFFSETS = _stackOffset.STACK_OFFSETS;
  exports.STACK_OFFSET_NAMES = _stackOffset.STACK_OFFSET_NAMES;
  var _stackOrder = _interopRequireWildcard(require_stackOrder());
  exports.stackOrder = _stackOrder.default;
  exports.STACK_ORDERS = _stackOrder.STACK_ORDERS;
  exports.STACK_ORDER_NAMES = _stackOrder.STACK_ORDER_NAMES;
  var _trigonometry = require_trigonometry();
  exports.degreesToRadians = _trigonometry.degreesToRadians;
  var _LinkHorizontal = _interopRequireWildcard(require_LinkHorizontal());
  exports.LinkHorizontal = _LinkHorizontal.default;
  exports.pathHorizontalDiagonal = _LinkHorizontal.pathHorizontalDiagonal;
  var _LinkVertical = _interopRequireWildcard(require_LinkVertical());
  exports.LinkVertical = _LinkVertical.default;
  exports.pathVerticalDiagonal = _LinkVertical.pathVerticalDiagonal;
  var _LinkRadial = _interopRequireWildcard(require_LinkRadial());
  exports.LinkRadial = _LinkRadial.default;
  exports.pathRadialDiagonal = _LinkRadial.pathRadialDiagonal;
  var _LinkHorizontalCurve = _interopRequireWildcard(require_LinkHorizontalCurve());
  exports.LinkHorizontalCurve = _LinkHorizontalCurve.default;
  exports.pathHorizontalCurve = _LinkHorizontalCurve.pathHorizontalCurve;
  var _LinkVerticalCurve = _interopRequireWildcard(require_LinkVerticalCurve());
  exports.LinkVerticalCurve = _LinkVerticalCurve.default;
  exports.pathVerticalCurve = _LinkVerticalCurve.pathVerticalCurve;
  var _LinkRadialCurve = _interopRequireWildcard(require_LinkRadialCurve());
  exports.LinkRadialCurve = _LinkRadialCurve.default;
  exports.pathRadialCurve = _LinkRadialCurve.pathRadialCurve;
  var _LinkHorizontalLine = _interopRequireWildcard(require_LinkHorizontalLine());
  exports.LinkHorizontalLine = _LinkHorizontalLine.default;
  exports.pathHorizontalLine = _LinkHorizontalLine.pathHorizontalLine;
  var _LinkVerticalLine = _interopRequireWildcard(require_LinkVerticalLine());
  exports.LinkVerticalLine = _LinkVerticalLine.default;
  exports.pathVerticalLine = _LinkVerticalLine.pathVerticalLine;
  var _LinkRadialLine = _interopRequireWildcard(require_LinkRadialLine());
  exports.LinkRadialLine = _LinkRadialLine.default;
  exports.pathRadialLine = _LinkRadialLine.pathRadialLine;
  var _LinkHorizontalStep = _interopRequireWildcard(require_LinkHorizontalStep());
  exports.LinkHorizontalStep = _LinkHorizontalStep.default;
  exports.pathHorizontalStep = _LinkHorizontalStep.pathHorizontalStep;
  var _LinkVerticalStep = _interopRequireWildcard(require_LinkVerticalStep());
  exports.LinkVerticalStep = _LinkVerticalStep.default;
  exports.pathVerticalStep = _LinkVerticalStep.pathVerticalStep;
  var _LinkRadialStep = _interopRequireWildcard(require_LinkRadialStep());
  exports.LinkRadialStep = _LinkRadialStep.default;
  exports.pathRadialStep = _LinkRadialStep.pathRadialStep;
  var _Polygon = _interopRequireWildcard(require_Polygon());
  exports.Polygon = _Polygon.default;
  exports.getPoints = _Polygon.getPoints;
  exports.getPoint = _Polygon.getPoint;
  var _Circle = _interopRequireDefault(require_Circle());
  exports.Circle = _Circle.default;
  var _SplitLinePath = _interopRequireDefault(require_SplitLinePath());
  exports.SplitLinePath = _SplitLinePath.default;
  var _D3ShapeConfig = require_D3ShapeConfig();
  Object.keys(_D3ShapeConfig).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports && exports[key] === _D3ShapeConfig[key])
      return;
    exports[key] = _D3ShapeConfig[key];
  });
  var _D3ShapeFactories = require_D3ShapeFactories();
  Object.keys(_D3ShapeFactories).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports && exports[key] === _D3ShapeFactories[key])
      return;
    exports[key] = _D3ShapeFactories[key];
  });
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
});

// node_modules/@visx/text/lib/util/getStringWidth.js
var require_getStringWidth = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _memoize = _interopRequireDefault(require_memoize());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var MEASUREMENT_ELEMENT_ID = "__react_svg_text_measurement_id";
  function getStringWidth(str, style) {
    try {
      var textEl = document.getElementById(MEASUREMENT_ELEMENT_ID);
      if (!textEl) {
        var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        svg.setAttribute("aria-hidden", "true");
        svg.style.width = "0";
        svg.style.height = "0";
        svg.style.position = "absolute";
        svg.style.top = "-100%";
        svg.style.left = "-100%";
        textEl = document.createElementNS("http://www.w3.org/2000/svg", "text");
        textEl.setAttribute("id", MEASUREMENT_ELEMENT_ID);
        svg.appendChild(textEl);
        document.body.appendChild(svg);
      }
      Object.assign(textEl.style, style);
      textEl.textContent = str;
      return textEl.getComputedTextLength();
    } catch (e) {
      return null;
    }
  }
  var _default = (0, _memoize.default)(getStringWidth, function(str, style) {
    return str + "_" + JSON.stringify(style);
  });
  exports.default = _default;
});

// node_modules/@visx/text/lib/hooks/useText.js
var require_useText = __commonJS((exports) => {
  var _react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = useText;
  var _reduceCssCalc = _interopRequireDefault(require_reduce_css_calc());
  var _getStringWidth = _interopRequireDefault(require_getStringWidth());
  var _excluded = ["verticalAnchor", "scaleToFit", "angle", "width", "lineHeight", "capHeight", "children", "style"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function isNumber(val) {
    return typeof val === "number";
  }
  function isXOrYInValid(xOrY) {
    return typeof xOrY === "number" && Number.isFinite(xOrY) || typeof xOrY === "string";
  }
  function useText(props) {
    var _props$verticalAnchor = props.verticalAnchor, verticalAnchor = _props$verticalAnchor === undefined ? "end" : _props$verticalAnchor, _props$scaleToFit = props.scaleToFit, scaleToFit = _props$scaleToFit === undefined ? false : _props$scaleToFit, angle = props.angle, width = props.width, _props$lineHeight = props.lineHeight, lineHeight = _props$lineHeight === undefined ? "1em" : _props$lineHeight, _props$capHeight = props.capHeight, capHeight = _props$capHeight === undefined ? "0.71em" : _props$capHeight, children = props.children, style = props.style, textProps = _objectWithoutPropertiesLoose(props, _excluded);
    var _textProps$x = textProps.x, x = _textProps$x === undefined ? 0 : _textProps$x, _textProps$y = textProps.y, y = _textProps$y === undefined ? 0 : _textProps$y;
    var isXOrYNotValid = !isXOrYInValid(x) || !isXOrYInValid(y);
    var _useMemo = (0, _react.useMemo)(function() {
      var words = children == null ? [] : children.toString().split(/(?:(?!\u00A0+)\s+)/);
      return {
        wordsWithWidth: words.map(function(word) {
          return {
            word,
            wordWidth: (0, _getStringWidth.default)(word, style) || 0
          };
        }),
        spaceWidth: (0, _getStringWidth.default)(" ", style) || 0
      };
    }, [children, style]), wordsWithWidth = _useMemo.wordsWithWidth, spaceWidth = _useMemo.spaceWidth;
    var wordsByLines = (0, _react.useMemo)(function() {
      if (isXOrYNotValid) {
        return [];
      }
      if (width || scaleToFit) {
        return wordsWithWidth.reduce(function(result, _ref) {
          var { word, wordWidth } = _ref;
          var currentLine = result[result.length - 1];
          if (currentLine && (width == null || scaleToFit || (currentLine.width || 0) + wordWidth + spaceWidth < width)) {
            currentLine.words.push(word);
            currentLine.width = currentLine.width || 0;
            currentLine.width += wordWidth + spaceWidth;
          } else {
            var newLine = {
              words: [word],
              width: wordWidth
            };
            result.push(newLine);
          }
          return result;
        }, []);
      }
      return [{
        words: children == null ? [] : children.toString().split(/(?:(?!\u00A0+)\s+)/)
      }];
    }, [isXOrYNotValid, width, scaleToFit, children, wordsWithWidth, spaceWidth]);
    var startDy = (0, _react.useMemo)(function() {
      var startDyStr = isXOrYNotValid ? "" : verticalAnchor === "start" ? (0, _reduceCssCalc.default)("calc(" + capHeight + ")") : verticalAnchor === "middle" ? (0, _reduceCssCalc.default)("calc(" + (wordsByLines.length - 1) / 2 + " * -" + lineHeight + " + (" + capHeight + " / 2))") : (0, _reduceCssCalc.default)("calc(" + (wordsByLines.length - 1) + " * -" + lineHeight + ")");
      return startDyStr;
    }, [isXOrYNotValid, verticalAnchor, capHeight, wordsByLines.length, lineHeight]);
    var transform = (0, _react.useMemo)(function() {
      var transforms = [];
      if (isXOrYNotValid) {
        return "";
      }
      if (isNumber(x) && isNumber(y) && isNumber(width) && scaleToFit && wordsByLines.length > 0) {
        var lineWidth = wordsByLines[0].width || 1;
        var sx = scaleToFit === "shrink-only" ? Math.min(width / lineWidth, 1) : width / lineWidth;
        var sy = sx;
        var originX = x - sx * x;
        var originY = y - sy * y;
        transforms.push("matrix(" + sx + ", 0, 0, " + sy + ", " + originX + ", " + originY + ")");
      }
      if (angle) {
        transforms.push("rotate(" + angle + ", " + x + ", " + y + ")");
      }
      return transforms.length > 0 ? transforms.join(" ") : "";
    }, [isXOrYNotValid, x, y, width, scaleToFit, wordsByLines, angle]);
    return {
      wordsByLines,
      startDy,
      transform
    };
  }
});

// node_modules/@visx/text/lib/Text.js
var require_Text = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = Text;
  var _react = _interopRequireDefault(react);
  var _useText2 = _interopRequireDefault(require_useText());
  var _excluded = ["dx", "dy", "textAnchor", "innerRef", "innerTextRef", "verticalAnchor", "angle", "lineHeight", "scaleToFit", "capHeight", "width"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var SVG_STYLE = {
    overflow: "visible"
  };
  function Text(props) {
    var _props$dx = props.dx, dx = _props$dx === undefined ? 0 : _props$dx, _props$dy = props.dy, dy = _props$dy === undefined ? 0 : _props$dy, _props$textAnchor = props.textAnchor, textAnchor = _props$textAnchor === undefined ? "start" : _props$textAnchor, innerRef = props.innerRef, innerTextRef = props.innerTextRef, verticalAnchor = props.verticalAnchor, angle = props.angle, _props$lineHeight = props.lineHeight, lineHeight = _props$lineHeight === undefined ? "1em" : _props$lineHeight, _props$scaleToFit = props.scaleToFit, scaleToFit = _props$scaleToFit === undefined ? false : _props$scaleToFit, capHeight = props.capHeight, width = props.width, textProps = _objectWithoutPropertiesLoose(props, _excluded);
    var _textProps$x = textProps.x, x = _textProps$x === undefined ? 0 : _textProps$x, fontSize = textProps.fontSize;
    var _useText = (0, _useText2.default)(props), wordsByLines = _useText.wordsByLines, startDy = _useText.startDy, transform = _useText.transform;
    return /* @__PURE__ */ _react.default.createElement("svg", {
      ref: innerRef,
      x: dx,
      y: dy,
      fontSize,
      style: SVG_STYLE
    }, wordsByLines.length > 0 ? /* @__PURE__ */ _react.default.createElement("text", _extends({
      ref: innerTextRef,
      transform
    }, textProps, {
      textAnchor
    }), wordsByLines.map(function(line, index) {
      return /* @__PURE__ */ _react.default.createElement("tspan", {
        key: index,
        x,
        dy: index === 0 ? startDy : lineHeight
      }, line.words.join(" "));
    })) : null);
  }
});

// node_modules/@visx/text/lib/types.js
var require_types = __commonJS((exports) => {
  exports.__esModule = true;
});

// node_modules/@visx/text/lib/index.js
var require_lib4 = __commonJS((exports) => {
  exports.__esModule = true;
  var _exportNames = {
    Text: true,
    getStringWidth: true,
    useText: true
  };
  exports.useText = exports.getStringWidth = exports.Text = undefined;
  var _Text = _interopRequireDefault(require_Text());
  exports.Text = _Text.default;
  var _getStringWidth = _interopRequireDefault(require_getStringWidth());
  exports.getStringWidth = _getStringWidth.default;
  var _useText = _interopRequireDefault(require_useText());
  exports.useText = _useText.default;
  var _types = require_types();
  Object.keys(_types).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key))
      return;
    if (key in exports && exports[key] === _types[key])
      return;
    exports[key] = _types[key];
  });
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
});

// node_modules/@visx/axis/lib/constants/orientation.js
var require_orientation = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var Orientation = {
    top: "top",
    left: "left",
    right: "right",
    bottom: "bottom"
  };
  var _default = Orientation;
  exports.default = _default;
});

// node_modules/@visx/axis/lib/utils/getLabelTransform.js
var require_getLabelTransform = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = getLabelTransform;
  var _orientation = _interopRequireDefault(require_orientation());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function getLabelTransform(_ref) {
    var { labelOffset, labelProps, orientation, range: range2, tickLabelFontSize, tickLength } = _ref;
    var sign = orientation === _orientation.default.left || orientation === _orientation.default.top ? -1 : 1;
    var x;
    var y;
    var transform;
    if (orientation === _orientation.default.top || orientation === _orientation.default.bottom) {
      var yBottomOffset = orientation === _orientation.default.bottom && typeof labelProps.fontSize === "number" ? labelProps.fontSize : 0;
      x = (Number(range2[0]) + Number(range2[range2.length - 1])) / 2;
      y = sign * (tickLength + labelOffset + tickLabelFontSize + yBottomOffset);
    } else {
      x = sign * ((Number(range2[0]) + Number(range2[range2.length - 1])) / 2);
      y = -(tickLength + labelOffset);
      transform = "rotate(" + sign * 90 + ")";
    }
    return {
      x,
      y,
      transform
    };
  }
});

// node_modules/@visx/axis/lib/axis/Ticks.js
var require_Ticks = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = Ticks;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _shape = require_lib3();
  var _group = require_lib();
  var _text = require_lib4();
  var _orientation = _interopRequireDefault(require_orientation());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function Ticks(_ref) {
    var { hideTicks, horizontal, orientation, tickClassName, tickComponent, tickLabelProps: allTickLabelProps, tickStroke: _ref$tickStroke } = _ref, tickStroke = _ref$tickStroke === undefined ? "#222" : _ref$tickStroke, tickTransform = _ref.tickTransform, ticks2 = _ref.ticks, strokeWidth = _ref.strokeWidth, tickLineProps = _ref.tickLineProps;
    return ticks2.map(function(_ref2) {
      var _allTickLabelProps$in;
      var { value, index, from, to: to2, formattedValue } = _ref2;
      var tickLabelProps = (_allTickLabelProps$in = allTickLabelProps[index]) != null ? _allTickLabelProps$in : {};
      var tickLabelFontSize = Math.max(10, typeof tickLabelProps.fontSize === "number" && tickLabelProps.fontSize || 0);
      var tickYCoord = to2.y + (horizontal && orientation !== _orientation.default.top ? tickLabelFontSize : 0);
      return /* @__PURE__ */ _react.default.createElement(_group.Group, {
        key: "visx-tick-" + value + "-" + index,
        className: (0, _classnames.default)("visx-axis-tick", tickClassName),
        transform: tickTransform
      }, !hideTicks && /* @__PURE__ */ _react.default.createElement(_shape.Line, _extends({
        from,
        to: to2,
        stroke: tickStroke,
        strokeWidth,
        strokeLinecap: "square"
      }, tickLineProps)), tickComponent ? tickComponent(_extends({}, tickLabelProps, {
        x: to2.x,
        y: tickYCoord,
        formattedValue
      })) : /* @__PURE__ */ _react.default.createElement(_text.Text, _extends({
        x: to2.x,
        y: tickYCoord
      }, tickLabelProps), formattedValue));
    });
  }
});

// node_modules/@visx/axis/lib/axis/AxisRenderer.js
var require_AxisRenderer = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = AxisRenderer;
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _shape = require_lib3();
  var _text = require_lib4();
  var _getLabelTransform = _interopRequireDefault(require_getLabelTransform());
  var _orientation = _interopRequireDefault(require_orientation());
  var _Ticks = _interopRequireDefault(require_Ticks());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  var defaultTextProps = {
    textAnchor: "middle",
    fontFamily: "Arial",
    fontSize: 10,
    fill: "#222"
  };
  function AxisRenderer(_ref) {
    var { axisFromPoint, axisLineClassName, axisToPoint, hideAxisLine, hideTicks, horizontal, label: _ref$label } = _ref, label = _ref$label === undefined ? "" : _ref$label, labelClassName = _ref.labelClassName, _ref$labelOffset = _ref.labelOffset, labelOffset = _ref$labelOffset === undefined ? 14 : _ref$labelOffset, labelProps = _ref.labelProps, _ref$orientation = _ref.orientation, orientation = _ref$orientation === undefined ? _orientation.default.bottom : _ref$orientation, scale = _ref.scale, _ref$stroke = _ref.stroke, stroke = _ref$stroke === undefined ? "#222" : _ref$stroke, strokeDasharray = _ref.strokeDasharray, _ref$strokeWidth = _ref.strokeWidth, strokeWidth = _ref$strokeWidth === undefined ? 1 : _ref$strokeWidth, tickClassName = _ref.tickClassName, tickComponent = _ref.tickComponent, tickLineProps = _ref.tickLineProps, tickLabelProps = _ref.tickLabelProps, _ref$tickLength = _ref.tickLength, tickLength = _ref$tickLength === undefined ? 8 : _ref$tickLength, _ref$tickStroke = _ref.tickStroke, tickStroke = _ref$tickStroke === undefined ? "#222" : _ref$tickStroke, tickTransform = _ref.tickTransform, ticks2 = _ref.ticks, _ref$ticksComponent = _ref.ticksComponent, ticksComponent = _ref$ticksComponent === undefined ? _Ticks.default : _ref$ticksComponent;
    var combinedLabelProps = _extends({}, defaultTextProps, labelProps);
    var tickLabelPropsDefault = _extends({}, defaultTextProps, typeof tickLabelProps === "object" ? tickLabelProps : null);
    var allTickLabelProps = ticks2.map(function(_ref2) {
      var { value, index } = _ref2;
      return typeof tickLabelProps === "function" ? tickLabelProps(value, index, ticks2) : tickLabelPropsDefault;
    });
    var maxTickLabelFontSize = Math.max.apply(Math, [10].concat(allTickLabelProps.map(function(props) {
      return typeof props.fontSize === "number" ? props.fontSize : 0;
    })));
    return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, ticksComponent({
      hideTicks,
      horizontal,
      orientation,
      scale,
      tickClassName,
      tickComponent,
      tickLabelProps: allTickLabelProps,
      tickStroke,
      tickTransform,
      ticks: ticks2,
      strokeWidth,
      tickLineProps
    }), !hideAxisLine && /* @__PURE__ */ _react.default.createElement(_shape.Line, {
      className: (0, _classnames.default)("visx-axis-line", axisLineClassName),
      from: axisFromPoint,
      to: axisToPoint,
      stroke,
      strokeWidth,
      strokeDasharray
    }), label && /* @__PURE__ */ _react.default.createElement(_text.Text, _extends({
      className: (0, _classnames.default)("visx-axis-label", labelClassName)
    }, (0, _getLabelTransform.default)({
      labelOffset,
      labelProps: combinedLabelProps,
      orientation,
      range: scale.range(),
      tickLabelFontSize: maxTickLabelFontSize,
      tickLength
    }), combinedLabelProps), label));
  }
});

// node_modules/@visx/axis/lib/utils/getTickPosition.js
var require_getTickPosition = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = getTickPosition;
  function getTickPosition(scale, align) {
    if (align === undefined) {
      align = "center";
    }
    var s = scale;
    if (align !== "start" && "bandwidth" in s) {
      var offset = s.bandwidth();
      if (align === "center")
        offset /= 2;
      if (s.round())
        offset = Math.round(offset);
      return function(d) {
        var scaledValue = s(d);
        return typeof scaledValue === "number" ? scaledValue + offset : scaledValue;
      };
    }
    return scale;
  }
});

// node_modules/@visx/axis/lib/utils/getTickFormatter.js
var require_getTickFormatter = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = getTickFormatter;
  var _scale = require_lib2();
  function getTickFormatter(scale) {
    var s = scale;
    if ("tickFormat" in s) {
      return s.tickFormat();
    }
    return _scale.toString;
  }
});

// node_modules/@visx/point/lib/Point.js
var require_Point = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var Point = /* @__PURE__ */ function() {
    function Point2(_ref) {
      var _ref$x = _ref.x, x = _ref$x === undefined ? 0 : _ref$x, _ref$y = _ref.y, y = _ref$y === undefined ? 0 : _ref$y;
      this.x = 0;
      this.y = 0;
      this.x = x;
      this.y = y;
    }
    var _proto = Point2.prototype;
    _proto.value = function value() {
      return {
        x: this.x,
        y: this.y
      };
    };
    _proto.toArray = function toArray() {
      return [this.x, this.y];
    };
    return Point2;
  }();
  exports.default = Point;
});

// node_modules/@visx/point/lib/sumPoints.js
var require_sumPoints = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = sumPoints;
  var _Point = _interopRequireDefault(require_Point());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function sumPoints(point1, point2) {
    return new _Point.default({
      x: point1.x + point2.x,
      y: point1.y + point2.y
    });
  }
});

// node_modules/@visx/point/lib/subtractPoints.js
var require_subtractPoints = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = subtractPoints;
  var _Point = _interopRequireDefault(require_Point());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function subtractPoints(point1, point2) {
    return new _Point.default({
      x: point1.x - point2.x,
      y: point1.y - point2.y
    });
  }
});

// node_modules/@visx/point/lib/index.js
var require_lib5 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.sumPoints = exports.subtractPoints = exports.Point = undefined;
  var _Point = _interopRequireDefault(require_Point());
  exports.Point = _Point.default;
  var _sumPoints = _interopRequireDefault(require_sumPoints());
  exports.sumPoints = _sumPoints.default;
  var _subtractPoints = _interopRequireDefault(require_subtractPoints());
  exports.subtractPoints = _subtractPoints.default;
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
});

// node_modules/@visx/axis/lib/utils/createPoint.js
var require_createPoint = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = createPoint;
  var _point = require_lib5();
  function createPoint(_ref, horizontal) {
    var { x, y } = _ref;
    return new _point.Point(horizontal ? {
      x,
      y
    } : {
      x: y,
      y: x
    });
  }
});

// node_modules/@visx/axis/lib/utils/getAxisRangePaddingConfig.js
var require_getAxisRangePaddingConfig = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = getAxisRangePaddingConfig;
  exports.defaultAxisRangePadding = undefined;
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  var defaultAxisRangePadding = 0;
  exports.defaultAxisRangePadding = defaultAxisRangePadding;
  function getAxisRangePaddingConfig(originalRangePadding) {
    if (originalRangePadding === undefined) {
      originalRangePadding = defaultAxisRangePadding;
    }
    return typeof originalRangePadding === "number" ? {
      start: originalRangePadding,
      end: originalRangePadding
    } : _extends({
      start: defaultAxisRangePadding,
      end: defaultAxisRangePadding
    }, originalRangePadding);
  }
});

// node_modules/@visx/axis/lib/axis/Axis.js
var require_Axis = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = Axis;
  var _propTypes = _interopRequireDefault(require_prop_types());
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _group = require_lib();
  var _scale = require_lib2();
  var _AxisRenderer = _interopRequireDefault(require_AxisRenderer());
  var _getTickPosition = _interopRequireDefault(require_getTickPosition());
  var _getTickFormatter = _interopRequireDefault(require_getTickFormatter());
  var _createPoint = _interopRequireDefault(require_createPoint());
  var _orientation = _interopRequireDefault(require_orientation());
  var _getAxisRangePaddingConfig = _interopRequireDefault(require_getAxisRangePaddingConfig());
  var _excluded = ["children", "axisClassName", "hideAxisLine", "hideTicks", "hideZero", "innerRef", "left", "numTicks", "orientation", "rangePadding", "scale", "tickFormat", "tickLength", "tickValues", "top"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function Axis(_ref) {
    var _ref$children = _ref.children, children = _ref$children === undefined ? _AxisRenderer.default : _ref$children, axisClassName = _ref.axisClassName, _ref$hideAxisLine = _ref.hideAxisLine, hideAxisLine = _ref$hideAxisLine === undefined ? false : _ref$hideAxisLine, _ref$hideTicks = _ref.hideTicks, hideTicks = _ref$hideTicks === undefined ? false : _ref$hideTicks, _ref$hideZero = _ref.hideZero, hideZero = _ref$hideZero === undefined ? false : _ref$hideZero, innerRef = _ref.innerRef, _ref$left = _ref.left, left = _ref$left === undefined ? 0 : _ref$left, _ref$numTicks = _ref.numTicks, numTicks = _ref$numTicks === undefined ? 10 : _ref$numTicks, _ref$orientation = _ref.orientation, orientation = _ref$orientation === undefined ? _orientation.default.bottom : _ref$orientation, _ref$rangePadding = _ref.rangePadding, rangePadding = _ref$rangePadding === undefined ? 0 : _ref$rangePadding, scale = _ref.scale, tickFormat2 = _ref.tickFormat, _ref$tickLength = _ref.tickLength, tickLength = _ref$tickLength === undefined ? 8 : _ref$tickLength, tickValues = _ref.tickValues, _ref$top = _ref.top, top = _ref$top === undefined ? 0 : _ref$top, restProps = _objectWithoutPropertiesLoose(_ref, _excluded);
    var format2 = tickFormat2 != null ? tickFormat2 : (0, _getTickFormatter.default)(scale);
    var isLeft = orientation === _orientation.default.left;
    var isTop = orientation === _orientation.default.top;
    var horizontal = isTop || orientation === _orientation.default.bottom;
    var tickPosition = (0, _getTickPosition.default)(scale);
    var tickSign = isLeft || isTop ? -1 : 1;
    var range2 = scale.range();
    var rangePaddingConfig = (0, _getAxisRangePaddingConfig.default)(rangePadding);
    var axisFromPoint = (0, _createPoint.default)({
      x: Number(range2[0]) + 0.5 - rangePaddingConfig.start,
      y: 0
    }, horizontal);
    var axisToPoint = (0, _createPoint.default)({
      x: Number(range2[range2.length - 1]) + 0.5 + rangePaddingConfig.end,
      y: 0
    }, horizontal);
    var filteredTickValues = (tickValues != null ? tickValues : (0, _scale.getTicks)(scale, numTicks)).filter(function(value) {
      return !hideZero || value !== 0 && value !== "0";
    }).map(function(value, index) {
      return {
        value,
        index
      };
    });
    var ticks2 = filteredTickValues.map(function(_ref2) {
      var { value, index } = _ref2;
      var scaledValue = (0, _scale.coerceNumber)(tickPosition(value));
      return {
        value,
        index,
        from: (0, _createPoint.default)({
          x: scaledValue,
          y: 0
        }, horizontal),
        to: (0, _createPoint.default)({
          x: scaledValue,
          y: tickLength * tickSign
        }, horizontal),
        formattedValue: format2(value, index, filteredTickValues)
      };
    });
    return /* @__PURE__ */ _react.default.createElement(_group.Group, {
      className: (0, _classnames.default)("visx-axis", axisClassName),
      innerRef,
      top,
      left
    }, children(_extends({}, restProps, {
      axisFromPoint,
      axisToPoint,
      hideAxisLine,
      hideTicks,
      hideZero,
      horizontal,
      numTicks,
      orientation,
      rangePadding,
      scale,
      tickFormat: format2,
      tickLength,
      tickPosition,
      tickSign,
      ticks: ticks2
    })));
  }
});

// node_modules/@react-spring/rafz/dist/cjs/react-spring_rafz.development.cjs
var require_react_spring_rafz_development = __commonJS((exports, module) => {
  var __defProp3 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export3 = (target, all) => {
    for (var name in all)
      __defProp3(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to2, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to2, key) && key !== except)
          __defProp3(to2, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to2;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp3({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export3(src_exports, {
    __raf: () => __raf,
    raf: () => raf2
  });
  module.exports = __toCommonJS(src_exports);
  var updateQueue2 = makeQueue2();
  var raf2 = (fn) => schedule2(fn, updateQueue2);
  var writeQueue2 = makeQueue2();
  raf2.write = (fn) => schedule2(fn, writeQueue2);
  var onStartQueue2 = makeQueue2();
  raf2.onStart = (fn) => schedule2(fn, onStartQueue2);
  var onFrameQueue2 = makeQueue2();
  raf2.onFrame = (fn) => schedule2(fn, onFrameQueue2);
  var onFinishQueue2 = makeQueue2();
  raf2.onFinish = (fn) => schedule2(fn, onFinishQueue2);
  var timeouts2 = [];
  raf2.setTimeout = (handler, ms) => {
    const time2 = raf2.now() + ms;
    const cancel = () => {
      const i = timeouts2.findIndex((t) => t.cancel == cancel);
      if (~i)
        timeouts2.splice(i, 1);
      pendingCount2 -= ~i ? 1 : 0;
    };
    const timeout = { time: time2, handler, cancel };
    timeouts2.splice(findTimeout2(time2), 0, timeout);
    pendingCount2 += 1;
    start2();
    return timeout;
  };
  var findTimeout2 = (time2) => ~(~timeouts2.findIndex((t) => t.time > time2) || ~timeouts2.length);
  raf2.cancel = (fn) => {
    onStartQueue2.delete(fn);
    onFrameQueue2.delete(fn);
    onFinishQueue2.delete(fn);
    updateQueue2.delete(fn);
    writeQueue2.delete(fn);
  };
  raf2.sync = (fn) => {
    sync2 = true;
    raf2.batchedUpdates(fn);
    sync2 = false;
  };
  raf2.throttle = (fn) => {
    let lastArgs;
    function queuedFn() {
      try {
        fn(...lastArgs);
      } finally {
        lastArgs = null;
      }
    }
    function throttled(...args) {
      lastArgs = args;
      raf2.onStart(queuedFn);
    }
    throttled.handler = fn;
    throttled.cancel = () => {
      onStartQueue2.delete(queuedFn);
      lastArgs = null;
    };
    return throttled;
  };
  var nativeRaf2 = typeof window != "undefined" ? window.requestAnimationFrame : () => {
  };
  raf2.use = (impl) => nativeRaf2 = impl;
  raf2.now = typeof performance != "undefined" ? () => performance.now() : Date.now;
  raf2.batchedUpdates = (fn) => fn();
  raf2.catch = console.error;
  raf2.frameLoop = "always";
  raf2.advance = () => {
    if (raf2.frameLoop !== "demand") {
      console.warn("Cannot call the manual advancement of rafz whilst frameLoop is not set as demand");
    } else {
      update3();
    }
  };
  var ts2 = -1;
  var pendingCount2 = 0;
  var sync2 = false;
  function schedule2(fn, queue) {
    if (sync2) {
      queue.delete(fn);
      fn(0);
    } else {
      queue.add(fn);
      start2();
    }
  }
  function start2() {
    if (ts2 < 0) {
      ts2 = 0;
      if (raf2.frameLoop !== "demand") {
        nativeRaf2(loop2);
      }
    }
  }
  function stop2() {
    ts2 = -1;
  }
  function loop2() {
    if (~ts2) {
      nativeRaf2(loop2);
      raf2.batchedUpdates(update3);
    }
  }
  function update3() {
    const prevTs = ts2;
    ts2 = raf2.now();
    const count = findTimeout2(ts2);
    if (count) {
      eachSafely2(timeouts2.splice(0, count), (t) => t.handler());
      pendingCount2 -= count;
    }
    if (!pendingCount2) {
      stop2();
      return;
    }
    onStartQueue2.flush();
    updateQueue2.flush(prevTs ? Math.min(64, ts2 - prevTs) : 16.667);
    onFrameQueue2.flush();
    writeQueue2.flush();
    onFinishQueue2.flush();
  }
  function makeQueue2() {
    let next = /* @__PURE__ */ new Set;
    let current = next;
    return {
      add(fn) {
        pendingCount2 += current == next && !next.has(fn) ? 1 : 0;
        next.add(fn);
      },
      delete(fn) {
        pendingCount2 -= current == next && next.has(fn) ? 1 : 0;
        return next.delete(fn);
      },
      flush(arg) {
        if (current.size) {
          next = /* @__PURE__ */ new Set;
          pendingCount2 -= current.size;
          eachSafely2(current, (fn) => fn(arg) && next.add(fn));
          pendingCount2 += next.size;
          current = next;
        }
      }
    };
  }
  function eachSafely2(values, each2) {
    values.forEach((value) => {
      try {
        each2(value);
      } catch (e) {
        raf2.catch(e);
      }
    });
  }
  var __raf = {
    count() {
      return pendingCount2;
    },
    isRunning() {
      return ts2 >= 0;
    },
    clear() {
      ts2 = -1;
      timeouts2 = [];
      onStartQueue2 = makeQueue2();
      updateQueue2 = makeQueue2();
      onFrameQueue2 = makeQueue2();
      writeQueue2 = makeQueue2();
      onFinishQueue2 = makeQueue2();
      pendingCount2 = 0;
    }
  };
});

// node_modules/@react-spring/rafz/dist/cjs/index.js
var require_cjs = __commonJS((exports, module) => {
  if (false) {
  } else {
    module.exports = require_react_spring_rafz_development();
  }
});

// node_modules/@react-spring/shared/dist/cjs/react-spring_shared.development.cjs
var require_react_spring_shared_development = __commonJS((exports, module) => {
  var import_react17 = __toESM(require_react(), 1);
  var import_react42 = __toESM(require_react(), 1);
  var import_react32 = __toESM(require_react(), 1);
  var import_react22 = __toESM(require_react(), 1);
  var import_react52 = __toESM(require_react(), 1);
  var import_react62 = __toESM(require_react(), 1);
  var import_react72 = __toESM(require_react(), 1);
  var import_react82 = __toESM(require_react(), 1);
  var __defProp3 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export3 = (target, all) => {
    for (var name in all)
      __defProp3(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to22, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to22, key) && key !== except)
          __defProp3(to22, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to22;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp3({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export3(src_exports, {
    FluidValue: () => FluidValue2,
    Globals: () => globals_exports2,
    addFluidObserver: () => addFluidObserver2,
    callFluidObserver: () => callFluidObserver2,
    callFluidObservers: () => callFluidObservers2,
    clamp: () => clamp2,
    colorToRgba: () => colorToRgba2,
    colors: () => colors22,
    createInterpolator: () => createInterpolator2,
    createStringInterpolator: () => createStringInterpolator22,
    defineHidden: () => defineHidden2,
    deprecateDirectCall: () => deprecateDirectCall2,
    deprecateInterpolate: () => deprecateInterpolate2,
    each: () => each2,
    eachProp: () => eachProp2,
    easings: () => easings2,
    flush: () => flush2,
    flushCalls: () => flushCalls2,
    frameLoop: () => frameLoop2,
    getFluidObservers: () => getFluidObservers2,
    getFluidValue: () => getFluidValue2,
    hasFluidValue: () => hasFluidValue2,
    hex3: () => hex32,
    hex4: () => hex42,
    hex6: () => hex62,
    hex8: () => hex82,
    hsl: () => hsl4,
    hsla: () => hsla3,
    is: () => is2,
    isAnimatedString: () => isAnimatedString2,
    isEqual: () => isEqual2,
    isSSR: () => isSSR2,
    noop: () => noop2,
    onResize: () => onResize2,
    onScroll: () => onScroll2,
    once: () => once2,
    prefix: () => prefix2,
    raf: () => import_rafz42.raf,
    removeFluidObserver: () => removeFluidObserver2,
    rgb: () => rgb3,
    rgba: () => rgba3,
    setFluidGetter: () => setFluidGetter2,
    toArray: () => toArray2,
    useConstant: () => useConstant2,
    useForceUpdate: () => useForceUpdate2,
    useIsomorphicLayoutEffect: () => useIsomorphicLayoutEffect2,
    useMemoOne: () => useMemoOne2,
    useOnce: () => useOnce2,
    usePrev: () => usePrev2,
    useReducedMotion: () => useReducedMotion2
  });
  module.exports = __toCommonJS(src_exports);
  var globals_exports2 = {};
  __export3(globals_exports2, {
    assign: () => assign2,
    colors: () => colors3,
    createStringInterpolator: () => createStringInterpolator3,
    skipAnimation: () => skipAnimation2,
    to: () => to2,
    willAdvance: () => willAdvance2
  });
  var import_rafz5 = require_cjs();
  function noop2() {
  }
  var defineHidden2 = (obj, key, value) => Object.defineProperty(obj, key, { value, writable: true, configurable: true });
  var is2 = {
    arr: Array.isArray,
    obj: (a) => !!a && a.constructor.name === "Object",
    fun: (a) => typeof a === "function",
    str: (a) => typeof a === "string",
    num: (a) => typeof a === "number",
    und: (a) => a === undefined
  };
  function isEqual2(a, b) {
    if (is2.arr(a)) {
      if (!is2.arr(b) || a.length !== b.length)
        return false;
      for (let i = 0;i < a.length; i++) {
        if (a[i] !== b[i])
          return false;
      }
      return true;
    }
    return a === b;
  }
  var each2 = (obj, fn) => obj.forEach(fn);
  function eachProp2(obj, fn, ctx2) {
    if (is2.arr(obj)) {
      for (let i = 0;i < obj.length; i++) {
        fn.call(ctx2, obj[i], `${i}`);
      }
      return;
    }
    for (const key in obj) {
      if (obj.hasOwnProperty(key)) {
        fn.call(ctx2, obj[key], key);
      }
    }
  }
  var toArray2 = (a) => is2.und(a) ? [] : is2.arr(a) ? a : [a];
  function flush2(queue, iterator) {
    if (queue.size) {
      const items = Array.from(queue);
      queue.clear();
      each2(items, iterator);
    }
  }
  var flushCalls2 = (queue, ...args) => flush2(queue, (fn) => fn(...args));
  var isSSR2 = () => typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
  var createStringInterpolator3;
  var to2;
  var colors3 = null;
  var skipAnimation2 = false;
  var willAdvance2 = noop2;
  var assign2 = (globals) => {
    if (globals.to)
      to2 = globals.to;
    if (globals.now)
      import_rafz5.raf.now = globals.now;
    if (globals.colors !== undefined)
      colors3 = globals.colors;
    if (globals.skipAnimation != null)
      skipAnimation2 = globals.skipAnimation;
    if (globals.createStringInterpolator)
      createStringInterpolator3 = globals.createStringInterpolator;
    if (globals.requestAnimationFrame)
      import_rafz5.raf.use(globals.requestAnimationFrame);
    if (globals.batchedUpdates)
      import_rafz5.raf.batchedUpdates = globals.batchedUpdates;
    if (globals.willAdvance)
      willAdvance2 = globals.willAdvance;
    if (globals.frameLoop)
      import_rafz5.raf.frameLoop = globals.frameLoop;
  };
  var import_rafz22 = require_cjs();
  var startQueue2 = /* @__PURE__ */ new Set;
  var currentFrame2 = [];
  var prevFrame2 = [];
  var priority2 = 0;
  var frameLoop2 = {
    get idle() {
      return !startQueue2.size && !currentFrame2.length;
    },
    start(animation) {
      if (priority2 > animation.priority) {
        startQueue2.add(animation);
        import_rafz22.raf.onStart(flushStartQueue2);
      } else {
        startSafely2(animation);
        (0, import_rafz22.raf)(advance2);
      }
    },
    advance: advance2,
    sort(animation) {
      if (priority2) {
        import_rafz22.raf.onFrame(() => frameLoop2.sort(animation));
      } else {
        const prevIndex = currentFrame2.indexOf(animation);
        if (~prevIndex) {
          currentFrame2.splice(prevIndex, 1);
          startUnsafely2(animation);
        }
      }
    },
    clear() {
      currentFrame2 = [];
      startQueue2.clear();
    }
  };
  function flushStartQueue2() {
    startQueue2.forEach(startSafely2);
    startQueue2.clear();
    (0, import_rafz22.raf)(advance2);
  }
  function startSafely2(animation) {
    if (!currentFrame2.includes(animation))
      startUnsafely2(animation);
  }
  function startUnsafely2(animation) {
    currentFrame2.splice(findIndex2(currentFrame2, (other) => other.priority > animation.priority), 0, animation);
  }
  function advance2(dt) {
    const nextFrame = prevFrame2;
    for (let i = 0;i < currentFrame2.length; i++) {
      const animation = currentFrame2[i];
      priority2 = animation.priority;
      if (!animation.idle) {
        willAdvance2(animation);
        animation.advance(dt);
        if (!animation.idle) {
          nextFrame.push(animation);
        }
      }
    }
    priority2 = 0;
    prevFrame2 = currentFrame2;
    prevFrame2.length = 0;
    currentFrame2 = nextFrame;
    return currentFrame2.length > 0;
  }
  function findIndex2(arr, test) {
    const index = arr.findIndex(test);
    return index < 0 ? arr.length : index;
  }
  var clamp2 = (min, max, v) => Math.min(Math.max(v, min), max);
  var colors22 = {
    transparent: 0,
    aliceblue: 4042850303,
    antiquewhite: 4209760255,
    aqua: 16777215,
    aquamarine: 2147472639,
    azure: 4043309055,
    beige: 4126530815,
    bisque: 4293182719,
    black: 255,
    blanchedalmond: 4293643775,
    blue: 65535,
    blueviolet: 2318131967,
    brown: 2771004159,
    burlywood: 3736635391,
    burntsienna: 3934150143,
    cadetblue: 1604231423,
    chartreuse: 2147418367,
    chocolate: 3530104575,
    coral: 4286533887,
    cornflowerblue: 1687547391,
    cornsilk: 4294499583,
    crimson: 3692313855,
    cyan: 16777215,
    darkblue: 35839,
    darkcyan: 9145343,
    darkgoldenrod: 3095792639,
    darkgray: 2846468607,
    darkgreen: 6553855,
    darkgrey: 2846468607,
    darkkhaki: 3182914559,
    darkmagenta: 2332068863,
    darkolivegreen: 1433087999,
    darkorange: 4287365375,
    darkorchid: 2570243327,
    darkred: 2332033279,
    darksalmon: 3918953215,
    darkseagreen: 2411499519,
    darkslateblue: 1211993087,
    darkslategray: 793726975,
    darkslategrey: 793726975,
    darkturquoise: 13554175,
    darkviolet: 2483082239,
    deeppink: 4279538687,
    deepskyblue: 12582911,
    dimgray: 1768516095,
    dimgrey: 1768516095,
    dodgerblue: 512819199,
    firebrick: 2988581631,
    floralwhite: 4294635775,
    forestgreen: 579543807,
    fuchsia: 4278255615,
    gainsboro: 3705462015,
    ghostwhite: 4177068031,
    gold: 4292280575,
    goldenrod: 3668254975,
    gray: 2155905279,
    green: 8388863,
    greenyellow: 2919182335,
    grey: 2155905279,
    honeydew: 4043305215,
    hotpink: 4285117695,
    indianred: 3445382399,
    indigo: 1258324735,
    ivory: 4294963455,
    khaki: 4041641215,
    lavender: 3873897215,
    lavenderblush: 4293981695,
    lawngreen: 2096890111,
    lemonchiffon: 4294626815,
    lightblue: 2916673279,
    lightcoral: 4034953471,
    lightcyan: 3774873599,
    lightgoldenrodyellow: 4210742015,
    lightgray: 3553874943,
    lightgreen: 2431553791,
    lightgrey: 3553874943,
    lightpink: 4290167295,
    lightsalmon: 4288707327,
    lightseagreen: 548580095,
    lightskyblue: 2278488831,
    lightslategray: 2005441023,
    lightslategrey: 2005441023,
    lightsteelblue: 2965692159,
    lightyellow: 4294959359,
    lime: 16711935,
    limegreen: 852308735,
    linen: 4210091775,
    magenta: 4278255615,
    maroon: 2147483903,
    mediumaquamarine: 1724754687,
    mediumblue: 52735,
    mediumorchid: 3126187007,
    mediumpurple: 2473647103,
    mediumseagreen: 1018393087,
    mediumslateblue: 2070474495,
    mediumspringgreen: 16423679,
    mediumturquoise: 1221709055,
    mediumvioletred: 3340076543,
    midnightblue: 421097727,
    mintcream: 4127193855,
    mistyrose: 4293190143,
    moccasin: 4293178879,
    navajowhite: 4292783615,
    navy: 33023,
    oldlace: 4260751103,
    olive: 2155872511,
    olivedrab: 1804477439,
    orange: 4289003775,
    orangered: 4282712319,
    orchid: 3664828159,
    palegoldenrod: 4008225535,
    palegreen: 2566625535,
    paleturquoise: 2951671551,
    palevioletred: 3681588223,
    papayawhip: 4293907967,
    peachpuff: 4292524543,
    peru: 3448061951,
    pink: 4290825215,
    plum: 3718307327,
    powderblue: 2967529215,
    purple: 2147516671,
    rebeccapurple: 1714657791,
    red: 4278190335,
    rosybrown: 3163525119,
    royalblue: 1097458175,
    saddlebrown: 2336560127,
    salmon: 4202722047,
    sandybrown: 4104413439,
    seagreen: 780883967,
    seashell: 4294307583,
    sienna: 2689740287,
    silver: 3233857791,
    skyblue: 2278484991,
    slateblue: 1784335871,
    slategray: 1887473919,
    slategrey: 1887473919,
    snow: 4294638335,
    springgreen: 16744447,
    steelblue: 1182971135,
    tan: 3535047935,
    teal: 8421631,
    thistle: 3636451583,
    tomato: 4284696575,
    turquoise: 1088475391,
    violet: 4001558271,
    wheat: 4125012991,
    white: 4294967295,
    whitesmoke: 4126537215,
    yellow: 4294902015,
    yellowgreen: 2597139199
  };
  var NUMBER2 = "[-+]?\\d*\\.?\\d+";
  var PERCENTAGE2 = NUMBER2 + "%";
  function call2(...parts) {
    return "\\(\\s*(" + parts.join(")\\s*,\\s*(") + ")\\s*\\)";
  }
  var rgb3 = new RegExp("rgb" + call2(NUMBER2, NUMBER2, NUMBER2));
  var rgba3 = new RegExp("rgba" + call2(NUMBER2, NUMBER2, NUMBER2, NUMBER2));
  var hsl4 = new RegExp("hsl" + call2(NUMBER2, PERCENTAGE2, PERCENTAGE2));
  var hsla3 = new RegExp("hsla" + call2(NUMBER2, PERCENTAGE2, PERCENTAGE2, NUMBER2));
  var hex32 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
  var hex42 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
  var hex62 = /^#([0-9a-fA-F]{6})$/;
  var hex82 = /^#([0-9a-fA-F]{8})$/;
  function normalizeColor2(color2) {
    let match;
    if (typeof color2 === "number") {
      return color2 >>> 0 === color2 && color2 >= 0 && color2 <= 4294967295 ? color2 : null;
    }
    if (match = hex62.exec(color2))
      return parseInt(match[1] + "ff", 16) >>> 0;
    if (colors3 && colors3[color2] !== undefined) {
      return colors3[color2];
    }
    if (match = rgb3.exec(color2)) {
      return (parse2552(match[1]) << 24 | parse2552(match[2]) << 16 | parse2552(match[3]) << 8 | 255) >>> 0;
    }
    if (match = rgba3.exec(color2)) {
      return (parse2552(match[1]) << 24 | parse2552(match[2]) << 16 | parse2552(match[3]) << 8 | parse12(match[4])) >>> 0;
    }
    if (match = hex32.exec(color2)) {
      return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + "ff", 16) >>> 0;
    }
    if (match = hex82.exec(color2))
      return parseInt(match[1], 16) >>> 0;
    if (match = hex42.exec(color2)) {
      return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
    }
    if (match = hsl4.exec(color2)) {
      return (hslToRgb2(parse3602(match[1]), parsePercentage2(match[2]), parsePercentage2(match[3])) | 255) >>> 0;
    }
    if (match = hsla3.exec(color2)) {
      return (hslToRgb2(parse3602(match[1]), parsePercentage2(match[2]), parsePercentage2(match[3])) | parse12(match[4])) >>> 0;
    }
    return null;
  }
  function hue2rgb2(p2, q, t) {
    if (t < 0)
      t += 1;
    if (t > 1)
      t -= 1;
    if (t < 1 / 6)
      return p2 + (q - p2) * 6 * t;
    if (t < 1 / 2)
      return q;
    if (t < 2 / 3)
      return p2 + (q - p2) * (2 / 3 - t) * 6;
    return p2;
  }
  function hslToRgb2(h, s, l) {
    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    const p2 = 2 * l - q;
    const r = hue2rgb2(p2, q, h + 1 / 3);
    const g2 = hue2rgb2(p2, q, h);
    const b = hue2rgb2(p2, q, h - 1 / 3);
    return Math.round(r * 255) << 24 | Math.round(g2 * 255) << 16 | Math.round(b * 255) << 8;
  }
  function parse2552(str) {
    const int = parseInt(str, 10);
    if (int < 0)
      return 0;
    if (int > 255)
      return 255;
    return int;
  }
  function parse3602(str) {
    const int = parseFloat(str);
    return (int % 360 + 360) % 360 / 360;
  }
  function parse12(str) {
    const num = parseFloat(str);
    if (num < 0)
      return 0;
    if (num > 1)
      return 255;
    return Math.round(num * 255);
  }
  function parsePercentage2(str) {
    const int = parseFloat(str);
    if (int < 0)
      return 0;
    if (int > 100)
      return 1;
    return int / 100;
  }
  function colorToRgba2(input) {
    let int32Color = normalizeColor2(input);
    if (int32Color === null)
      return input;
    int32Color = int32Color || 0;
    const r = (int32Color & 4278190080) >>> 24;
    const g2 = (int32Color & 16711680) >>> 16;
    const b = (int32Color & 65280) >>> 8;
    const a = (int32Color & 255) / 255;
    return `rgba(${r}, ${g2}, ${b}, ${a})`;
  }
  var createInterpolator2 = (range2, output, extrapolate) => {
    if (is2.fun(range2)) {
      return range2;
    }
    if (is2.arr(range2)) {
      return createInterpolator2({
        range: range2,
        output,
        extrapolate
      });
    }
    if (is2.str(range2.output[0])) {
      return createStringInterpolator3(range2);
    }
    const config2 = range2;
    const outputRange = config2.output;
    const inputRange = config2.range || [0, 1];
    const extrapolateLeft = config2.extrapolateLeft || config2.extrapolate || "extend";
    const extrapolateRight = config2.extrapolateRight || config2.extrapolate || "extend";
    const easing = config2.easing || ((t) => t);
    return (input) => {
      const range22 = findRange2(input, inputRange);
      return interpolate2(input, inputRange[range22], inputRange[range22 + 1], outputRange[range22], outputRange[range22 + 1], easing, extrapolateLeft, extrapolateRight, config2.map);
    };
  };
  function interpolate2(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map2) {
    let result = map2 ? map2(input) : input;
    if (result < inputMin) {
      if (extrapolateLeft === "identity")
        return result;
      else if (extrapolateLeft === "clamp")
        result = inputMin;
    }
    if (result > inputMax) {
      if (extrapolateRight === "identity")
        return result;
      else if (extrapolateRight === "clamp")
        result = inputMax;
    }
    if (outputMin === outputMax)
      return outputMin;
    if (inputMin === inputMax)
      return input <= inputMin ? outputMin : outputMax;
    if (inputMin === -Infinity)
      result = -result;
    else if (inputMax === Infinity)
      result = result - inputMin;
    else
      result = (result - inputMin) / (inputMax - inputMin);
    result = easing(result);
    if (outputMin === -Infinity)
      result = -result;
    else if (outputMax === Infinity)
      result = result + outputMin;
    else
      result = result * (outputMax - outputMin) + outputMin;
    return result;
  }
  function findRange2(input, inputRange) {
    for (var i = 1;i < inputRange.length - 1; ++i)
      if (inputRange[i] >= input)
        break;
    return i - 1;
  }
  var steps2 = (steps22, direction = "end") => (progress2) => {
    progress2 = direction === "end" ? Math.min(progress2, 0.999) : Math.max(progress2, 0.001);
    const expanded = progress2 * steps22;
    const rounded = direction === "end" ? Math.floor(expanded) : Math.ceil(expanded);
    return clamp2(0, 1, rounded / steps22);
  };
  var c12 = 1.70158;
  var c22 = c12 * 1.525;
  var c32 = c12 + 1;
  var c42 = 2 * Math.PI / 3;
  var c52 = 2 * Math.PI / 4.5;
  var bounceOut2 = (x) => {
    const n1 = 7.5625;
    const d1 = 2.75;
    if (x < 1 / d1) {
      return n1 * x * x;
    } else if (x < 2 / d1) {
      return n1 * (x -= 1.5 / d1) * x + 0.75;
    } else if (x < 2.5 / d1) {
      return n1 * (x -= 2.25 / d1) * x + 0.9375;
    } else {
      return n1 * (x -= 2.625 / d1) * x + 0.984375;
    }
  };
  var easings2 = {
    linear: (x) => x,
    easeInQuad: (x) => x * x,
    easeOutQuad: (x) => 1 - (1 - x) * (1 - x),
    easeInOutQuad: (x) => x < 0.5 ? 2 * x * x : 1 - Math.pow(-2 * x + 2, 2) / 2,
    easeInCubic: (x) => x * x * x,
    easeOutCubic: (x) => 1 - Math.pow(1 - x, 3),
    easeInOutCubic: (x) => x < 0.5 ? 4 * x * x * x : 1 - Math.pow(-2 * x + 2, 3) / 2,
    easeInQuart: (x) => x * x * x * x,
    easeOutQuart: (x) => 1 - Math.pow(1 - x, 4),
    easeInOutQuart: (x) => x < 0.5 ? 8 * x * x * x * x : 1 - Math.pow(-2 * x + 2, 4) / 2,
    easeInQuint: (x) => x * x * x * x * x,
    easeOutQuint: (x) => 1 - Math.pow(1 - x, 5),
    easeInOutQuint: (x) => x < 0.5 ? 16 * x * x * x * x * x : 1 - Math.pow(-2 * x + 2, 5) / 2,
    easeInSine: (x) => 1 - Math.cos(x * Math.PI / 2),
    easeOutSine: (x) => Math.sin(x * Math.PI / 2),
    easeInOutSine: (x) => -(Math.cos(Math.PI * x) - 1) / 2,
    easeInExpo: (x) => x === 0 ? 0 : Math.pow(2, 10 * x - 10),
    easeOutExpo: (x) => x === 1 ? 1 : 1 - Math.pow(2, -10 * x),
    easeInOutExpo: (x) => x === 0 ? 0 : x === 1 ? 1 : x < 0.5 ? Math.pow(2, 20 * x - 10) / 2 : (2 - Math.pow(2, -20 * x + 10)) / 2,
    easeInCirc: (x) => 1 - Math.sqrt(1 - Math.pow(x, 2)),
    easeOutCirc: (x) => Math.sqrt(1 - Math.pow(x - 1, 2)),
    easeInOutCirc: (x) => x < 0.5 ? (1 - Math.sqrt(1 - Math.pow(2 * x, 2))) / 2 : (Math.sqrt(1 - Math.pow(-2 * x + 2, 2)) + 1) / 2,
    easeInBack: (x) => c32 * x * x * x - c12 * x * x,
    easeOutBack: (x) => 1 + c32 * Math.pow(x - 1, 3) + c12 * Math.pow(x - 1, 2),
    easeInOutBack: (x) => x < 0.5 ? Math.pow(2 * x, 2) * ((c22 + 1) * 2 * x - c22) / 2 : (Math.pow(2 * x - 2, 2) * ((c22 + 1) * (x * 2 - 2) + c22) + 2) / 2,
    easeInElastic: (x) => x === 0 ? 0 : x === 1 ? 1 : -Math.pow(2, 10 * x - 10) * Math.sin((x * 10 - 10.75) * c42),
    easeOutElastic: (x) => x === 0 ? 0 : x === 1 ? 1 : Math.pow(2, -10 * x) * Math.sin((x * 10 - 0.75) * c42) + 1,
    easeInOutElastic: (x) => x === 0 ? 0 : x === 1 ? 1 : x < 0.5 ? -(Math.pow(2, 20 * x - 10) * Math.sin((20 * x - 11.125) * c52)) / 2 : Math.pow(2, -20 * x + 10) * Math.sin((20 * x - 11.125) * c52) / 2 + 1,
    easeInBounce: (x) => 1 - bounceOut2(1 - x),
    easeOutBounce: bounceOut2,
    easeInOutBounce: (x) => x < 0.5 ? (1 - bounceOut2(1 - 2 * x)) / 2 : (1 + bounceOut2(2 * x - 1)) / 2,
    steps: steps2
  };
  var $get2 = Symbol.for("FluidValue.get");
  var $observers2 = Symbol.for("FluidValue.observers");
  var hasFluidValue2 = (arg) => Boolean(arg && arg[$get2]);
  var getFluidValue2 = (arg) => arg && arg[$get2] ? arg[$get2]() : arg;
  var getFluidObservers2 = (target) => target[$observers2] || null;
  function callFluidObserver2(observer2, event) {
    if (observer2.eventObserved) {
      observer2.eventObserved(event);
    } else {
      observer2(event);
    }
  }
  function callFluidObservers2(target, event) {
    const observers = target[$observers2];
    if (observers) {
      observers.forEach((observer2) => {
        callFluidObserver2(observer2, event);
      });
    }
  }
  var FluidValue2 = class {
    constructor(get) {
      if (!get && !(get = this.get)) {
        throw Error("Unknown getter");
      }
      setFluidGetter2(this, get);
    }
  };
  var setFluidGetter2 = (target, get) => setHidden2(target, $get2, get);
  function addFluidObserver2(target, observer2) {
    if (target[$get2]) {
      let observers = target[$observers2];
      if (!observers) {
        setHidden2(target, $observers2, observers = /* @__PURE__ */ new Set);
      }
      if (!observers.has(observer2)) {
        observers.add(observer2);
        if (target.observerAdded) {
          target.observerAdded(observers.size, observer2);
        }
      }
    }
    return observer2;
  }
  function removeFluidObserver2(target, observer2) {
    const observers = target[$observers2];
    if (observers && observers.has(observer2)) {
      const count = observers.size - 1;
      if (count) {
        observers.delete(observer2);
      } else {
        target[$observers2] = null;
      }
      if (target.observerRemoved) {
        target.observerRemoved(count, observer2);
      }
    }
  }
  var setHidden2 = (target, key, value) => Object.defineProperty(target, key, {
    value,
    writable: true,
    configurable: true
  });
  var numberRegex2 = /[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var colorRegex2 = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d\.]+%?\))/gi;
  var unitRegex2 = new RegExp(`(${numberRegex2.source})(%|[a-z]+)`, "i");
  var rgbaRegex2 = /rgba\(([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+)\)/gi;
  var cssVariableRegex2 = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
  var variableToRgba2 = (input) => {
    const [token, fallback] = parseCSSVariable2(input);
    if (!token || isSSR2()) {
      return input;
    }
    const value = window.getComputedStyle(document.documentElement).getPropertyValue(token);
    if (value) {
      return value.trim();
    } else if (fallback && fallback.startsWith("--")) {
      const value2 = window.getComputedStyle(document.documentElement).getPropertyValue(fallback);
      if (value2) {
        return value2;
      } else {
        return input;
      }
    } else if (fallback && cssVariableRegex2.test(fallback)) {
      return variableToRgba2(fallback);
    } else if (fallback) {
      return fallback;
    }
    return input;
  };
  var parseCSSVariable2 = (current) => {
    const match = cssVariableRegex2.exec(current);
    if (!match)
      return [,];
    const [, token, fallback] = match;
    return [token, fallback];
  };
  var namedColorRegex2;
  var rgbaRound2 = (_, p1, p2, p3, p4) => `rgba(${Math.round(p1)}, ${Math.round(p2)}, ${Math.round(p3)}, ${p4})`;
  var createStringInterpolator22 = (config2) => {
    if (!namedColorRegex2)
      namedColorRegex2 = colors3 ? new RegExp(`(${Object.keys(colors3).join("|")})(?!\\w)`, "g") : /^\b$/;
    const output = config2.output.map((value) => {
      return getFluidValue2(value).replace(cssVariableRegex2, variableToRgba2).replace(colorRegex2, colorToRgba2).replace(namedColorRegex2, colorToRgba2);
    });
    const keyframes = output.map((value) => value.match(numberRegex2).map(Number));
    const outputRanges = keyframes[0].map((_, i) => keyframes.map((values) => {
      if (!(i in values)) {
        throw Error('The arity of each "output" value must be equal');
      }
      return values[i];
    }));
    const interpolators = outputRanges.map((output2) => createInterpolator2({ ...config2, output: output2 }));
    return (input) => {
      const missingUnit = !unitRegex2.test(output[0]) && output.find((value) => unitRegex2.test(value))?.replace(numberRegex2, "");
      let i = 0;
      return output[0].replace(numberRegex2, () => `${interpolators[i++](input)}${missingUnit || ""}`).replace(rgbaRegex2, rgbaRound2);
    };
  };
  var prefix2 = "react-spring: ";
  var once2 = (fn) => {
    const func = fn;
    let called = false;
    if (typeof func != "function") {
      throw new TypeError(`${prefix2}once requires a function parameter`);
    }
    return (...args) => {
      if (!called) {
        func(...args);
        called = true;
      }
    };
  };
  var warnInterpolate2 = once2(console.warn);
  function deprecateInterpolate2() {
    warnInterpolate2(`${prefix2}The "interpolate" function is deprecated in v9 (use "to" instead)`);
  }
  var warnDirectCall2 = once2(console.warn);
  function deprecateDirectCall2() {
    warnDirectCall2(`${prefix2}Directly calling start instead of using the api object is deprecated in v9 (use ".start" instead), this will be removed in later 0.X.0 versions`);
  }
  function isAnimatedString2(value) {
    return is2.str(value) && (value[0] == "#" || /\d/.test(value) || !isSSR2() && cssVariableRegex2.test(value) || (value in (colors3 || {})));
  }
  var import_rafz32 = require_cjs();
  var observer;
  var resizeHandlers = /* @__PURE__ */ new WeakMap;
  var handleObservation = (entries) => entries.forEach(({ target, contentRect }) => {
    return resizeHandlers.get(target)?.forEach((handler) => handler(contentRect));
  });
  function resizeElement(handler, target) {
    if (!observer) {
      if (typeof ResizeObserver !== "undefined") {
        observer = new ResizeObserver(handleObservation);
      }
    }
    let elementHandlers = resizeHandlers.get(target);
    if (!elementHandlers) {
      elementHandlers = /* @__PURE__ */ new Set;
      resizeHandlers.set(target, elementHandlers);
    }
    elementHandlers.add(handler);
    if (observer) {
      observer.observe(target);
    }
    return () => {
      const elementHandlers2 = resizeHandlers.get(target);
      if (!elementHandlers2)
        return;
      elementHandlers2.delete(handler);
      if (!elementHandlers2.size && observer) {
        observer.unobserve(target);
      }
    };
  }
  var listeners = /* @__PURE__ */ new Set;
  var cleanupWindowResizeHandler;
  var createResizeHandler = () => {
    const handleResize = () => {
      listeners.forEach((callback) => callback({
        width: window.innerWidth,
        height: window.innerHeight
      }));
    };
    window.addEventListener("resize", handleResize);
    return () => {
      window.removeEventListener("resize", handleResize);
    };
  };
  var resizeWindow = (callback) => {
    listeners.add(callback);
    if (!cleanupWindowResizeHandler) {
      cleanupWindowResizeHandler = createResizeHandler();
    }
    return () => {
      listeners.delete(callback);
      if (!listeners.size && cleanupWindowResizeHandler) {
        cleanupWindowResizeHandler();
        cleanupWindowResizeHandler = undefined;
      }
    };
  };
  var onResize2 = (callback, { container = document.documentElement } = {}) => {
    if (container === document.documentElement) {
      return resizeWindow(callback);
    } else {
      return resizeElement(callback, container);
    }
  };
  var progress = (min, max, value) => max - min === 0 ? 1 : (value - min) / (max - min);
  var SCROLL_KEYS = {
    x: {
      length: "Width",
      position: "Left"
    },
    y: {
      length: "Height",
      position: "Top"
    }
  };
  var ScrollHandler = class {
    constructor(callback, container) {
      this.createAxis = () => ({
        current: 0,
        progress: 0,
        scrollLength: 0
      });
      this.updateAxis = (axisName) => {
        const axis = this.info[axisName];
        const { length, position } = SCROLL_KEYS[axisName];
        axis.current = this.container[`scroll${position}`];
        axis.scrollLength = this.container[`scroll${length}`] - this.container[`client${length}`];
        axis.progress = progress(0, axis.scrollLength, axis.current);
      };
      this.update = () => {
        this.updateAxis("x");
        this.updateAxis("y");
      };
      this.sendEvent = () => {
        this.callback(this.info);
      };
      this.advance = () => {
        this.update();
        this.sendEvent();
      };
      this.callback = callback;
      this.container = container;
      this.info = {
        time: 0,
        x: this.createAxis(),
        y: this.createAxis()
      };
    }
  };
  var scrollListeners = /* @__PURE__ */ new WeakMap;
  var resizeListeners = /* @__PURE__ */ new WeakMap;
  var onScrollHandlers = /* @__PURE__ */ new WeakMap;
  var getTarget = (container) => container === document.documentElement ? window : container;
  var onScroll2 = (callback, { container = document.documentElement } = {}) => {
    let containerHandlers = onScrollHandlers.get(container);
    if (!containerHandlers) {
      containerHandlers = /* @__PURE__ */ new Set;
      onScrollHandlers.set(container, containerHandlers);
    }
    const containerHandler = new ScrollHandler(callback, container);
    containerHandlers.add(containerHandler);
    if (!scrollListeners.has(container)) {
      const listener = () => {
        containerHandlers?.forEach((handler) => handler.advance());
        return true;
      };
      scrollListeners.set(container, listener);
      const target = getTarget(container);
      window.addEventListener("resize", listener, { passive: true });
      if (container !== document.documentElement) {
        resizeListeners.set(container, onResize2(listener, { container }));
      }
      target.addEventListener("scroll", listener, { passive: true });
    }
    const animateScroll = scrollListeners.get(container);
    (0, import_rafz32.raf)(animateScroll);
    return () => {
      import_rafz32.raf.cancel(animateScroll);
      const containerHandlers2 = onScrollHandlers.get(container);
      if (!containerHandlers2)
        return;
      containerHandlers2.delete(containerHandler);
      if (containerHandlers2.size)
        return;
      const listener = scrollListeners.get(container);
      scrollListeners.delete(container);
      if (listener) {
        getTarget(container).removeEventListener("scroll", listener);
        window.removeEventListener("resize", listener);
        resizeListeners.get(container)?.();
      }
    };
  };
  function useConstant2(init) {
    const ref = (0, import_react17.useRef)(null);
    if (ref.current === null) {
      ref.current = init();
    }
    return ref.current;
  }
  var useIsomorphicLayoutEffect2 = isSSR2() ? import_react22.useEffect : import_react22.useLayoutEffect;
  var useIsMounted2 = () => {
    const isMounted = (0, import_react32.useRef)(false);
    useIsomorphicLayoutEffect2(() => {
      isMounted.current = true;
      return () => {
        isMounted.current = false;
      };
    }, []);
    return isMounted;
  };
  function useForceUpdate2() {
    const update3 = (0, import_react42.useState)()[1];
    const isMounted = useIsMounted2();
    return () => {
      if (isMounted.current) {
        update3(Math.random());
      }
    };
  }
  function useMemoOne2(getResult, inputs) {
    const [initial] = (0, import_react52.useState)(() => ({
      inputs,
      result: getResult()
    }));
    const committed = (0, import_react52.useRef)();
    const prevCache = committed.current;
    let cache = prevCache;
    if (cache) {
      const useCache = Boolean(inputs && cache.inputs && areInputsEqual2(inputs, cache.inputs));
      if (!useCache) {
        cache = {
          inputs,
          result: getResult()
        };
      }
    } else {
      cache = initial;
    }
    (0, import_react52.useEffect)(() => {
      committed.current = cache;
      if (prevCache == initial) {
        initial.inputs = initial.result = undefined;
      }
    }, [cache]);
    return cache.result;
  }
  function areInputsEqual2(next, prev) {
    if (next.length !== prev.length) {
      return false;
    }
    for (let i = 0;i < next.length; i++) {
      if (next[i] !== prev[i]) {
        return false;
      }
    }
    return true;
  }
  var useOnce2 = (effect) => (0, import_react62.useEffect)(effect, emptyDeps2);
  var emptyDeps2 = [];
  function usePrev2(value) {
    const prevRef = (0, import_react72.useRef)();
    (0, import_react72.useEffect)(() => {
      prevRef.current = value;
    });
    return prevRef.current;
  }
  var useReducedMotion2 = () => {
    const [reducedMotion, setReducedMotion] = (0, import_react82.useState)(null);
    useIsomorphicLayoutEffect2(() => {
      const mql = window.matchMedia("(prefers-reduced-motion)");
      const handleMediaChange = (e) => {
        setReducedMotion(e.matches);
        assign2({
          skipAnimation: e.matches
        });
      };
      handleMediaChange(mql);
      if (mql.addEventListener) {
        mql.addEventListener("change", handleMediaChange);
      } else {
        mql.addListener(handleMediaChange);
      }
      return () => {
        if (mql.removeEventListener) {
          mql.removeEventListener("change", handleMediaChange);
        } else {
          mql.removeListener(handleMediaChange);
        }
      };
    }, []);
    return reducedMotion;
  };
  var import_rafz42 = require_cjs();
});

// node_modules/@react-spring/shared/dist/cjs/index.js
var require_cjs2 = __commonJS((exports, module) => {
  if (false) {
  } else {
    module.exports = require_react_spring_shared_development();
  }
});

// node_modules/@react-spring/animated/dist/cjs/react-spring_animated.development.cjs
var require_react_spring_animated_development = __commonJS((exports, module) => {
  var react = __toESM(require_react(), 1);
  var import_react17 = __toESM(require_react(), 1);
  var __create2 = Object.create;
  var __defProp3 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __getProtoOf2 = Object.getPrototypeOf;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export3 = (target, all) => {
    for (var name in all)
      __defProp3(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to2, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to2, key) && key !== except)
          __defProp3(to2, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to2;
  };
  var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp3(target, "default", { value: mod, enumerable: true }) : target, mod));
  var __toCommonJS = (mod) => __copyProps(__defProp3({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export3(src_exports, {
    Animated: () => Animated2,
    AnimatedArray: () => AnimatedArray2,
    AnimatedObject: () => AnimatedObject2,
    AnimatedString: () => AnimatedString2,
    AnimatedValue: () => AnimatedValue2,
    createHost: () => createHost2,
    getAnimated: () => getAnimated2,
    getAnimatedType: () => getAnimatedType2,
    getPayload: () => getPayload2,
    isAnimated: () => isAnimated2,
    setAnimated: () => setAnimated2
  });
  module.exports = __toCommonJS(src_exports);
  var import_shared34 = require_cjs2();
  var $node2 = Symbol.for("Animated:node");
  var isAnimated2 = (value) => !!value && value[$node2] === value;
  var getAnimated2 = (owner) => owner && owner[$node2];
  var setAnimated2 = (owner, node) => (0, import_shared34.defineHidden)(owner, $node2, node);
  var getPayload2 = (owner) => owner && owner[$node2] && owner[$node2].getPayload();
  var Animated2 = class {
    constructor() {
      setAnimated2(this, this);
    }
    getPayload() {
      return this.payload || [];
    }
  };
  var import_shared210 = require_cjs2();
  var AnimatedValue2 = class extends Animated2 {
    constructor(_value) {
      super();
      this._value = _value;
      this.done = true;
      this.durationProgress = 0;
      if (import_shared210.is.num(this._value)) {
        this.lastPosition = this._value;
      }
    }
    static create(value) {
      return new AnimatedValue2(value);
    }
    getPayload() {
      return [this];
    }
    getValue() {
      return this._value;
    }
    setValue(value, step) {
      if (import_shared210.is.num(value)) {
        this.lastPosition = value;
        if (step) {
          value = Math.round(value / step) * step;
          if (this.done) {
            this.lastPosition = value;
          }
        }
      }
      if (this._value === value) {
        return false;
      }
      this._value = value;
      return true;
    }
    reset() {
      const { done } = this;
      this.done = false;
      if (import_shared210.is.num(this._value)) {
        this.elapsedTime = 0;
        this.durationProgress = 0;
        this.lastPosition = this._value;
        if (done)
          this.lastVelocity = null;
        this.v0 = null;
      }
    }
  };
  var import_shared35 = require_cjs2();
  var AnimatedString2 = class extends AnimatedValue2 {
    constructor(value) {
      super(0);
      this._string = null;
      this._toString = (0, import_shared35.createInterpolator)({
        output: [value, value]
      });
    }
    static create(value) {
      return new AnimatedString2(value);
    }
    getValue() {
      const value = this._string;
      return value == null ? this._string = this._toString(this._value) : value;
    }
    setValue(value) {
      if (import_shared35.is.str(value)) {
        if (value == this._string) {
          return false;
        }
        this._string = value;
        this._value = 1;
      } else if (super.setValue(value)) {
        this._string = null;
      } else {
        return false;
      }
      return true;
    }
    reset(goal) {
      if (goal) {
        this._toString = (0, import_shared35.createInterpolator)({
          output: [this.getValue(), goal]
        });
      }
      this._value = 0;
      super.reset();
    }
  };
  var import_shared52 = require_cjs2();
  var import_shared42 = require_cjs2();
  var TreeContext2 = { dependencies: null };
  var AnimatedObject2 = class extends Animated2 {
    constructor(source) {
      super();
      this.source = source;
      this.setValue(source);
    }
    getValue(animated2) {
      const values = {};
      (0, import_shared42.eachProp)(this.source, (source, key) => {
        if (isAnimated2(source)) {
          values[key] = source.getValue(animated2);
        } else if ((0, import_shared42.hasFluidValue)(source)) {
          values[key] = (0, import_shared42.getFluidValue)(source);
        } else if (!animated2) {
          values[key] = source;
        }
      });
      return values;
    }
    setValue(source) {
      this.source = source;
      this.payload = this._makePayload(source);
    }
    reset() {
      if (this.payload) {
        (0, import_shared42.each)(this.payload, (node) => node.reset());
      }
    }
    _makePayload(source) {
      if (source) {
        const payload = /* @__PURE__ */ new Set;
        (0, import_shared42.eachProp)(source, this._addToPayload, payload);
        return Array.from(payload);
      }
    }
    _addToPayload(source) {
      if (TreeContext2.dependencies && (0, import_shared42.hasFluidValue)(source)) {
        TreeContext2.dependencies.add(source);
      }
      const payload = getPayload2(source);
      if (payload) {
        (0, import_shared42.each)(payload, (node) => this.add(node));
      }
    }
  };
  var AnimatedArray2 = class extends AnimatedObject2 {
    constructor(source) {
      super(source);
    }
    static create(source) {
      return new AnimatedArray2(source);
    }
    getValue() {
      return this.source.map((node) => node.getValue());
    }
    setValue(source) {
      const payload = this.getPayload();
      if (source.length == payload.length) {
        return payload.map((node, i) => node.setValue(source[i])).some(Boolean);
      }
      super.setValue(source.map(makeAnimated2));
      return true;
    }
  };
  function makeAnimated2(value) {
    const nodeType = (0, import_shared52.isAnimatedString)(value) ? AnimatedString2 : AnimatedValue2;
    return nodeType.create(value);
  }
  var import_shared62 = require_cjs2();
  function getAnimatedType2(value) {
    const parentNode = getAnimated2(value);
    return parentNode ? parentNode.constructor : import_shared62.is.arr(value) ? AnimatedArray2 : (0, import_shared62.isAnimatedString)(value) ? AnimatedString2 : AnimatedValue2;
  }
  var import_shared82 = require_cjs2();
  var React4 = __toESM2(react);
  var import_shared72 = require_cjs2();
  var withAnimated2 = (Component, host2) => {
    const hasInstance = !import_shared72.is.fun(Component) || Component.prototype && Component.prototype.isReactComponent;
    return (0, import_react17.forwardRef)((givenProps, givenRef) => {
      const instanceRef = (0, import_react17.useRef)(null);
      const ref = hasInstance && (0, import_react17.useCallback)((value) => {
        instanceRef.current = updateRef2(givenRef, value);
      }, [givenRef]);
      const [props, deps] = getAnimatedState2(givenProps, host2);
      const forceUpdate = (0, import_shared72.useForceUpdate)();
      const callback = () => {
        const instance = instanceRef.current;
        if (hasInstance && !instance) {
          return;
        }
        const didUpdate = instance ? host2.applyAnimatedValues(instance, props.getValue(true)) : false;
        if (didUpdate === false) {
          forceUpdate();
        }
      };
      const observer = new PropsObserver2(callback, deps);
      const observerRef = (0, import_react17.useRef)();
      (0, import_shared72.useIsomorphicLayoutEffect)(() => {
        observerRef.current = observer;
        (0, import_shared72.each)(deps, (dep) => (0, import_shared72.addFluidObserver)(dep, observer));
        return () => {
          if (observerRef.current) {
            (0, import_shared72.each)(observerRef.current.deps, (dep) => (0, import_shared72.removeFluidObserver)(dep, observerRef.current));
            import_shared72.raf.cancel(observerRef.current.update);
          }
        };
      });
      (0, import_react17.useEffect)(callback, []);
      (0, import_shared72.useOnce)(() => () => {
        const observer2 = observerRef.current;
        (0, import_shared72.each)(observer2.deps, (dep) => (0, import_shared72.removeFluidObserver)(dep, observer2));
      });
      const usedProps = host2.getComponentProps(props.getValue());
      return /* @__PURE__ */ React4.createElement(Component, { ...usedProps, ref });
    });
  };
  var PropsObserver2 = class {
    constructor(update3, deps) {
      this.update = update3;
      this.deps = deps;
    }
    eventObserved(event) {
      if (event.type == "change") {
        import_shared72.raf.write(this.update);
      }
    }
  };
  function getAnimatedState2(props, host2) {
    const dependencies = /* @__PURE__ */ new Set;
    TreeContext2.dependencies = dependencies;
    if (props.style)
      props = {
        ...props,
        style: host2.createAnimatedStyle(props.style)
      };
    props = new AnimatedObject2(props);
    TreeContext2.dependencies = null;
    return [props, dependencies];
  }
  function updateRef2(ref, value) {
    if (ref) {
      if (import_shared72.is.fun(ref))
        ref(value);
      else
        ref.current = value;
    }
    return value;
  }
  var cacheKey2 = Symbol.for("AnimatedComponent");
  var createHost2 = (components, {
    applyAnimatedValues: applyAnimatedValues2 = () => false,
    createAnimatedStyle = (style) => new AnimatedObject2(style),
    getComponentProps = (props) => props
  } = {}) => {
    const hostConfig = {
      applyAnimatedValues: applyAnimatedValues2,
      createAnimatedStyle,
      getComponentProps
    };
    const animated2 = (Component) => {
      const displayName = getDisplayName2(Component) || "Anonymous";
      if (import_shared82.is.str(Component)) {
        Component = animated2[Component] || (animated2[Component] = withAnimated2(Component, hostConfig));
      } else {
        Component = Component[cacheKey2] || (Component[cacheKey2] = withAnimated2(Component, hostConfig));
      }
      Component.displayName = `Animated(${displayName})`;
      return Component;
    };
    (0, import_shared82.eachProp)(components, (Component, key) => {
      if (import_shared82.is.arr(components)) {
        key = getDisplayName2(Component);
      }
      animated2[key] = animated2(Component);
    });
    return {
      animated: animated2
    };
  };
  var getDisplayName2 = (arg) => import_shared82.is.str(arg) ? arg : arg && import_shared82.is.str(arg.displayName) ? arg.displayName : import_shared82.is.fun(arg) && arg.name || null;
});

// node_modules/@react-spring/animated/dist/cjs/index.js
var require_cjs3 = __commonJS((exports, module) => {
  if (false) {
  } else {
    module.exports = require_react_spring_animated_development();
  }
});

// node_modules/@react-spring/types/dist/cjs/react-spring_types.development.cjs
var require_react_spring_types_development = __commonJS((exports, module) => {
  var __defProp3 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export3 = (target, all) => {
    for (var name in all)
      __defProp3(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to2, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to2, key) && key !== except)
          __defProp3(to2, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to2;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp3({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export3(src_exports, {
    Any: () => Any
  });
  module.exports = __toCommonJS(src_exports);
  var Any = class {
  };
});

// node_modules/@react-spring/types/dist/cjs/index.js
var require_cjs4 = __commonJS((exports, module) => {
  if (false) {
  } else {
    module.exports = require_react_spring_types_development();
  }
});

// node_modules/@react-spring/core/dist/cjs/react-spring_core.development.cjs
var require_react_spring_core_development = __commonJS((exports, module) => {
  var import_react22 = __toESM(require_react(), 1);
  var react = __toESM(require_react(), 1);
  var import_react17 = __toESM(require_react(), 1);
  var import_react32 = __toESM(require_react(), 1);
  var react2 = __toESM(require_react(), 1);
  var import_react42 = __toESM(require_react(), 1);
  var import_react52 = __toESM(require_react(), 1);
  var __create2 = Object.create;
  var __defProp3 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __getProtoOf2 = Object.getPrototypeOf;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export3 = (target, all) => {
    for (var name in all)
      __defProp3(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to22, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to22, key) && key !== except)
          __defProp3(to22, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to22;
  };
  var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
  var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp3(target, "default", { value: mod, enumerable: true }) : target, mod));
  var __toCommonJS = (mod) => __copyProps(__defProp3({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export3(src_exports, {
    BailSignal: () => BailSignal2,
    Controller: () => Controller2,
    FrameValue: () => FrameValue2,
    Globals: () => import_shared222.Globals,
    Interpolation: () => Interpolation2,
    Spring: () => Spring,
    SpringContext: () => SpringContext2,
    SpringRef: () => SpringRef2,
    SpringValue: () => SpringValue2,
    Trail: () => Trail,
    Transition: () => Transition,
    config: () => config2,
    createInterpolator: () => import_shared232.createInterpolator,
    easings: () => import_shared232.easings,
    inferTo: () => inferTo2,
    interpolate: () => interpolate2,
    to: () => to2,
    update: () => update3,
    useChain: () => useChain,
    useInView: () => useInView,
    useIsomorphicLayoutEffect: () => import_shared232.useIsomorphicLayoutEffect,
    useReducedMotion: () => import_shared232.useReducedMotion,
    useResize: () => useResize,
    useScroll: () => useScroll,
    useSpring: () => useSpring2,
    useSpringRef: () => useSpringRef,
    useSpringValue: () => useSpringValue,
    useSprings: () => useSprings2,
    useTrail: () => useTrail,
    useTransition: () => useTransition
  });
  module.exports = __toCommonJS(src_exports);
  var import_shared210 = require_cjs2();
  var import_shared34 = require_cjs2();
  function callProp2(value, ...args) {
    return import_shared34.is.fun(value) ? value(...args) : value;
  }
  var matchProp2 = (value, key) => value === true || !!(key && value && (import_shared34.is.fun(value) ? value(key) : (0, import_shared34.toArray)(value).includes(key)));
  var resolveProp2 = (prop, key) => import_shared34.is.obj(prop) ? key && prop[key] : prop;
  var getDefaultProp2 = (props, key) => props.default === true ? props[key] : props.default ? props.default[key] : undefined;
  var noopTransform2 = (value) => value;
  var getDefaultProps2 = (props, transform = noopTransform2) => {
    let keys = DEFAULT_PROPS2;
    if (props.default && props.default !== true) {
      props = props.default;
      keys = Object.keys(props);
    }
    const defaults22 = {};
    for (const key of keys) {
      const value = transform(props[key], key);
      if (!import_shared34.is.und(value)) {
        defaults22[key] = value;
      }
    }
    return defaults22;
  };
  var DEFAULT_PROPS2 = [
    "config",
    "onProps",
    "onStart",
    "onChange",
    "onPause",
    "onResume",
    "onRest"
  ];
  var RESERVED_PROPS2 = {
    config: 1,
    from: 1,
    to: 1,
    ref: 1,
    loop: 1,
    reset: 1,
    pause: 1,
    cancel: 1,
    reverse: 1,
    immediate: 1,
    default: 1,
    delay: 1,
    onProps: 1,
    onStart: 1,
    onChange: 1,
    onPause: 1,
    onResume: 1,
    onRest: 1,
    onResolve: 1,
    items: 1,
    trail: 1,
    sort: 1,
    expires: 1,
    initial: 1,
    enter: 1,
    update: 1,
    leave: 1,
    children: 1,
    onDestroyed: 1,
    keys: 1,
    callId: 1,
    parentId: 1
  };
  function getForwardProps2(props) {
    const forward = {};
    let count = 0;
    (0, import_shared34.eachProp)(props, (value, prop) => {
      if (!RESERVED_PROPS2[prop]) {
        forward[prop] = value;
        count++;
      }
    });
    if (count) {
      return forward;
    }
  }
  function inferTo2(props) {
    const to22 = getForwardProps2(props);
    if (to22) {
      const out = { to: to22 };
      (0, import_shared34.eachProp)(props, (val, key) => (key in to22) || (out[key] = val));
      return out;
    }
    return { ...props };
  }
  function computeGoal2(value) {
    value = (0, import_shared34.getFluidValue)(value);
    return import_shared34.is.arr(value) ? value.map(computeGoal2) : (0, import_shared34.isAnimatedString)(value) ? import_shared34.Globals.createStringInterpolator({
      range: [0, 1],
      output: [value, value]
    })(1) : value;
  }
  function hasProps2(props) {
    for (const _ in props)
      return true;
    return false;
  }
  function isAsyncTo2(to22) {
    return import_shared34.is.fun(to22) || import_shared34.is.arr(to22) && import_shared34.is.obj(to22[0]);
  }
  function detachRefs2(ctrl, ref) {
    ctrl.ref?.delete(ctrl);
    ref?.delete(ctrl);
  }
  function replaceRef2(ctrl, ref) {
    if (ref && ctrl.ref !== ref) {
      ctrl.ref?.delete(ctrl);
      ref.add(ctrl);
      ctrl.ref = ref;
    }
  }
  function useChain(refs, timeSteps, timeFrame = 1000) {
    (0, import_shared210.useIsomorphicLayoutEffect)(() => {
      if (timeSteps) {
        let prevDelay = 0;
        (0, import_shared210.each)(refs, (ref, i) => {
          const controllers = ref.current;
          if (controllers.length) {
            let delay = timeFrame * timeSteps[i];
            if (isNaN(delay))
              delay = prevDelay;
            else
              prevDelay = delay;
            (0, import_shared210.each)(controllers, (ctrl) => {
              (0, import_shared210.each)(ctrl.queue, (props) => {
                const memoizedDelayProp = props.delay;
                props.delay = (key) => delay + callProp2(memoizedDelayProp || 0, key);
              });
            });
            ref.start();
          }
        });
      } else {
        let p2 = Promise.resolve();
        (0, import_shared210.each)(refs, (ref) => {
          const controllers = ref.current;
          if (controllers.length) {
            const queues = controllers.map((ctrl) => {
              const q = ctrl.queue;
              ctrl.queue = [];
              return q;
            });
            p2 = p2.then(() => {
              (0, import_shared210.each)(controllers, (ctrl, i) => (0, import_shared210.each)(queues[i] || [], (update22) => ctrl.queue.push(update22)));
              return Promise.all(ref.start());
            });
          }
        });
      }
    });
  }
  var import_shared122 = require_cjs2();
  var import_shared112 = require_cjs2();
  var import_shared72 = require_cjs2();
  var import_animated22 = require_cjs3();
  var import_shared35 = require_cjs2();
  var config2 = {
    default: { tension: 170, friction: 26 },
    gentle: { tension: 120, friction: 14 },
    wobbly: { tension: 180, friction: 12 },
    stiff: { tension: 210, friction: 20 },
    slow: { tension: 280, friction: 60 },
    molasses: { tension: 280, friction: 120 }
  };
  var defaults2 = {
    ...config2.default,
    mass: 1,
    damping: 1,
    easing: import_shared35.easings.linear,
    clamp: false
  };
  var AnimationConfig2 = class {
    constructor() {
      this.velocity = 0;
      Object.assign(this, defaults2);
    }
  };
  function mergeConfig2(config22, newConfig, defaultConfig) {
    if (defaultConfig) {
      defaultConfig = { ...defaultConfig };
      sanitizeConfig2(defaultConfig, newConfig);
      newConfig = { ...defaultConfig, ...newConfig };
    }
    sanitizeConfig2(config22, newConfig);
    Object.assign(config22, newConfig);
    for (const key in defaults2) {
      if (config22[key] == null) {
        config22[key] = defaults2[key];
      }
    }
    let { frequency, damping } = config22;
    const { mass } = config22;
    if (!import_shared35.is.und(frequency)) {
      if (frequency < 0.01)
        frequency = 0.01;
      if (damping < 0)
        damping = 0;
      config22.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;
      config22.friction = 4 * Math.PI * damping * mass / frequency;
    }
    return config22;
  }
  function sanitizeConfig2(config22, props) {
    if (!import_shared35.is.und(props.decay)) {
      config22.duration = undefined;
    } else {
      const isTensionConfig = !import_shared35.is.und(props.tension) || !import_shared35.is.und(props.friction);
      if (isTensionConfig || !import_shared35.is.und(props.frequency) || !import_shared35.is.und(props.damping) || !import_shared35.is.und(props.mass)) {
        config22.duration = undefined;
        config22.decay = undefined;
      }
      if (isTensionConfig) {
        config22.frequency = undefined;
      }
    }
  }
  var emptyArray2 = [];
  var Animation2 = class {
    constructor() {
      this.changed = false;
      this.values = emptyArray2;
      this.toValues = null;
      this.fromValues = emptyArray2;
      this.config = new AnimationConfig2;
      this.immediate = false;
    }
  };
  var import_shared42 = require_cjs2();
  function scheduleProps2(callId, { key, props, defaultProps, state, actions }) {
    return new Promise((resolve, reject) => {
      let delay;
      let timeout;
      let cancel = matchProp2(props.cancel ?? defaultProps?.cancel, key);
      if (cancel) {
        onStart();
      } else {
        if (!import_shared42.is.und(props.pause)) {
          state.paused = matchProp2(props.pause, key);
        }
        let pause = defaultProps?.pause;
        if (pause !== true) {
          pause = state.paused || matchProp2(pause, key);
        }
        delay = callProp2(props.delay || 0, key);
        if (pause) {
          state.resumeQueue.add(onResume);
          actions.pause();
        } else {
          actions.resume();
          onResume();
        }
      }
      function onPause() {
        state.resumeQueue.add(onResume);
        state.timeouts.delete(timeout);
        timeout.cancel();
        delay = timeout.time - import_shared42.raf.now();
      }
      function onResume() {
        if (delay > 0 && !import_shared42.Globals.skipAnimation) {
          state.delayed = true;
          timeout = import_shared42.raf.setTimeout(onStart, delay);
          state.pauseQueue.add(onPause);
          state.timeouts.add(timeout);
        } else {
          onStart();
        }
      }
      function onStart() {
        if (state.delayed) {
          state.delayed = false;
        }
        state.pauseQueue.delete(onPause);
        state.timeouts.delete(timeout);
        if (callId <= (state.cancelId || 0)) {
          cancel = true;
        }
        try {
          actions.start({ ...props, callId, cancel }, resolve);
        } catch (err) {
          reject(err);
        }
      }
    });
  }
  var import_shared52 = require_cjs2();
  var getCombinedResult2 = (target, results) => results.length == 1 ? results[0] : results.some((result) => result.cancelled) ? getCancelledResult2(target.get()) : results.every((result) => result.noop) ? getNoopResult2(target.get()) : getFinishedResult2(target.get(), results.every((result) => result.finished));
  var getNoopResult2 = (value) => ({
    value,
    noop: true,
    finished: true,
    cancelled: false
  });
  var getFinishedResult2 = (value, finished, cancelled = false) => ({
    value,
    finished,
    cancelled
  });
  var getCancelledResult2 = (value) => ({
    value,
    cancelled: true,
    finished: false
  });
  function runAsync2(to22, props, state, target) {
    const { callId, parentId, onRest } = props;
    const { asyncTo: prevTo, promise: prevPromise } = state;
    if (!parentId && to22 === prevTo && !props.reset) {
      return prevPromise;
    }
    return state.promise = (async () => {
      state.asyncId = callId;
      state.asyncTo = to22;
      const defaultProps = getDefaultProps2(props, (value, key) => key === "onRest" ? undefined : value);
      let preventBail;
      let bail;
      const bailPromise = new Promise((resolve, reject) => (preventBail = resolve, bail = reject));
      const bailIfEnded = (bailSignal) => {
        const bailResult = callId <= (state.cancelId || 0) && getCancelledResult2(target) || callId !== state.asyncId && getFinishedResult2(target, false);
        if (bailResult) {
          bailSignal.result = bailResult;
          bail(bailSignal);
          throw bailSignal;
        }
      };
      const animate = (arg1, arg2) => {
        const bailSignal = new BailSignal2;
        const skipAnimationSignal = new SkipAnimationSignal2;
        return (async () => {
          if (import_shared52.Globals.skipAnimation) {
            stopAsync2(state);
            skipAnimationSignal.result = getFinishedResult2(target, false);
            bail(skipAnimationSignal);
            throw skipAnimationSignal;
          }
          bailIfEnded(bailSignal);
          const props2 = import_shared52.is.obj(arg1) ? { ...arg1 } : { ...arg2, to: arg1 };
          props2.parentId = callId;
          (0, import_shared52.eachProp)(defaultProps, (value, key) => {
            if (import_shared52.is.und(props2[key])) {
              props2[key] = value;
            }
          });
          const result2 = await target.start(props2);
          bailIfEnded(bailSignal);
          if (state.paused) {
            await new Promise((resume) => {
              state.resumeQueue.add(resume);
            });
          }
          return result2;
        })();
      };
      let result;
      if (import_shared52.Globals.skipAnimation) {
        stopAsync2(state);
        return getFinishedResult2(target, false);
      }
      try {
        let animating;
        if (import_shared52.is.arr(to22)) {
          animating = (async (queue) => {
            for (const props2 of queue) {
              await animate(props2);
            }
          })(to22);
        } else {
          animating = Promise.resolve(to22(animate, target.stop.bind(target)));
        }
        await Promise.all([animating.then(preventBail), bailPromise]);
        result = getFinishedResult2(target.get(), true, false);
      } catch (err) {
        if (err instanceof BailSignal2) {
          result = err.result;
        } else if (err instanceof SkipAnimationSignal2) {
          result = err.result;
        } else {
          throw err;
        }
      } finally {
        if (callId == state.asyncId) {
          state.asyncId = parentId;
          state.asyncTo = parentId ? prevTo : undefined;
          state.promise = parentId ? prevPromise : undefined;
        }
      }
      if (import_shared52.is.fun(onRest)) {
        import_shared52.raf.batchedUpdates(() => {
          onRest(result, target, target.item);
        });
      }
      return result;
    })();
  }
  function stopAsync2(state, cancelId) {
    (0, import_shared52.flush)(state.timeouts, (t) => t.cancel());
    state.pauseQueue.clear();
    state.resumeQueue.clear();
    state.asyncId = state.asyncTo = state.promise = undefined;
    if (cancelId)
      state.cancelId = cancelId;
  }
  var BailSignal2 = class extends Error {
    constructor() {
      super("An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise.");
    }
  };
  var SkipAnimationSignal2 = class extends Error {
    constructor() {
      super("SkipAnimationSignal");
    }
  };
  var import_shared62 = require_cjs2();
  var import_animated6 = require_cjs3();
  var isFrameValue2 = (value) => value instanceof FrameValue2;
  var nextId3 = 1;
  var FrameValue2 = class extends import_shared62.FluidValue {
    constructor() {
      super(...arguments);
      this.id = nextId3++;
      this._priority = 0;
    }
    get priority() {
      return this._priority;
    }
    set priority(priority2) {
      if (this._priority != priority2) {
        this._priority = priority2;
        this._onPriorityChange(priority2);
      }
    }
    get() {
      const node = (0, import_animated6.getAnimated)(this);
      return node && node.getValue();
    }
    to(...args) {
      return import_shared62.Globals.to(this, args);
    }
    interpolate(...args) {
      (0, import_shared62.deprecateInterpolate)();
      return import_shared62.Globals.to(this, args);
    }
    toJSON() {
      return this.get();
    }
    observerAdded(count) {
      if (count == 1)
        this._attach();
    }
    observerRemoved(count) {
      if (count == 0)
        this._detach();
    }
    _attach() {
    }
    _detach() {
    }
    _onChange(value, idle = false) {
      (0, import_shared62.callFluidObservers)(this, {
        type: "change",
        parent: this,
        value,
        idle
      });
    }
    _onPriorityChange(priority2) {
      if (!this.idle) {
        import_shared62.frameLoop.sort(this);
      }
      (0, import_shared62.callFluidObservers)(this, {
        type: "priority",
        parent: this,
        priority: priority2
      });
    }
  };
  var $P2 = Symbol.for("SpringPhase");
  var HAS_ANIMATED2 = 1;
  var IS_ANIMATING2 = 2;
  var IS_PAUSED2 = 4;
  var hasAnimated2 = (target) => (target[$P2] & HAS_ANIMATED2) > 0;
  var isAnimating2 = (target) => (target[$P2] & IS_ANIMATING2) > 0;
  var isPaused2 = (target) => (target[$P2] & IS_PAUSED2) > 0;
  var setActiveBit2 = (target, active) => active ? target[$P2] |= IS_ANIMATING2 | HAS_ANIMATED2 : target[$P2] &= ~IS_ANIMATING2;
  var setPausedBit2 = (target, paused) => paused ? target[$P2] |= IS_PAUSED2 : target[$P2] &= ~IS_PAUSED2;
  var SpringValue2 = class extends FrameValue2 {
    constructor(arg1, arg2) {
      super();
      this.animation = new Animation2;
      this.defaultProps = {};
      this._state = {
        paused: false,
        delayed: false,
        pauseQueue: /* @__PURE__ */ new Set,
        resumeQueue: /* @__PURE__ */ new Set,
        timeouts: /* @__PURE__ */ new Set
      };
      this._pendingCalls = /* @__PURE__ */ new Set;
      this._lastCallId = 0;
      this._lastToId = 0;
      this._memoizedDuration = 0;
      if (!import_shared72.is.und(arg1) || !import_shared72.is.und(arg2)) {
        const props = import_shared72.is.obj(arg1) ? { ...arg1 } : { ...arg2, from: arg1 };
        if (import_shared72.is.und(props.default)) {
          props.default = true;
        }
        this.start(props);
      }
    }
    get idle() {
      return !(isAnimating2(this) || this._state.asyncTo) || isPaused2(this);
    }
    get goal() {
      return (0, import_shared72.getFluidValue)(this.animation.to);
    }
    get velocity() {
      const node = (0, import_animated22.getAnimated)(this);
      return node instanceof import_animated22.AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map((node2) => node2.lastVelocity || 0);
    }
    get hasAnimated() {
      return hasAnimated2(this);
    }
    get isAnimating() {
      return isAnimating2(this);
    }
    get isPaused() {
      return isPaused2(this);
    }
    get isDelayed() {
      return this._state.delayed;
    }
    advance(dt) {
      let idle = true;
      let changed = false;
      const anim = this.animation;
      let { toValues } = anim;
      const { config: config22 } = anim;
      const payload = (0, import_animated22.getPayload)(anim.to);
      if (!payload && (0, import_shared72.hasFluidValue)(anim.to)) {
        toValues = (0, import_shared72.toArray)((0, import_shared72.getFluidValue)(anim.to));
      }
      anim.values.forEach((node2, i) => {
        if (node2.done)
          return;
        const to22 = node2.constructor == import_animated22.AnimatedString ? 1 : payload ? payload[i].lastPosition : toValues[i];
        let finished = anim.immediate;
        let position = to22;
        if (!finished) {
          position = node2.lastPosition;
          if (config22.tension <= 0) {
            node2.done = true;
            return;
          }
          let elapsed = node2.elapsedTime += dt;
          const from = anim.fromValues[i];
          const v0 = node2.v0 != null ? node2.v0 : node2.v0 = import_shared72.is.arr(config22.velocity) ? config22.velocity[i] : config22.velocity;
          let velocity;
          const precision = config22.precision || (from == to22 ? 0.005 : Math.min(1, Math.abs(to22 - from) * 0.001));
          if (!import_shared72.is.und(config22.duration)) {
            let p2 = 1;
            if (config22.duration > 0) {
              if (this._memoizedDuration !== config22.duration) {
                this._memoizedDuration = config22.duration;
                if (node2.durationProgress > 0) {
                  node2.elapsedTime = config22.duration * node2.durationProgress;
                  elapsed = node2.elapsedTime += dt;
                }
              }
              p2 = (config22.progress || 0) + elapsed / this._memoizedDuration;
              p2 = p2 > 1 ? 1 : p2 < 0 ? 0 : p2;
              node2.durationProgress = p2;
            }
            position = from + config22.easing(p2) * (to22 - from);
            velocity = (position - node2.lastPosition) / dt;
            finished = p2 == 1;
          } else if (config22.decay) {
            const decay = config22.decay === true ? 0.998 : config22.decay;
            const e = Math.exp(-(1 - decay) * elapsed);
            position = from + v0 / (1 - decay) * (1 - e);
            finished = Math.abs(node2.lastPosition - position) <= precision;
            velocity = v0 * e;
          } else {
            velocity = node2.lastVelocity == null ? v0 : node2.lastVelocity;
            const restVelocity = config22.restVelocity || precision / 10;
            const bounceFactor = config22.clamp ? 0 : config22.bounce;
            const canBounce = !import_shared72.is.und(bounceFactor);
            const isGrowing = from == to22 ? node2.v0 > 0 : from < to22;
            let isMoving;
            let isBouncing = false;
            const step = 1;
            const numSteps = Math.ceil(dt / step);
            for (let n = 0;n < numSteps; ++n) {
              isMoving = Math.abs(velocity) > restVelocity;
              if (!isMoving) {
                finished = Math.abs(to22 - position) <= precision;
                if (finished) {
                  break;
                }
              }
              if (canBounce) {
                isBouncing = position == to22 || position > to22 == isGrowing;
                if (isBouncing) {
                  velocity = -velocity * bounceFactor;
                  position = to22;
                }
              }
              const springForce = -config22.tension * 0.000001 * (position - to22);
              const dampingForce = -config22.friction * 0.001 * velocity;
              const acceleration = (springForce + dampingForce) / config22.mass;
              velocity = velocity + acceleration * step;
              position = position + velocity * step;
            }
          }
          node2.lastVelocity = velocity;
          if (Number.isNaN(position)) {
            console.warn(`Got NaN while animating:`, this);
            finished = true;
          }
        }
        if (payload && !payload[i].done) {
          finished = false;
        }
        if (finished) {
          node2.done = true;
        } else {
          idle = false;
        }
        if (node2.setValue(position, config22.round)) {
          changed = true;
        }
      });
      const node = (0, import_animated22.getAnimated)(this);
      const currVal = node.getValue();
      if (idle) {
        const finalVal = (0, import_shared72.getFluidValue)(anim.to);
        if ((currVal !== finalVal || changed) && !config22.decay) {
          node.setValue(finalVal);
          this._onChange(finalVal);
        } else if (changed && config22.decay) {
          this._onChange(currVal);
        }
        this._stop();
      } else if (changed) {
        this._onChange(currVal);
      }
    }
    set(value) {
      import_shared72.raf.batchedUpdates(() => {
        this._stop();
        this._focus(value);
        this._set(value);
      });
      return this;
    }
    pause() {
      this._update({ pause: true });
    }
    resume() {
      this._update({ pause: false });
    }
    finish() {
      if (isAnimating2(this)) {
        const { to: to22, config: config22 } = this.animation;
        import_shared72.raf.batchedUpdates(() => {
          this._onStart();
          if (!config22.decay) {
            this._set(to22, false);
          }
          this._stop();
        });
      }
      return this;
    }
    update(props) {
      const queue = this.queue || (this.queue = []);
      queue.push(props);
      return this;
    }
    start(to22, arg2) {
      let queue;
      if (!import_shared72.is.und(to22)) {
        queue = [import_shared72.is.obj(to22) ? to22 : { ...arg2, to: to22 }];
      } else {
        queue = this.queue || [];
        this.queue = [];
      }
      return Promise.all(queue.map((props) => {
        const up = this._update(props);
        return up;
      })).then((results) => getCombinedResult2(this, results));
    }
    stop(cancel) {
      const { to: to22 } = this.animation;
      this._focus(this.get());
      stopAsync2(this._state, cancel && this._lastCallId);
      import_shared72.raf.batchedUpdates(() => this._stop(to22, cancel));
      return this;
    }
    reset() {
      this._update({ reset: true });
    }
    eventObserved(event) {
      if (event.type == "change") {
        this._start();
      } else if (event.type == "priority") {
        this.priority = event.priority + 1;
      }
    }
    _prepareNode(props) {
      const key = this.key || "";
      let { to: to22, from } = props;
      to22 = import_shared72.is.obj(to22) ? to22[key] : to22;
      if (to22 == null || isAsyncTo2(to22)) {
        to22 = undefined;
      }
      from = import_shared72.is.obj(from) ? from[key] : from;
      if (from == null) {
        from = undefined;
      }
      const range2 = { to: to22, from };
      if (!hasAnimated2(this)) {
        if (props.reverse)
          [to22, from] = [from, to22];
        from = (0, import_shared72.getFluidValue)(from);
        if (!import_shared72.is.und(from)) {
          this._set(from);
        } else if (!(0, import_animated22.getAnimated)(this)) {
          this._set(to22);
        }
      }
      return range2;
    }
    _update({ ...props }, isLoop) {
      const { key, defaultProps } = this;
      if (props.default)
        Object.assign(defaultProps, getDefaultProps2(props, (value, prop) => /^on/.test(prop) ? resolveProp2(value, key) : value));
      mergeActiveFn2(this, props, "onProps");
      sendEvent2(this, "onProps", props, this);
      const range2 = this._prepareNode(props);
      if (Object.isFrozen(this)) {
        throw Error("Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?");
      }
      const state = this._state;
      return scheduleProps2(++this._lastCallId, {
        key,
        props,
        defaultProps,
        state,
        actions: {
          pause: () => {
            if (!isPaused2(this)) {
              setPausedBit2(this, true);
              (0, import_shared72.flushCalls)(state.pauseQueue);
              sendEvent2(this, "onPause", getFinishedResult2(this, checkFinished2(this, this.animation.to)), this);
            }
          },
          resume: () => {
            if (isPaused2(this)) {
              setPausedBit2(this, false);
              if (isAnimating2(this)) {
                this._resume();
              }
              (0, import_shared72.flushCalls)(state.resumeQueue);
              sendEvent2(this, "onResume", getFinishedResult2(this, checkFinished2(this, this.animation.to)), this);
            }
          },
          start: this._merge.bind(this, range2)
        }
      }).then((result) => {
        if (props.loop && result.finished && !(isLoop && result.noop)) {
          const nextProps = createLoopUpdate2(props);
          if (nextProps) {
            return this._update(nextProps, true);
          }
        }
        return result;
      });
    }
    _merge(range2, props, resolve) {
      if (props.cancel) {
        this.stop(true);
        return resolve(getCancelledResult2(this));
      }
      const hasToProp = !import_shared72.is.und(range2.to);
      const hasFromProp = !import_shared72.is.und(range2.from);
      if (hasToProp || hasFromProp) {
        if (props.callId > this._lastToId) {
          this._lastToId = props.callId;
        } else {
          return resolve(getCancelledResult2(this));
        }
      }
      const { key, defaultProps, animation: anim } = this;
      const { to: prevTo, from: prevFrom } = anim;
      let { to: to22 = prevTo, from = prevFrom } = range2;
      if (hasFromProp && !hasToProp && (!props.default || import_shared72.is.und(to22))) {
        to22 = from;
      }
      if (props.reverse)
        [to22, from] = [from, to22];
      const hasFromChanged = !(0, import_shared72.isEqual)(from, prevFrom);
      if (hasFromChanged) {
        anim.from = from;
      }
      from = (0, import_shared72.getFluidValue)(from);
      const hasToChanged = !(0, import_shared72.isEqual)(to22, prevTo);
      if (hasToChanged) {
        this._focus(to22);
      }
      const hasAsyncTo = isAsyncTo2(props.to);
      const { config: config22 } = anim;
      const { decay, velocity } = config22;
      if (hasToProp || hasFromProp) {
        config22.velocity = 0;
      }
      if (props.config && !hasAsyncTo) {
        mergeConfig2(config22, callProp2(props.config, key), props.config !== defaultProps.config ? callProp2(defaultProps.config, key) : undefined);
      }
      let node = (0, import_animated22.getAnimated)(this);
      if (!node || import_shared72.is.und(to22)) {
        return resolve(getFinishedResult2(this, true));
      }
      const reset = import_shared72.is.und(props.reset) ? hasFromProp && !props.default : !import_shared72.is.und(from) && matchProp2(props.reset, key);
      const value = reset ? from : this.get();
      const goal = computeGoal2(to22);
      const isAnimatable = import_shared72.is.num(goal) || import_shared72.is.arr(goal) || (0, import_shared72.isAnimatedString)(goal);
      const immediate = !hasAsyncTo && (!isAnimatable || matchProp2(defaultProps.immediate || props.immediate, key));
      if (hasToChanged) {
        const nodeType = (0, import_animated22.getAnimatedType)(to22);
        if (nodeType !== node.constructor) {
          if (immediate) {
            node = this._set(goal);
          } else
            throw Error(`Cannot animate between ${node.constructor.name} and ${nodeType.name}, as the "to" prop suggests`);
        }
      }
      const goalType = node.constructor;
      let started = (0, import_shared72.hasFluidValue)(to22);
      let finished = false;
      if (!started) {
        const hasValueChanged = reset || !hasAnimated2(this) && hasFromChanged;
        if (hasToChanged || hasValueChanged) {
          finished = (0, import_shared72.isEqual)(computeGoal2(value), goal);
          started = !finished;
        }
        if (!(0, import_shared72.isEqual)(anim.immediate, immediate) && !immediate || !(0, import_shared72.isEqual)(config22.decay, decay) || !(0, import_shared72.isEqual)(config22.velocity, velocity)) {
          started = true;
        }
      }
      if (finished && isAnimating2(this)) {
        if (anim.changed && !reset) {
          started = true;
        } else if (!started) {
          this._stop(prevTo);
        }
      }
      if (!hasAsyncTo) {
        if (started || (0, import_shared72.hasFluidValue)(prevTo)) {
          anim.values = node.getPayload();
          anim.toValues = (0, import_shared72.hasFluidValue)(to22) ? null : goalType == import_animated22.AnimatedString ? [1] : (0, import_shared72.toArray)(goal);
        }
        if (anim.immediate != immediate) {
          anim.immediate = immediate;
          if (!immediate && !reset) {
            this._set(prevTo);
          }
        }
        if (started) {
          const { onRest } = anim;
          (0, import_shared72.each)(ACTIVE_EVENTS2, (type) => mergeActiveFn2(this, props, type));
          const result = getFinishedResult2(this, checkFinished2(this, prevTo));
          (0, import_shared72.flushCalls)(this._pendingCalls, result);
          this._pendingCalls.add(resolve);
          if (anim.changed)
            import_shared72.raf.batchedUpdates(() => {
              anim.changed = !reset;
              onRest?.(result, this);
              if (reset) {
                callProp2(defaultProps.onRest, result);
              } else {
                anim.onStart?.(result, this);
              }
            });
        }
      }
      if (reset) {
        this._set(value);
      }
      if (hasAsyncTo) {
        resolve(runAsync2(props.to, props, this._state, this));
      } else if (started) {
        this._start();
      } else if (isAnimating2(this) && !hasToChanged) {
        this._pendingCalls.add(resolve);
      } else {
        resolve(getNoopResult2(value));
      }
    }
    _focus(value) {
      const anim = this.animation;
      if (value !== anim.to) {
        if ((0, import_shared72.getFluidObservers)(this)) {
          this._detach();
        }
        anim.to = value;
        if ((0, import_shared72.getFluidObservers)(this)) {
          this._attach();
        }
      }
    }
    _attach() {
      let priority2 = 0;
      const { to: to22 } = this.animation;
      if ((0, import_shared72.hasFluidValue)(to22)) {
        (0, import_shared72.addFluidObserver)(to22, this);
        if (isFrameValue2(to22)) {
          priority2 = to22.priority + 1;
        }
      }
      this.priority = priority2;
    }
    _detach() {
      const { to: to22 } = this.animation;
      if ((0, import_shared72.hasFluidValue)(to22)) {
        (0, import_shared72.removeFluidObserver)(to22, this);
      }
    }
    _set(arg, idle = true) {
      const value = (0, import_shared72.getFluidValue)(arg);
      if (!import_shared72.is.und(value)) {
        const oldNode = (0, import_animated22.getAnimated)(this);
        if (!oldNode || !(0, import_shared72.isEqual)(value, oldNode.getValue())) {
          const nodeType = (0, import_animated22.getAnimatedType)(value);
          if (!oldNode || oldNode.constructor != nodeType) {
            (0, import_animated22.setAnimated)(this, nodeType.create(value));
          } else {
            oldNode.setValue(value);
          }
          if (oldNode) {
            import_shared72.raf.batchedUpdates(() => {
              this._onChange(value, idle);
            });
          }
        }
      }
      return (0, import_animated22.getAnimated)(this);
    }
    _onStart() {
      const anim = this.animation;
      if (!anim.changed) {
        anim.changed = true;
        sendEvent2(this, "onStart", getFinishedResult2(this, checkFinished2(this, anim.to)), this);
      }
    }
    _onChange(value, idle) {
      if (!idle) {
        this._onStart();
        callProp2(this.animation.onChange, value, this);
      }
      callProp2(this.defaultProps.onChange, value, this);
      super._onChange(value, idle);
    }
    _start() {
      const anim = this.animation;
      (0, import_animated22.getAnimated)(this).reset((0, import_shared72.getFluidValue)(anim.to));
      if (!anim.immediate) {
        anim.fromValues = anim.values.map((node) => node.lastPosition);
      }
      if (!isAnimating2(this)) {
        setActiveBit2(this, true);
        if (!isPaused2(this)) {
          this._resume();
        }
      }
    }
    _resume() {
      if (import_shared72.Globals.skipAnimation) {
        this.finish();
      } else {
        import_shared72.frameLoop.start(this);
      }
    }
    _stop(goal, cancel) {
      if (isAnimating2(this)) {
        setActiveBit2(this, false);
        const anim = this.animation;
        (0, import_shared72.each)(anim.values, (node) => {
          node.done = true;
        });
        if (anim.toValues) {
          anim.onChange = anim.onPause = anim.onResume = undefined;
        }
        (0, import_shared72.callFluidObservers)(this, {
          type: "idle",
          parent: this
        });
        const result = cancel ? getCancelledResult2(this.get()) : getFinishedResult2(this.get(), checkFinished2(this, goal ?? anim.to));
        (0, import_shared72.flushCalls)(this._pendingCalls, result);
        if (anim.changed) {
          anim.changed = false;
          sendEvent2(this, "onRest", result, this);
        }
      }
    }
  };
  function checkFinished2(target, to22) {
    const goal = computeGoal2(to22);
    const value = computeGoal2(target.get());
    return (0, import_shared72.isEqual)(value, goal);
  }
  function createLoopUpdate2(props, loop2 = props.loop, to22 = props.to) {
    const loopRet = callProp2(loop2);
    if (loopRet) {
      const overrides = loopRet !== true && inferTo2(loopRet);
      const reverse = (overrides || props).reverse;
      const reset = !overrides || overrides.reset;
      return createUpdate2({
        ...props,
        loop: loop2,
        default: false,
        pause: undefined,
        to: !reverse || isAsyncTo2(to22) ? to22 : undefined,
        from: reset ? props.from : undefined,
        reset,
        ...overrides
      });
    }
  }
  function createUpdate2(props) {
    const { to: to22, from } = props = inferTo2(props);
    const keys = /* @__PURE__ */ new Set;
    if (import_shared72.is.obj(to22))
      findDefined2(to22, keys);
    if (import_shared72.is.obj(from))
      findDefined2(from, keys);
    props.keys = keys.size ? Array.from(keys) : null;
    return props;
  }
  function declareUpdate2(props) {
    const update22 = createUpdate2(props);
    if (import_shared72.is.und(update22.default)) {
      update22.default = getDefaultProps2(update22);
    }
    return update22;
  }
  function findDefined2(values, keys) {
    (0, import_shared72.eachProp)(values, (value, key) => value != null && keys.add(key));
  }
  var ACTIVE_EVENTS2 = [
    "onStart",
    "onRest",
    "onChange",
    "onPause",
    "onResume"
  ];
  function mergeActiveFn2(target, props, type) {
    target.animation[type] = props[type] !== getDefaultProp2(props, type) ? resolveProp2(props[type], target.key) : undefined;
  }
  function sendEvent2(target, type, ...args) {
    target.animation[type]?.(...args);
    target.defaultProps[type]?.(...args);
  }
  var import_shared82 = require_cjs2();
  var BATCHED_EVENTS2 = ["onStart", "onChange", "onRest"];
  var nextId22 = 1;
  var Controller2 = class {
    constructor(props, flush3) {
      this.id = nextId22++;
      this.springs = {};
      this.queue = [];
      this._lastAsyncId = 0;
      this._active = /* @__PURE__ */ new Set;
      this._changed = /* @__PURE__ */ new Set;
      this._started = false;
      this._state = {
        paused: false,
        pauseQueue: /* @__PURE__ */ new Set,
        resumeQueue: /* @__PURE__ */ new Set,
        timeouts: /* @__PURE__ */ new Set
      };
      this._events = {
        onStart: /* @__PURE__ */ new Map,
        onChange: /* @__PURE__ */ new Map,
        onRest: /* @__PURE__ */ new Map
      };
      this._onFrame = this._onFrame.bind(this);
      if (flush3) {
        this._flush = flush3;
      }
      if (props) {
        this.start({ default: true, ...props });
      }
    }
    get idle() {
      return !this._state.asyncTo && Object.values(this.springs).every((spring) => {
        return spring.idle && !spring.isDelayed && !spring.isPaused;
      });
    }
    get item() {
      return this._item;
    }
    set item(item) {
      this._item = item;
    }
    get() {
      const values = {};
      this.each((spring, key) => values[key] = spring.get());
      return values;
    }
    set(values) {
      for (const key in values) {
        const value = values[key];
        if (!import_shared82.is.und(value)) {
          this.springs[key].set(value);
        }
      }
    }
    update(props) {
      if (props) {
        this.queue.push(createUpdate2(props));
      }
      return this;
    }
    start(props) {
      let { queue } = this;
      if (props) {
        queue = (0, import_shared82.toArray)(props).map(createUpdate2);
      } else {
        this.queue = [];
      }
      if (this._flush) {
        return this._flush(this, queue);
      }
      prepareKeys2(this, queue);
      return flushUpdateQueue2(this, queue);
    }
    stop(arg, keys) {
      if (arg !== !!arg) {
        keys = arg;
      }
      if (keys) {
        const springs = this.springs;
        (0, import_shared82.each)((0, import_shared82.toArray)(keys), (key) => springs[key].stop(!!arg));
      } else {
        stopAsync2(this._state, this._lastAsyncId);
        this.each((spring) => spring.stop(!!arg));
      }
      return this;
    }
    pause(keys) {
      if (import_shared82.is.und(keys)) {
        this.start({ pause: true });
      } else {
        const springs = this.springs;
        (0, import_shared82.each)((0, import_shared82.toArray)(keys), (key) => springs[key].pause());
      }
      return this;
    }
    resume(keys) {
      if (import_shared82.is.und(keys)) {
        this.start({ pause: false });
      } else {
        const springs = this.springs;
        (0, import_shared82.each)((0, import_shared82.toArray)(keys), (key) => springs[key].resume());
      }
      return this;
    }
    each(iterator) {
      (0, import_shared82.eachProp)(this.springs, iterator);
    }
    _onFrame() {
      const { onStart, onChange, onRest } = this._events;
      const active = this._active.size > 0;
      const changed = this._changed.size > 0;
      if (active && !this._started || changed && !this._started) {
        this._started = true;
        (0, import_shared82.flush)(onStart, ([onStart2, result]) => {
          result.value = this.get();
          onStart2(result, this, this._item);
        });
      }
      const idle = !active && this._started;
      const values = changed || idle && onRest.size ? this.get() : null;
      if (changed && onChange.size) {
        (0, import_shared82.flush)(onChange, ([onChange2, result]) => {
          result.value = values;
          onChange2(result, this, this._item);
        });
      }
      if (idle) {
        this._started = false;
        (0, import_shared82.flush)(onRest, ([onRest2, result]) => {
          result.value = values;
          onRest2(result, this, this._item);
        });
      }
    }
    eventObserved(event) {
      if (event.type == "change") {
        this._changed.add(event.parent);
        if (!event.idle) {
          this._active.add(event.parent);
        }
      } else if (event.type == "idle") {
        this._active.delete(event.parent);
      } else
        return;
      import_shared82.raf.onFrame(this._onFrame);
    }
  };
  function flushUpdateQueue2(ctrl, queue) {
    return Promise.all(queue.map((props) => flushUpdate2(ctrl, props))).then((results) => getCombinedResult2(ctrl, results));
  }
  async function flushUpdate2(ctrl, props, isLoop) {
    const { keys, to: to22, from, loop: loop2, onRest, onResolve } = props;
    const defaults22 = import_shared82.is.obj(props.default) && props.default;
    if (loop2) {
      props.loop = false;
    }
    if (to22 === false)
      props.to = null;
    if (from === false)
      props.from = null;
    const asyncTo = import_shared82.is.arr(to22) || import_shared82.is.fun(to22) ? to22 : undefined;
    if (asyncTo) {
      props.to = undefined;
      props.onRest = undefined;
      if (defaults22) {
        defaults22.onRest = undefined;
      }
    } else {
      (0, import_shared82.each)(BATCHED_EVENTS2, (key) => {
        const handler = props[key];
        if (import_shared82.is.fun(handler)) {
          const queue = ctrl["_events"][key];
          props[key] = ({ finished, cancelled }) => {
            const result2 = queue.get(handler);
            if (result2) {
              if (!finished)
                result2.finished = false;
              if (cancelled)
                result2.cancelled = true;
            } else {
              queue.set(handler, {
                value: null,
                finished: finished || false,
                cancelled: cancelled || false
              });
            }
          };
          if (defaults22) {
            defaults22[key] = props[key];
          }
        }
      });
    }
    const state = ctrl["_state"];
    if (props.pause === !state.paused) {
      state.paused = props.pause;
      (0, import_shared82.flushCalls)(props.pause ? state.pauseQueue : state.resumeQueue);
    } else if (state.paused) {
      props.pause = true;
    }
    const promises = (keys || Object.keys(ctrl.springs)).map((key) => ctrl.springs[key].start(props));
    const cancel = props.cancel === true || getDefaultProp2(props, "cancel") === true;
    if (asyncTo || cancel && state.asyncId) {
      promises.push(scheduleProps2(++ctrl["_lastAsyncId"], {
        props,
        state,
        actions: {
          pause: import_shared82.noop,
          resume: import_shared82.noop,
          start(props2, resolve) {
            if (cancel) {
              stopAsync2(state, ctrl["_lastAsyncId"]);
              resolve(getCancelledResult2(ctrl));
            } else {
              props2.onRest = onRest;
              resolve(runAsync2(asyncTo, props2, state, ctrl));
            }
          }
        }
      }));
    }
    if (state.paused) {
      await new Promise((resume) => {
        state.resumeQueue.add(resume);
      });
    }
    const result = getCombinedResult2(ctrl, await Promise.all(promises));
    if (loop2 && result.finished && !(isLoop && result.noop)) {
      const nextProps = createLoopUpdate2(props, loop2, to22);
      if (nextProps) {
        prepareKeys2(ctrl, [nextProps]);
        return flushUpdate2(ctrl, nextProps, true);
      }
    }
    if (onResolve) {
      import_shared82.raf.batchedUpdates(() => onResolve(result, ctrl, ctrl.item));
    }
    return result;
  }
  function getSprings2(ctrl, props) {
    const springs = { ...ctrl.springs };
    if (props) {
      (0, import_shared82.each)((0, import_shared82.toArray)(props), (props2) => {
        if (import_shared82.is.und(props2.keys)) {
          props2 = createUpdate2(props2);
        }
        if (!import_shared82.is.obj(props2.to)) {
          props2 = { ...props2, to: undefined };
        }
        prepareSprings2(springs, props2, (key) => {
          return createSpring2(key);
        });
      });
    }
    setSprings2(ctrl, springs);
    return springs;
  }
  function setSprings2(ctrl, springs) {
    (0, import_shared82.eachProp)(springs, (spring, key) => {
      if (!ctrl.springs[key]) {
        ctrl.springs[key] = spring;
        (0, import_shared82.addFluidObserver)(spring, ctrl);
      }
    });
  }
  function createSpring2(key, observer) {
    const spring = new SpringValue2;
    spring.key = key;
    if (observer) {
      (0, import_shared82.addFluidObserver)(spring, observer);
    }
    return spring;
  }
  function prepareSprings2(springs, props, create) {
    if (props.keys) {
      (0, import_shared82.each)(props.keys, (key) => {
        const spring = springs[key] || (springs[key] = create(key));
        spring["_prepareNode"](props);
      });
    }
  }
  function prepareKeys2(ctrl, queue) {
    (0, import_shared82.each)(queue, (props) => {
      prepareSprings2(ctrl.springs, props, (key) => {
        return createSpring2(key, ctrl);
      });
    });
  }
  var React4 = __toESM2(react);
  var import_shared92 = require_cjs2();
  var SpringContext2 = ({
    children,
    ...props
  }) => {
    const inherited = (0, import_react17.useContext)(ctx2);
    const pause = props.pause || !!inherited.pause, immediate = props.immediate || !!inherited.immediate;
    props = (0, import_shared92.useMemoOne)(() => ({ pause, immediate }), [pause, immediate]);
    const { Provider } = ctx2;
    return /* @__PURE__ */ React4.createElement(Provider, { value: props }, children);
  };
  var ctx2 = makeContext2(SpringContext2, {});
  SpringContext2.Provider = ctx2.Provider;
  SpringContext2.Consumer = ctx2.Consumer;
  function makeContext2(target, init) {
    Object.assign(target, React4.createContext(init));
    target.Provider._context = target;
    target.Consumer._context = target;
    return target;
  }
  var import_shared102 = require_cjs2();
  var SpringRef2 = () => {
    const current = [];
    const SpringRef22 = function(props) {
      (0, import_shared102.deprecateDirectCall)();
      const results = [];
      (0, import_shared102.each)(current, (ctrl, i) => {
        if (import_shared102.is.und(props)) {
          results.push(ctrl.start());
        } else {
          const update22 = _getProps(props, ctrl, i);
          if (update22) {
            results.push(ctrl.start(update22));
          }
        }
      });
      return results;
    };
    SpringRef22.current = current;
    SpringRef22.add = function(ctrl) {
      if (!current.includes(ctrl)) {
        current.push(ctrl);
      }
    };
    SpringRef22.delete = function(ctrl) {
      const i = current.indexOf(ctrl);
      if (~i)
        current.splice(i, 1);
    };
    SpringRef22.pause = function() {
      (0, import_shared102.each)(current, (ctrl) => ctrl.pause(...arguments));
      return this;
    };
    SpringRef22.resume = function() {
      (0, import_shared102.each)(current, (ctrl) => ctrl.resume(...arguments));
      return this;
    };
    SpringRef22.set = function(values) {
      (0, import_shared102.each)(current, (ctrl, i) => {
        const update22 = import_shared102.is.fun(values) ? values(i, ctrl) : values;
        if (update22) {
          ctrl.set(update22);
        }
      });
    };
    SpringRef22.start = function(props) {
      const results = [];
      (0, import_shared102.each)(current, (ctrl, i) => {
        if (import_shared102.is.und(props)) {
          results.push(ctrl.start());
        } else {
          const update22 = this._getProps(props, ctrl, i);
          if (update22) {
            results.push(ctrl.start(update22));
          }
        }
      });
      return results;
    };
    SpringRef22.stop = function() {
      (0, import_shared102.each)(current, (ctrl) => ctrl.stop(...arguments));
      return this;
    };
    SpringRef22.update = function(props) {
      (0, import_shared102.each)(current, (ctrl, i) => ctrl.update(this._getProps(props, ctrl, i)));
      return this;
    };
    const _getProps = function(arg, ctrl, index) {
      return import_shared102.is.fun(arg) ? arg(index, ctrl) : arg;
    };
    SpringRef22._getProps = _getProps;
    return SpringRef22;
  };
  function useSprings2(length, props, deps) {
    const propsFn = import_shared112.is.fun(props) && props;
    if (propsFn && !deps)
      deps = [];
    const ref = (0, import_react22.useMemo)(() => propsFn || arguments.length == 3 ? SpringRef2() : undefined, []);
    const layoutId = (0, import_react22.useRef)(0);
    const forceUpdate = (0, import_shared112.useForceUpdate)();
    const state = (0, import_react22.useMemo)(() => ({
      ctrls: [],
      queue: [],
      flush(ctrl, updates2) {
        const springs2 = getSprings2(ctrl, updates2);
        const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some((key) => !ctrl.springs[key]);
        return canFlushSync ? flushUpdateQueue2(ctrl, updates2) : new Promise((resolve) => {
          setSprings2(ctrl, springs2);
          state.queue.push(() => {
            resolve(flushUpdateQueue2(ctrl, updates2));
          });
          forceUpdate();
        });
      }
    }), []);
    const ctrls = (0, import_react22.useRef)([...state.ctrls]);
    const updates = [];
    const prevLength = (0, import_shared112.usePrev)(length) || 0;
    (0, import_react22.useMemo)(() => {
      (0, import_shared112.each)(ctrls.current.slice(length, prevLength), (ctrl) => {
        detachRefs2(ctrl, ref);
        ctrl.stop(true);
      });
      ctrls.current.length = length;
      declareUpdates(prevLength, length);
    }, [length]);
    (0, import_react22.useMemo)(() => {
      declareUpdates(0, Math.min(prevLength, length));
    }, deps);
    function declareUpdates(startIndex, endIndex) {
      for (let i = startIndex;i < endIndex; i++) {
        const ctrl = ctrls.current[i] || (ctrls.current[i] = new Controller2(null, state.flush));
        const update22 = propsFn ? propsFn(i, ctrl) : props[i];
        if (update22) {
          updates[i] = declareUpdate2(update22);
        }
      }
    }
    const springs = ctrls.current.map((ctrl, i) => getSprings2(ctrl, updates[i]));
    const context = (0, import_react22.useContext)(SpringContext2);
    const prevContext = (0, import_shared112.usePrev)(context);
    const hasContext = context !== prevContext && hasProps2(context);
    (0, import_shared112.useIsomorphicLayoutEffect)(() => {
      layoutId.current++;
      state.ctrls = ctrls.current;
      const { queue } = state;
      if (queue.length) {
        state.queue = [];
        (0, import_shared112.each)(queue, (cb) => cb());
      }
      (0, import_shared112.each)(ctrls.current, (ctrl, i) => {
        ref?.add(ctrl);
        if (hasContext) {
          ctrl.start({ default: context });
        }
        const update22 = updates[i];
        if (update22) {
          replaceRef2(ctrl, update22.ref);
          if (ctrl.ref) {
            ctrl.queue.push(update22);
          } else {
            ctrl.start(update22);
          }
        }
      });
    });
    (0, import_shared112.useOnce)(() => () => {
      (0, import_shared112.each)(state.ctrls, (ctrl) => ctrl.stop(true));
    });
    const values = springs.map((x) => ({ ...x }));
    return ref ? [values, ref] : values;
  }
  function useSpring2(props, deps) {
    const isFn = import_shared122.is.fun(props);
    const [[values], ref] = useSprings2(1, isFn ? props : [props], isFn ? deps || [] : deps);
    return isFn || arguments.length == 2 ? [values, ref] : values;
  }
  var initSpringRef = () => SpringRef2();
  var useSpringRef = () => (0, import_react32.useState)(initSpringRef)[0];
  var import_shared132 = require_cjs2();
  var useSpringValue = (initial, props) => {
    const springValue = (0, import_shared132.useConstant)(() => new SpringValue2(initial, props));
    (0, import_shared132.useOnce)(() => () => {
      springValue.stop();
    });
    return springValue;
  };
  var import_shared142 = require_cjs2();
  function useTrail(length, propsArg, deps) {
    const propsFn = import_shared142.is.fun(propsArg) && propsArg;
    if (propsFn && !deps)
      deps = [];
    let reverse = true;
    let passedRef = undefined;
    const result = useSprings2(length, (i, ctrl) => {
      const props = propsFn ? propsFn(i, ctrl) : propsArg;
      passedRef = props.ref;
      reverse = reverse && props.reverse;
      return props;
    }, deps || [{}]);
    (0, import_shared142.useIsomorphicLayoutEffect)(() => {
      (0, import_shared142.each)(result[1].current, (ctrl, i) => {
        const parent = result[1].current[i + (reverse ? 1 : -1)];
        replaceRef2(ctrl, passedRef);
        if (ctrl.ref) {
          if (parent) {
            ctrl.update({ to: parent.springs });
          }
          return;
        }
        if (parent) {
          ctrl.start({ to: parent.springs });
        } else {
          ctrl.start();
        }
      });
    }, deps);
    if (propsFn || arguments.length == 3) {
      const ref = passedRef ?? result[1];
      ref["_getProps"] = (propsArg2, ctrl, i) => {
        const props = import_shared142.is.fun(propsArg2) ? propsArg2(i, ctrl) : propsArg2;
        if (props) {
          const parent = ref.current[i + (props.reverse ? 1 : -1)];
          if (parent)
            props.to = parent.springs;
          return props;
        }
      };
      return result;
    }
    return result[0];
  }
  var React23 = __toESM2(react2);
  var import_shared152 = require_cjs2();
  function useTransition(data, props, deps) {
    const propsFn = import_shared152.is.fun(props) && props;
    const {
      reset,
      sort,
      trail = 0,
      expires = true,
      exitBeforeEnter = false,
      onDestroyed,
      ref: propsRef,
      config: propsConfig
    } = propsFn ? propsFn() : props;
    const ref = (0, import_react42.useMemo)(() => propsFn || arguments.length == 3 ? SpringRef2() : undefined, []);
    const items = (0, import_shared152.toArray)(data);
    const transitions = [];
    const usedTransitions = (0, import_react42.useRef)(null);
    const prevTransitions = reset ? null : usedTransitions.current;
    (0, import_shared152.useIsomorphicLayoutEffect)(() => {
      usedTransitions.current = transitions;
    });
    (0, import_shared152.useOnce)(() => {
      (0, import_shared152.each)(transitions, (t) => {
        ref?.add(t.ctrl);
        t.ctrl.ref = ref;
      });
      return () => {
        (0, import_shared152.each)(usedTransitions.current, (t) => {
          if (t.expired) {
            clearTimeout(t.expirationId);
          }
          detachRefs2(t.ctrl, ref);
          t.ctrl.stop(true);
        });
      };
    });
    const keys = getKeys(items, propsFn ? propsFn() : props, prevTransitions);
    const expired = reset && usedTransitions.current || [];
    (0, import_shared152.useIsomorphicLayoutEffect)(() => (0, import_shared152.each)(expired, ({ ctrl, item, key }) => {
      detachRefs2(ctrl, ref);
      callProp2(onDestroyed, item, key);
    }));
    const reused = [];
    if (prevTransitions)
      (0, import_shared152.each)(prevTransitions, (t, i) => {
        if (t.expired) {
          clearTimeout(t.expirationId);
          expired.push(t);
        } else {
          i = reused[i] = keys.indexOf(t.key);
          if (~i)
            transitions[i] = t;
        }
      });
    (0, import_shared152.each)(items, (item, i) => {
      if (!transitions[i]) {
        transitions[i] = {
          key: keys[i],
          item,
          phase: "mount",
          ctrl: new Controller2
        };
        transitions[i].ctrl.item = item;
      }
    });
    if (reused.length) {
      let i = -1;
      const { leave } = propsFn ? propsFn() : props;
      (0, import_shared152.each)(reused, (keyIndex, prevIndex) => {
        const t = prevTransitions[prevIndex];
        if (~keyIndex) {
          i = transitions.indexOf(t);
          transitions[i] = { ...t, item: items[keyIndex] };
        } else if (leave) {
          transitions.splice(++i, 0, t);
        }
      });
    }
    if (import_shared152.is.fun(sort)) {
      transitions.sort((a, b) => sort(a.item, b.item));
    }
    let delay = -trail;
    const forceUpdate = (0, import_shared152.useForceUpdate)();
    const defaultProps = getDefaultProps2(props);
    const changes = /* @__PURE__ */ new Map;
    const exitingTransitions = (0, import_react42.useRef)(/* @__PURE__ */ new Map);
    const forceChange = (0, import_react42.useRef)(false);
    (0, import_shared152.each)(transitions, (t, i) => {
      const key = t.key;
      const prevPhase = t.phase;
      const p2 = propsFn ? propsFn() : props;
      let to22;
      let phase;
      const propsDelay = callProp2(p2.delay || 0, key);
      if (prevPhase == "mount") {
        to22 = p2.enter;
        phase = "enter";
      } else {
        const isLeave = keys.indexOf(key) < 0;
        if (prevPhase != "leave") {
          if (isLeave) {
            to22 = p2.leave;
            phase = "leave";
          } else if (to22 = p2.update) {
            phase = "update";
          } else
            return;
        } else if (!isLeave) {
          to22 = p2.enter;
          phase = "enter";
        } else
          return;
      }
      to22 = callProp2(to22, t.item, i);
      to22 = import_shared152.is.obj(to22) ? inferTo2(to22) : { to: to22 };
      if (!to22.config) {
        const config22 = propsConfig || defaultProps.config;
        to22.config = callProp2(config22, t.item, i, phase);
      }
      delay += trail;
      const payload = {
        ...defaultProps,
        delay: propsDelay + delay,
        ref: propsRef,
        immediate: p2.immediate,
        reset: false,
        ...to22
      };
      if (phase == "enter" && import_shared152.is.und(payload.from)) {
        const p22 = propsFn ? propsFn() : props;
        const from = import_shared152.is.und(p22.initial) || prevTransitions ? p22.from : p22.initial;
        payload.from = callProp2(from, t.item, i);
      }
      const { onResolve } = payload;
      payload.onResolve = (result) => {
        callProp2(onResolve, result);
        const transitions2 = usedTransitions.current;
        const t22 = transitions2.find((t32) => t32.key === key);
        if (!t22)
          return;
        if (result.cancelled && t22.phase != "update") {
          return;
        }
        if (t22.ctrl.idle) {
          const idle = transitions2.every((t32) => t32.ctrl.idle);
          if (t22.phase == "leave") {
            const expiry = callProp2(expires, t22.item);
            if (expiry !== false) {
              const expiryMs = expiry === true ? 0 : expiry;
              t22.expired = true;
              if (!idle && expiryMs > 0) {
                if (expiryMs <= 2147483647)
                  t22.expirationId = setTimeout(forceUpdate, expiryMs);
                return;
              }
            }
          }
          if (idle && transitions2.some((t32) => t32.expired)) {
            exitingTransitions.current.delete(t22);
            if (exitBeforeEnter) {
              forceChange.current = true;
            }
            forceUpdate();
          }
        }
      };
      const springs = getSprings2(t.ctrl, payload);
      if (phase === "leave" && exitBeforeEnter) {
        exitingTransitions.current.set(t, { phase, springs, payload });
      } else {
        changes.set(t, { phase, springs, payload });
      }
    });
    const context = (0, import_react42.useContext)(SpringContext2);
    const prevContext = (0, import_shared152.usePrev)(context);
    const hasContext = context !== prevContext && hasProps2(context);
    (0, import_shared152.useIsomorphicLayoutEffect)(() => {
      if (hasContext) {
        (0, import_shared152.each)(transitions, (t) => {
          t.ctrl.start({ default: context });
        });
      }
    }, [context]);
    (0, import_shared152.each)(changes, (_, t) => {
      if (exitingTransitions.current.size) {
        const ind = transitions.findIndex((state) => state.key === t.key);
        transitions.splice(ind, 1);
      }
    });
    (0, import_shared152.useIsomorphicLayoutEffect)(() => {
      (0, import_shared152.each)(exitingTransitions.current.size ? exitingTransitions.current : changes, ({ phase, payload }, t) => {
        const { ctrl } = t;
        t.phase = phase;
        ref?.add(ctrl);
        if (hasContext && phase == "enter") {
          ctrl.start({ default: context });
        }
        if (payload) {
          replaceRef2(ctrl, payload.ref);
          if ((ctrl.ref || ref) && !forceChange.current) {
            ctrl.update(payload);
          } else {
            ctrl.start(payload);
            if (forceChange.current) {
              forceChange.current = false;
            }
          }
        }
      });
    }, reset ? undefined : deps);
    const renderTransitions = (render) => /* @__PURE__ */ React23.createElement(React23.Fragment, null, transitions.map((t, i) => {
      const { springs } = changes.get(t) || t.ctrl;
      const elem = render({ ...springs }, t.item, t, i);
      return elem && elem.type ? /* @__PURE__ */ React23.createElement(elem.type, {
        ...elem.props,
        key: import_shared152.is.str(t.key) || import_shared152.is.num(t.key) ? t.key : t.ctrl.id,
        ref: elem.ref
      }) : elem;
    }));
    return ref ? [renderTransitions, ref] : renderTransitions;
  }
  var nextKey = 1;
  function getKeys(items, { key, keys = key }, prevTransitions) {
    if (keys === null) {
      const reused = /* @__PURE__ */ new Set;
      return items.map((item) => {
        const t = prevTransitions && prevTransitions.find((t22) => t22.item === item && t22.phase !== "leave" && !reused.has(t22));
        if (t) {
          reused.add(t);
          return t.key;
        }
        return nextKey++;
      });
    }
    return import_shared152.is.und(keys) ? items : import_shared152.is.fun(keys) ? items.map(keys) : (0, import_shared152.toArray)(keys);
  }
  var import_shared162 = require_cjs2();
  var useScroll = ({
    container,
    ...springOptions
  } = {}) => {
    const [scrollValues, api] = useSpring2(() => ({
      scrollX: 0,
      scrollY: 0,
      scrollXProgress: 0,
      scrollYProgress: 0,
      ...springOptions
    }), []);
    (0, import_shared162.useIsomorphicLayoutEffect)(() => {
      const cleanupScroll = (0, import_shared162.onScroll)(({ x, y }) => {
        api.start({
          scrollX: x.current,
          scrollXProgress: x.progress,
          scrollY: y.current,
          scrollYProgress: y.progress
        });
      }, { container: container?.current || undefined });
      return () => {
        (0, import_shared162.each)(Object.values(scrollValues), (value) => value.stop());
        cleanupScroll();
      };
    }, []);
    return scrollValues;
  };
  var import_shared172 = require_cjs2();
  var useResize = ({
    container,
    ...springOptions
  }) => {
    const [sizeValues, api] = useSpring2(() => ({
      width: 0,
      height: 0,
      ...springOptions
    }), []);
    (0, import_shared172.useIsomorphicLayoutEffect)(() => {
      const cleanupScroll = (0, import_shared172.onResize)(({ width, height }) => {
        api.start({
          width,
          height,
          immediate: sizeValues.width.get() === 0 || sizeValues.height.get() === 0
        });
      }, { container: container?.current || undefined });
      return () => {
        (0, import_shared172.each)(Object.values(sizeValues), (value) => value.stop());
        cleanupScroll();
      };
    }, []);
    return sizeValues;
  };
  var import_shared182 = require_cjs2();
  var defaultThresholdOptions = {
    any: 0,
    all: 1
  };
  function useInView(props, args) {
    const [isInView, setIsInView] = (0, import_react52.useState)(false);
    const ref = (0, import_react52.useRef)();
    const propsFn = import_shared182.is.fun(props) && props;
    const springsProps = propsFn ? propsFn() : {};
    const { to: to22 = {}, from = {}, ...restSpringProps } = springsProps;
    const intersectionArguments = propsFn ? args : props;
    const [springs, api] = useSpring2(() => ({ from, ...restSpringProps }), []);
    (0, import_shared182.useIsomorphicLayoutEffect)(() => {
      const element = ref.current;
      const {
        root,
        once: once2,
        amount = "any",
        ...restArgs
      } = intersectionArguments ?? {};
      if (!element || once2 && isInView || typeof IntersectionObserver === "undefined")
        return;
      const activeIntersections = /* @__PURE__ */ new WeakMap;
      const onEnter = () => {
        if (to22) {
          api.start(to22);
        }
        setIsInView(true);
        const cleanup = () => {
          if (from) {
            api.start(from);
          }
          setIsInView(false);
        };
        return once2 ? undefined : cleanup;
      };
      const handleIntersection = (entries) => {
        entries.forEach((entry) => {
          const onLeave = activeIntersections.get(entry.target);
          if (entry.isIntersecting === Boolean(onLeave)) {
            return;
          }
          if (entry.isIntersecting) {
            const newOnLeave = onEnter();
            if (import_shared182.is.fun(newOnLeave)) {
              activeIntersections.set(entry.target, newOnLeave);
            } else {
              observer.unobserve(entry.target);
            }
          } else if (onLeave) {
            onLeave();
            activeIntersections.delete(entry.target);
          }
        });
      };
      const observer = new IntersectionObserver(handleIntersection, {
        root: root && root.current || undefined,
        threshold: typeof amount === "number" || Array.isArray(amount) ? amount : defaultThresholdOptions[amount],
        ...restArgs
      });
      observer.observe(element);
      return () => observer.unobserve(element);
    }, [intersectionArguments]);
    if (propsFn) {
      return [ref, springs];
    }
    return [ref, isInView];
  }
  function Spring({ children, ...props }) {
    return children(useSpring2(props));
  }
  var import_shared192 = require_cjs2();
  function Trail({
    items,
    children,
    ...props
  }) {
    const trails = useTrail(items.length, props);
    return items.map((item, index) => {
      const result = children(item, index);
      return import_shared192.is.fun(result) ? result(trails[index]) : result;
    });
  }
  function Transition({
    items,
    children,
    ...props
  }) {
    return useTransition(items, props)(children);
  }
  var import_shared212 = require_cjs2();
  var import_shared202 = require_cjs2();
  var import_animated32 = require_cjs3();
  var Interpolation2 = class extends FrameValue2 {
    constructor(source, args) {
      super();
      this.source = source;
      this.idle = true;
      this._active = /* @__PURE__ */ new Set;
      this.calc = (0, import_shared202.createInterpolator)(...args);
      const value = this._get();
      const nodeType = (0, import_animated32.getAnimatedType)(value);
      (0, import_animated32.setAnimated)(this, nodeType.create(value));
    }
    advance(_dt) {
      const value = this._get();
      const oldValue = this.get();
      if (!(0, import_shared202.isEqual)(value, oldValue)) {
        (0, import_animated32.getAnimated)(this).setValue(value);
        this._onChange(value, this.idle);
      }
      if (!this.idle && checkIdle2(this._active)) {
        becomeIdle2(this);
      }
    }
    _get() {
      const inputs = import_shared202.is.arr(this.source) ? this.source.map(import_shared202.getFluidValue) : (0, import_shared202.toArray)((0, import_shared202.getFluidValue)(this.source));
      return this.calc(...inputs);
    }
    _start() {
      if (this.idle && !checkIdle2(this._active)) {
        this.idle = false;
        (0, import_shared202.each)((0, import_animated32.getPayload)(this), (node) => {
          node.done = false;
        });
        if (import_shared202.Globals.skipAnimation) {
          import_shared202.raf.batchedUpdates(() => this.advance());
          becomeIdle2(this);
        } else {
          import_shared202.frameLoop.start(this);
        }
      }
    }
    _attach() {
      let priority2 = 1;
      (0, import_shared202.each)((0, import_shared202.toArray)(this.source), (source) => {
        if ((0, import_shared202.hasFluidValue)(source)) {
          (0, import_shared202.addFluidObserver)(source, this);
        }
        if (isFrameValue2(source)) {
          if (!source.idle) {
            this._active.add(source);
          }
          priority2 = Math.max(priority2, source.priority + 1);
        }
      });
      this.priority = priority2;
      this._start();
    }
    _detach() {
      (0, import_shared202.each)((0, import_shared202.toArray)(this.source), (source) => {
        if ((0, import_shared202.hasFluidValue)(source)) {
          (0, import_shared202.removeFluidObserver)(source, this);
        }
      });
      this._active.clear();
      becomeIdle2(this);
    }
    eventObserved(event) {
      if (event.type == "change") {
        if (event.idle) {
          this.advance();
        } else {
          this._active.add(event.parent);
          this._start();
        }
      } else if (event.type == "idle") {
        this._active.delete(event.parent);
      } else if (event.type == "priority") {
        this.priority = (0, import_shared202.toArray)(this.source).reduce((highest, parent) => Math.max(highest, (isFrameValue2(parent) ? parent.priority : 0) + 1), 0);
      }
    }
  };
  function isIdle2(source) {
    return source.idle !== false;
  }
  function checkIdle2(active) {
    return !active.size || Array.from(active).every(isIdle2);
  }
  function becomeIdle2(self2) {
    if (!self2.idle) {
      self2.idle = true;
      (0, import_shared202.each)((0, import_animated32.getPayload)(self2), (node) => {
        node.done = true;
      });
      (0, import_shared202.callFluidObservers)(self2, {
        type: "idle",
        parent: self2
      });
    }
  }
  var to2 = (source, ...args) => new Interpolation2(source, args);
  var interpolate2 = (source, ...args) => ((0, import_shared212.deprecateInterpolate)(), new Interpolation2(source, args));
  var import_shared222 = require_cjs2();
  import_shared222.Globals.assign({
    createStringInterpolator: import_shared222.createStringInterpolator,
    to: (source, args) => new Interpolation2(source, args)
  });
  var update3 = import_shared222.frameLoop.advance;
  var import_shared232 = require_cjs2();
  __reExport(src_exports, require_cjs4(), module.exports);
});

// node_modules/@react-spring/core/dist/cjs/index.js
var require_cjs5 = __commonJS((exports, module) => {
  if (false) {
  } else {
    module.exports = require_react_spring_core_development();
  }
});

// node_modules/@react-spring/web/dist/cjs/react-spring_web.development.cjs
var require_react_spring_web_development = __commonJS((exports, module) => {
  var import_react_dom2 = __toESM(require_react_dom(), 1);
  var __defProp3 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export3 = (target, all) => {
    for (var name in all)
      __defProp3(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to2, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to2, key) && key !== except)
          __defProp3(to2, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to2;
  };
  var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
  var __toCommonJS = (mod) => __copyProps(__defProp3({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export3(src_exports, {
    a: () => animated2,
    animated: () => animated2
  });
  module.exports = __toCommonJS(src_exports);
  var import_core2 = require_cjs5();
  var import_shared210 = require_cjs2();
  var import_animated22 = require_cjs3();
  var isCustomPropRE2 = /^--/;
  function dangerousStyleValue2(name, value) {
    if (value == null || typeof value === "boolean" || value === "")
      return "";
    if (typeof value === "number" && value !== 0 && !isCustomPropRE2.test(name) && !(isUnitlessNumber2.hasOwnProperty(name) && isUnitlessNumber2[name]))
      return value + "px";
    return ("" + value).trim();
  }
  var attributeCache2 = {};
  function applyAnimatedValues2(instance, props) {
    if (!instance.nodeType || !instance.setAttribute) {
      return false;
    }
    const isFilterElement = instance.nodeName === "filter" || instance.parentNode && instance.parentNode.nodeName === "filter";
    const {
      className,
      style,
      children,
      scrollTop,
      scrollLeft,
      viewBox,
      ...attributes
    } = props;
    const values = Object.values(attributes);
    const names = Object.keys(attributes).map((name) => isFilterElement || instance.hasAttribute(name) ? name : attributeCache2[name] || (attributeCache2[name] = name.replace(/([A-Z])/g, (n) => "-" + n.toLowerCase())));
    if (children !== undefined) {
      instance.textContent = children;
    }
    for (const name in style) {
      if (style.hasOwnProperty(name)) {
        const value = dangerousStyleValue2(name, style[name]);
        if (isCustomPropRE2.test(name)) {
          instance.style.setProperty(name, value);
        } else {
          instance.style[name] = value;
        }
      }
    }
    names.forEach((name, i) => {
      instance.setAttribute(name, values[i]);
    });
    if (className !== undefined) {
      instance.className = className;
    }
    if (scrollTop !== undefined) {
      instance.scrollTop = scrollTop;
    }
    if (scrollLeft !== undefined) {
      instance.scrollLeft = scrollLeft;
    }
    if (viewBox !== undefined) {
      instance.setAttribute("viewBox", viewBox);
    }
  }
  var isUnitlessNumber2 = {
    animationIterationCount: true,
    borderImageOutset: true,
    borderImageSlice: true,
    borderImageWidth: true,
    boxFlex: true,
    boxFlexGroup: true,
    boxOrdinalGroup: true,
    columnCount: true,
    columns: true,
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    flexOrder: true,
    gridRow: true,
    gridRowEnd: true,
    gridRowSpan: true,
    gridRowStart: true,
    gridColumn: true,
    gridColumnEnd: true,
    gridColumnSpan: true,
    gridColumnStart: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    tabSize: true,
    widows: true,
    zIndex: true,
    zoom: true,
    fillOpacity: true,
    floodOpacity: true,
    stopOpacity: true,
    strokeDasharray: true,
    strokeDashoffset: true,
    strokeMiterlimit: true,
    strokeOpacity: true,
    strokeWidth: true
  };
  var prefixKey2 = (prefix2, key) => prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
  var prefixes3 = ["Webkit", "Ms", "Moz", "O"];
  isUnitlessNumber2 = Object.keys(isUnitlessNumber2).reduce((acc, prop) => {
    prefixes3.forEach((prefix2) => acc[prefixKey2(prefix2, prop)] = acc[prop]);
    return acc;
  }, isUnitlessNumber2);
  var import_animated6 = require_cjs3();
  var import_shared34 = require_cjs2();
  var domTransforms2 = /^(matrix|translate|scale|rotate|skew)/;
  var pxTransforms2 = /^(translate)/;
  var degTransforms2 = /^(rotate|skew)/;
  var addUnit2 = (value, unit2) => import_shared34.is.num(value) && value !== 0 ? value + unit2 : value;
  var isValueIdentity2 = (value, id) => import_shared34.is.arr(value) ? value.every((v) => isValueIdentity2(v, id)) : import_shared34.is.num(value) ? value === id : parseFloat(value) === id;
  var AnimatedStyle2 = class extends import_animated6.AnimatedObject {
    constructor({ x, y, z, ...style }) {
      const inputs = [];
      const transforms = [];
      if (x || y || z) {
        inputs.push([x || 0, y || 0, z || 0]);
        transforms.push((xyz) => [
          `translate3d(${xyz.map((v) => addUnit2(v, "px")).join(",")})`,
          isValueIdentity2(xyz, 0)
        ]);
      }
      (0, import_shared34.eachProp)(style, (value, key) => {
        if (key === "transform") {
          inputs.push([value || ""]);
          transforms.push((transform) => [transform, transform === ""]);
        } else if (domTransforms2.test(key)) {
          delete style[key];
          if (import_shared34.is.und(value))
            return;
          const unit2 = pxTransforms2.test(key) ? "px" : degTransforms2.test(key) ? "deg" : "";
          inputs.push((0, import_shared34.toArray)(value));
          transforms.push(key === "rotate3d" ? ([x2, y2, z2, deg]) => [
            `rotate3d(${x2},${y2},${z2},${addUnit2(deg, unit2)})`,
            isValueIdentity2(deg, 0)
          ] : (input) => [
            `${key}(${input.map((v) => addUnit2(v, unit2)).join(",")})`,
            isValueIdentity2(input, key.startsWith("scale") ? 1 : 0)
          ]);
        }
      });
      if (inputs.length) {
        style.transform = new FluidTransform2(inputs, transforms);
      }
      super(style);
    }
  };
  var FluidTransform2 = class extends import_shared34.FluidValue {
    constructor(inputs, transforms) {
      super();
      this.inputs = inputs;
      this.transforms = transforms;
      this._value = null;
    }
    get() {
      return this._value || (this._value = this._get());
    }
    _get() {
      let transform = "";
      let identity2 = true;
      (0, import_shared34.each)(this.inputs, (input, i) => {
        const arg1 = (0, import_shared34.getFluidValue)(input[0]);
        const [t, id] = this.transforms[i](import_shared34.is.arr(arg1) ? arg1 : input.map(import_shared34.getFluidValue));
        transform += " " + t;
        identity2 = identity2 && id;
      });
      return identity2 ? "none" : transform;
    }
    observerAdded(count) {
      if (count == 1)
        (0, import_shared34.each)(this.inputs, (input) => (0, import_shared34.each)(input, (value) => (0, import_shared34.hasFluidValue)(value) && (0, import_shared34.addFluidObserver)(value, this)));
    }
    observerRemoved(count) {
      if (count == 0)
        (0, import_shared34.each)(this.inputs, (input) => (0, import_shared34.each)(input, (value) => (0, import_shared34.hasFluidValue)(value) && (0, import_shared34.removeFluidObserver)(value, this)));
    }
    eventObserved(event) {
      if (event.type == "change") {
        this._value = null;
      }
      (0, import_shared34.callFluidObservers)(this, event);
    }
  };
  var primitives2 = [
    "a",
    "abbr",
    "address",
    "area",
    "article",
    "aside",
    "audio",
    "b",
    "base",
    "bdi",
    "bdo",
    "big",
    "blockquote",
    "body",
    "br",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "col",
    "colgroup",
    "data",
    "datalist",
    "dd",
    "del",
    "details",
    "dfn",
    "dialog",
    "div",
    "dl",
    "dt",
    "em",
    "embed",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hgroup",
    "hr",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "keygen",
    "label",
    "legend",
    "li",
    "link",
    "main",
    "map",
    "mark",
    "menu",
    "menuitem",
    "meta",
    "meter",
    "nav",
    "noscript",
    "object",
    "ol",
    "optgroup",
    "option",
    "output",
    "p",
    "param",
    "picture",
    "pre",
    "progress",
    "q",
    "rp",
    "rt",
    "ruby",
    "s",
    "samp",
    "script",
    "section",
    "select",
    "small",
    "source",
    "span",
    "strong",
    "style",
    "sub",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "title",
    "tr",
    "track",
    "u",
    "ul",
    "var",
    "video",
    "wbr",
    "circle",
    "clipPath",
    "defs",
    "ellipse",
    "foreignObject",
    "g",
    "image",
    "line",
    "linearGradient",
    "mask",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "radialGradient",
    "rect",
    "stop",
    "svg",
    "text",
    "tspan"
  ];
  __reExport(src_exports, require_cjs5(), module.exports);
  import_core2.Globals.assign({
    batchedUpdates: import_react_dom2.unstable_batchedUpdates,
    createStringInterpolator: import_shared210.createStringInterpolator,
    colors: import_shared210.colors
  });
  var host2 = (0, import_animated22.createHost)(primitives2, {
    applyAnimatedValues: applyAnimatedValues2,
    createAnimatedStyle: (style) => new AnimatedStyle2(style),
    getComponentProps: ({ scrollTop, scrollLeft, ...props }) => props
  });
  var animated2 = host2.animated;
});

// node_modules/@react-spring/web/dist/cjs/index.js
var require_cjs6 = __commonJS((exports, module) => {
  if (false) {
  } else {
    module.exports = require_react_spring_web_development();
  }
});

// node_modules/@visx/react-spring/lib/spring-configs/useLineTransitionConfig.js
var require_useLineTransitionConfig = __commonJS((exports) => {
  var _react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = useLineTransitionConfig;
  var _scale = require_lib2();
  function animatedValue(animationTrajectory, positionOnScale, scaleMin, scaleMax, scaleHalfwayPoint) {
    var _ref;
    switch (animationTrajectory) {
      case "center":
        return scaleHalfwayPoint;
      case "min":
        return scaleMin != null ? scaleMin : 0;
      case "max":
        return scaleMax != null ? scaleMax : 0;
      case "outside":
      default:
        return (_ref = (positionOnScale != null ? positionOnScale : 0) < scaleHalfwayPoint ? scaleMin : scaleMax) != null ? _ref : 0;
    }
  }
  function enterUpdate(_ref2) {
    var { from, to: to2 } = _ref2;
    return {
      fromX: from.x,
      toX: to2.x,
      fromY: from.y,
      toY: to2.y,
      opacity: 1
    };
  }
  function useLineTransitionConfig(_ref3) {
    var { scale, animateXOrY, animationTrajectory: _ref3$animationTrajec } = _ref3, initAnimationTrajectory = _ref3$animationTrajec === undefined ? "outside" : _ref3$animationTrajec;
    var shouldAnimateX = animateXOrY === "x";
    return (0, _react.useMemo)(function() {
      var _scale$range$map = scale.range().map(_scale.coerceNumber), a = _scale$range$map[0], b = _scale$range$map[1];
      var isDescending = b != null && a != null && b < a;
      var _ref4 = isDescending ? [b, a] : [a, b], scaleMin = _ref4[0], scaleMax = _ref4[1];
      var scaleLength = b != null && a != null ? Math.abs(b - a) : 0;
      var scaleHalfwayPoint = (scaleMin != null ? scaleMin : 0) + scaleLength / 2;
      var animationTrajectory = initAnimationTrajectory;
      if (!shouldAnimateX && initAnimationTrajectory === "min")
        animationTrajectory = "max";
      if (!shouldAnimateX && initAnimationTrajectory === "max")
        animationTrajectory = "min";
      var fromLeave = function fromLeave(_ref5) {
        var { from, to: to2 } = _ref5;
        return {
          fromX: shouldAnimateX ? animatedValue(animationTrajectory, from.x, scaleMin, scaleMax, scaleHalfwayPoint) : from.x,
          toX: shouldAnimateX ? animatedValue(animationTrajectory, from.x, scaleMin, scaleMax, scaleHalfwayPoint) : to2.x,
          fromY: shouldAnimateX ? from.y : animatedValue(animationTrajectory, from.y, scaleMin, scaleMax, scaleHalfwayPoint),
          toY: shouldAnimateX ? to2.y : animatedValue(animationTrajectory, from.y, scaleMin, scaleMax, scaleHalfwayPoint),
          opacity: 0
        };
      };
      return {
        from: fromLeave,
        leave: fromLeave,
        enter: enterUpdate,
        update: enterUpdate
      };
    }, [scale, shouldAnimateX, initAnimationTrajectory]);
  }
});

// node_modules/@visx/react-spring/lib/axis/AnimatedTicks.js
var require_AnimatedTicks = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = AnimatedTicks;
  var _react = _interopRequireDefault(react);
  var _web = require_cjs6();
  var _classnames = _interopRequireDefault(require_classnames());
  var _orientation = _interopRequireDefault(require_orientation());
  var _text = require_lib4();
  var _useLineTransitionConfig = _interopRequireDefault(require_useLineTransitionConfig());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function AnimatedTicks(_ref) {
    var { hideTicks, horizontal, orientation, scale, tickClassName, tickComponent, tickLabelProps: allTickLabelProps, tickStroke: _ref$tickStroke } = _ref, tickStroke = _ref$tickStroke === undefined ? "#222" : _ref$tickStroke, tickTransform = _ref.tickTransform, ticks2 = _ref.ticks, tickLineProps = _ref.tickLineProps, animationTrajectory = _ref.animationTrajectory;
    var animatedTicks = (0, _web.useTransition)(ticks2, _extends({}, (0, _useLineTransitionConfig.default)({
      scale,
      animateXOrY: horizontal ? "x" : "y",
      animationTrajectory
    }), {
      keys: function keys(tick) {
        return "tick-" + tick.value + "-" + tick.index;
      }
    }));
    return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, animatedTicks(function(_ref2, item, _ref3, index) {
      var _ref4, _allTickLabelProps$in;
      var { fromX, toX, fromY, toY, opacity } = _ref2;
      var key = _ref3.key;
      var tickLabelProps = (_ref4 = (_allTickLabelProps$in = allTickLabelProps[index]) != null ? _allTickLabelProps$in : allTickLabelProps[0]) != null ? _ref4 : {};
      return item == null || key == null ? null : /* @__PURE__ */ _react.default.createElement(_web.animated.g, {
        key,
        className: (0, _classnames.default)("visx-axis-tick", tickClassName),
        transform: tickTransform
      }, !hideTicks && /* @__PURE__ */ _react.default.createElement(_web.animated.line, _extends({
        x1: fromX,
        x2: toX,
        y1: fromY,
        y2: toY,
        stroke: tickStroke,
        strokeLinecap: "square",
        strokeOpacity: opacity
      }, tickLineProps)), /* @__PURE__ */ _react.default.createElement(_web.animated.g, {
        key: index,
        transform: (0, _web.to)([toX, toY], function(interpolatedX, interpolatedY) {
          var _tickLabelProps$fontS;
          return "translate(" + interpolatedX + "," + (interpolatedY + (orientation === _orientation.default.bottom && typeof tickLabelProps.fontSize === "number" ? (_tickLabelProps$fontS = tickLabelProps.fontSize) != null ? _tickLabelProps$fontS : 10 : 0)) + ")";
        }),
        opacity
      }, tickComponent ? tickComponent(_extends({}, tickLabelProps, {
        x: toX,
        y: toY,
        formattedValue: item == null ? undefined : item.formattedValue
      })) : /* @__PURE__ */ _react.default.createElement(_text.Text, tickLabelProps, item == null ? undefined : item.formattedValue)));
    }));
  }
});

// node_modules/@visx/react-spring/lib/axis/AnimatedAxis.js
var require_AnimatedAxis = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = AnimatedAxis;
  var _propTypes = _interopRequireDefault(require_prop_types());
  var _react = _interopRequireWildcard(react);
  var _Axis = _interopRequireDefault(require_Axis());
  var _AnimatedTicks = _interopRequireDefault(require_AnimatedTicks());
  var _excluded = ["animationTrajectory", "tickComponent"];
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function AnimatedAxis(_ref) {
    var { animationTrajectory, tickComponent } = _ref, axisProps = _objectWithoutPropertiesLoose(_ref, _excluded);
    var ticksComponent = (0, _react.useMemo)(function() {
      return function TicksComponent(ticks2) {
        return /* @__PURE__ */ _react.default.createElement(_AnimatedTicks.default, _extends({}, ticks2, {
          tickComponent,
          animationTrajectory
        }));
      };
    }, [animationTrajectory, tickComponent]);
    return /* @__PURE__ */ _react.default.createElement(_Axis.default, _extends({}, axisProps, {
      ticksComponent
    }));
  }
});

// node_modules/@visx/grid/lib/utils/getScaleBandwidth.js
var require_getScaleBandwidth = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = getScaleBandwidth2;
  function getScaleBandwidth2(scale) {
    return "bandwidth" in scale ? scale.bandwidth() : 0;
  }
});

// node_modules/@visx/grid/lib/grids/GridRows.js
var require_GridRows = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = GridRows;
  var _propTypes = _interopRequireDefault(require_prop_types());
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _Line = _interopRequireDefault(require_Line());
  var _group = require_lib();
  var _point = require_lib5();
  var _scale = require_lib2();
  var _getScaleBandwidth = _interopRequireDefault(require_getScaleBandwidth());
  var _excluded2 = ["top", "left", "scale", "width", "stroke", "strokeWidth", "strokeDasharray", "className", "children", "numTicks", "lineStyle", "offset", "tickValues"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends3() {
    _extends3 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends3.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose2(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function GridRows(_ref) {
    var _ref$top = _ref.top, top = _ref$top === undefined ? 0 : _ref$top, _ref$left = _ref.left, left = _ref$left === undefined ? 0 : _ref$left, scale = _ref.scale, width = _ref.width, _ref$stroke = _ref.stroke, stroke = _ref$stroke === undefined ? "#eaf0f6" : _ref$stroke, _ref$strokeWidth = _ref.strokeWidth, strokeWidth = _ref$strokeWidth === undefined ? 1 : _ref$strokeWidth, strokeDasharray = _ref.strokeDasharray, className = _ref.className, children = _ref.children, _ref$numTicks = _ref.numTicks, numTicks = _ref$numTicks === undefined ? 10 : _ref$numTicks, lineStyle = _ref.lineStyle, offset = _ref.offset, tickValues = _ref.tickValues, restProps = _objectWithoutPropertiesLoose2(_ref, _excluded2);
    var ticks2 = tickValues != null ? tickValues : (0, _scale.getTicks)(scale, numTicks);
    var scaleOffset = (offset != null ? offset : 0) + (0, _getScaleBandwidth.default)(scale) / 2;
    var tickLines = ticks2.map(function(d, index) {
      var _coerceNumber;
      var y = ((_coerceNumber = (0, _scale.coerceNumber)(scale(d))) != null ? _coerceNumber : 0) + scaleOffset;
      return {
        index,
        from: new _point.Point({
          x: 0,
          y
        }),
        to: new _point.Point({
          x: width,
          y
        })
      };
    });
    return /* @__PURE__ */ _react.default.createElement(_group.Group, {
      className: (0, _classnames.default)("visx-rows", className),
      top,
      left
    }, children ? children({
      lines: tickLines
    }) : tickLines.map(function(_ref2) {
      var { from, to: to2, index } = _ref2;
      return /* @__PURE__ */ _react.default.createElement(_Line.default, _extends3({
        key: "row-line-" + index,
        from,
        to: to2,
        stroke,
        strokeWidth,
        strokeDasharray,
        style: lineStyle
      }, restProps));
    }));
  }
  GridRows.propTypes = {
    tickValues: _propTypes.default.array,
    width: _propTypes.default.number.isRequired
  };
});

// node_modules/@visx/react-spring/lib/grid/AnimatedGridLines.js
var require_AnimatedGridLines = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = AnimatedGridLines;
  var _propTypes = _interopRequireDefault(require_prop_types());
  var _react = _interopRequireDefault(react);
  var _web = require_cjs6();
  var _useLineTransitionConfig = _interopRequireDefault(require_useLineTransitionConfig());
  var _excluded2 = ["scale", "lines", "animationTrajectory", "animateXOrY", "lineKey", "lineStyle"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends3() {
    _extends3 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends3.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose2(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function AnimatedGridLines(_ref) {
    var { scale, lines, animationTrajectory, animateXOrY, lineKey, lineStyle } = _ref, lineProps = _objectWithoutPropertiesLoose2(_ref, _excluded2);
    var animatedLines = (0, _web.useTransition)(lines, _extends3({}, (0, _useLineTransitionConfig.default)({
      scale,
      animateXOrY,
      animationTrajectory
    }), {
      key: lineKey
    }));
    return /* @__PURE__ */ _react.default.createElement(_react.default.Fragment, null, animatedLines(function(_ref2, _, _ref3) {
      var { fromX, toX, fromY, toY, opacity } = _ref2;
      var key = _ref3.key;
      return /* @__PURE__ */ _react.default.createElement(_web.animated.line, _extends3({
        key,
        x1: fromX,
        x2: toX,
        y1: fromY,
        y2: toY,
        strokeOpacity: opacity,
        style: lineStyle
      }, lineProps));
    }));
  }
  AnimatedGridLines.propTypes = {
    lineKey: _propTypes.default.func.isRequired
  };
});

// node_modules/@visx/react-spring/lib/grid/AnimatedGridRows.js
var require_AnimatedGridRows = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = AnimatedGridRows;
  var _react = _interopRequireDefault(react);
  var _GridRows = _interopRequireDefault(require_GridRows());
  var _AnimatedGridLines = _interopRequireDefault(require_AnimatedGridLines());
  var _excluded2 = ["scale", "width", "numTicks", "tickValues", "offset", "className", "animationTrajectory", "top", "left"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends3() {
    _extends3 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends3.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose2(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function AnimatedGridRows(_ref) {
    var { scale, width, numTicks, tickValues, offset, className, animationTrajectory, top, left } = _ref, lineProps = _objectWithoutPropertiesLoose2(_ref, _excluded2);
    return /* @__PURE__ */ _react.default.createElement(_GridRows.default, {
      scale,
      width,
      numTicks,
      tickValues,
      className,
      top,
      left,
      offset
    }, function(_ref2) {
      var lines = _ref2.lines;
      return /* @__PURE__ */ _react.default.createElement(_AnimatedGridLines.default, _extends3({
        scale,
        lines,
        animationTrajectory,
        animateXOrY: "y",
        lineKey: function lineKey(line) {
          var _line$from$y, _line$from;
          return "row-" + ((_line$from$y = line == null ? undefined : (_line$from = line.from) == null ? undefined : _line$from.y) != null ? _line$from$y : "") + "-" + line.index;
        }
      }, lineProps));
    });
  }
});

// node_modules/@visx/grid/lib/grids/GridColumns.js
var require_GridColumns = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = GridColumns;
  var _propTypes = _interopRequireDefault(require_prop_types());
  var _react = _interopRequireDefault(react);
  var _classnames = _interopRequireDefault(require_classnames());
  var _Line = _interopRequireDefault(require_Line());
  var _group = require_lib();
  var _point = require_lib5();
  var _scale = require_lib2();
  var _getScaleBandwidth = _interopRequireDefault(require_getScaleBandwidth());
  var _excluded2 = ["top", "left", "scale", "height", "stroke", "strokeWidth", "strokeDasharray", "className", "numTicks", "lineStyle", "offset", "tickValues", "children"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends3() {
    _extends3 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends3.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose2(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function GridColumns(_ref) {
    var _ref$top = _ref.top, top = _ref$top === undefined ? 0 : _ref$top, _ref$left = _ref.left, left = _ref$left === undefined ? 0 : _ref$left, scale = _ref.scale, height = _ref.height, _ref$stroke = _ref.stroke, stroke = _ref$stroke === undefined ? "#eaf0f6" : _ref$stroke, _ref$strokeWidth = _ref.strokeWidth, strokeWidth = _ref$strokeWidth === undefined ? 1 : _ref$strokeWidth, strokeDasharray = _ref.strokeDasharray, className = _ref.className, _ref$numTicks = _ref.numTicks, numTicks = _ref$numTicks === undefined ? 10 : _ref$numTicks, lineStyle = _ref.lineStyle, offset = _ref.offset, tickValues = _ref.tickValues, children = _ref.children, restProps = _objectWithoutPropertiesLoose2(_ref, _excluded2);
    var ticks2 = tickValues != null ? tickValues : (0, _scale.getTicks)(scale, numTicks);
    var scaleOffset = (offset != null ? offset : 0) + (0, _getScaleBandwidth.default)(scale) / 2;
    var tickLines = ticks2.map(function(d, index) {
      var _coerceNumber;
      var x = ((_coerceNumber = (0, _scale.coerceNumber)(scale(d))) != null ? _coerceNumber : 0) + scaleOffset;
      return {
        index,
        from: new _point.Point({
          x,
          y: 0
        }),
        to: new _point.Point({
          x,
          y: height
        })
      };
    });
    return /* @__PURE__ */ _react.default.createElement(_group.Group, {
      className: (0, _classnames.default)("visx-columns", className),
      top,
      left
    }, children ? children({
      lines: tickLines
    }) : tickLines.map(function(_ref2) {
      var { from, to: to2, index } = _ref2;
      return /* @__PURE__ */ _react.default.createElement(_Line.default, _extends3({
        key: "column-line-" + index,
        from,
        to: to2,
        stroke,
        strokeWidth,
        strokeDasharray,
        style: lineStyle
      }, restProps));
    }));
  }
  GridColumns.propTypes = {
    tickValues: _propTypes.default.array,
    height: _propTypes.default.number.isRequired
  };
});

// node_modules/@visx/react-spring/lib/grid/AnimatedGridColumns.js
var require_AnimatedGridColumns = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = AnimatedGridColumns;
  var _react = _interopRequireDefault(react);
  var _GridColumns = _interopRequireDefault(require_GridColumns());
  var _AnimatedGridLines = _interopRequireDefault(require_AnimatedGridLines());
  var _excluded2 = ["scale", "height", "numTicks", "tickValues", "offset", "className", "animationTrajectory", "top", "left"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends3() {
    _extends3 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends3.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose2(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function AnimatedGridColumns(_ref) {
    var { scale, height, numTicks, tickValues, offset, className, animationTrajectory, top, left } = _ref, lineProps = _objectWithoutPropertiesLoose2(_ref, _excluded2);
    return /* @__PURE__ */ _react.default.createElement(_GridColumns.default, {
      scale,
      height,
      numTicks,
      tickValues,
      className,
      offset,
      top,
      left
    }, function(_ref2) {
      var lines = _ref2.lines;
      return /* @__PURE__ */ _react.default.createElement(_AnimatedGridLines.default, _extends3({
        scale,
        lines,
        animationTrajectory,
        animateXOrY: "x",
        lineKey: function lineKey(line) {
          var _line$from$x, _line$from;
          return "column-" + ((_line$from$x = line == null ? undefined : (_line$from = line.from) == null ? undefined : _line$from.x) != null ? _line$from$x : "") + "-" + line.index;
        }
      }, lineProps));
    });
  }
});

// node_modules/lodash/now.js
var require_now = __commonJS((exports, module) => {
  var root = require__root();
  var now = function() {
    return root.Date.now();
  };
  module.exports = now;
});

// node_modules/lodash/_trimmedEndIndex.js
var require__trimmedEndIndex = __commonJS((exports, module) => {
  var reWhitespace = /\s/;
  function trimmedEndIndex(string) {
    var index = string.length;
    while (index-- && reWhitespace.test(string.charAt(index))) {
    }
    return index;
  }
  module.exports = trimmedEndIndex;
});

// node_modules/lodash/_baseTrim.js
var require__baseTrim = __commonJS((exports, module) => {
  var trimmedEndIndex = require__trimmedEndIndex();
  var reTrimStart = /^\s+/;
  function baseTrim(string) {
    return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
  }
  module.exports = baseTrim;
});

// node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS((exports, module) => {
  function isObjectLike(value) {
    return value != null && typeof value == "object";
  }
  module.exports = isObjectLike;
});

// node_modules/lodash/isSymbol.js
var require_isSymbol = __commonJS((exports, module) => {
  var baseGetTag = require__baseGetTag();
  var isObjectLike = require_isObjectLike();
  var symbolTag = "[object Symbol]";
  function isSymbol(value) {
    return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
  }
  module.exports = isSymbol;
});

// node_modules/lodash/toNumber.js
var require_toNumber = __commonJS((exports, module) => {
  var baseTrim = require__baseTrim();
  var isObject = require_isObject();
  var isSymbol = require_isSymbol();
  var NAN = 0 / 0;
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  var reIsBinary = /^0b[01]+$/i;
  var reIsOctal = /^0o[0-7]+$/i;
  var freeParseInt = parseInt;
  function toNumber(value) {
    if (typeof value == "number") {
      return value;
    }
    if (isSymbol(value)) {
      return NAN;
    }
    if (isObject(value)) {
      var other = typeof value.valueOf == "function" ? value.valueOf() : value;
      value = isObject(other) ? other + "" : other;
    }
    if (typeof value != "string") {
      return value === 0 ? value : +value;
    }
    value = baseTrim(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }
  module.exports = toNumber;
});

// node_modules/lodash/debounce.js
var require_debounce = __commonJS((exports, module) => {
  var isObject = require_isObject();
  var now = require_now();
  var toNumber = require_toNumber();
  var FUNC_ERROR_TEXT = "Expected a function";
  var nativeMax = Math.max;
  var nativeMin = Math.min;
  function debounce(func, wait, options) {
    var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
    if (typeof func != "function") {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    wait = toNumber(wait) || 0;
    if (isObject(options)) {
      leading = !!options.leading;
      maxing = "maxWait" in options;
      maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
      trailing = "trailing" in options ? !!options.trailing : trailing;
    }
    function invokeFunc(time2) {
      var args = lastArgs, thisArg = lastThis;
      lastArgs = lastThis = undefined;
      lastInvokeTime = time2;
      result = func.apply(thisArg, args);
      return result;
    }
    function leadingEdge(time2) {
      lastInvokeTime = time2;
      timerId = setTimeout(timerExpired, wait);
      return leading ? invokeFunc(time2) : result;
    }
    function remainingWait(time2) {
      var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
      return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
    }
    function shouldInvoke(time2) {
      var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime;
      return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }
    function timerExpired() {
      var time2 = now();
      if (shouldInvoke(time2)) {
        return trailingEdge(time2);
      }
      timerId = setTimeout(timerExpired, remainingWait(time2));
    }
    function trailingEdge(time2) {
      timerId = undefined;
      if (trailing && lastArgs) {
        return invokeFunc(time2);
      }
      lastArgs = lastThis = undefined;
      return result;
    }
    function cancel() {
      if (timerId !== undefined) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = undefined;
    }
    function flush2() {
      return timerId === undefined ? result : trailingEdge(now());
    }
    function debounced() {
      var time2 = now(), isInvoking = shouldInvoke(time2);
      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time2;
      if (isInvoking) {
        if (timerId === undefined) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          clearTimeout(timerId);
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === undefined) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush2;
    return debounced;
  }
  module.exports = debounce;
});

// node_modules/@visx/responsive/lib/hooks/useParentSize.js
var require_useParentSize = __commonJS((exports) => {
  var _react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = useParentSize;
  var _debounce = _interopRequireDefault(require_debounce());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends11() {
    _extends11 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends11.apply(this, arguments);
  }
  var defaultIgnoreDimensions = [];
  var defaultInitialSize = {
    width: 0,
    height: 0,
    top: 0,
    left: 0
  };
  function useParentSize(_temp) {
    var _ref = _temp === undefined ? {} : _temp, _ref$initialSize = _ref.initialSize, initialSize = _ref$initialSize === undefined ? defaultInitialSize : _ref$initialSize, _ref$debounceTime = _ref.debounceTime, debounceTime = _ref$debounceTime === undefined ? 300 : _ref$debounceTime, _ref$ignoreDimensions = _ref.ignoreDimensions, ignoreDimensions = _ref$ignoreDimensions === undefined ? defaultIgnoreDimensions : _ref$ignoreDimensions, _ref$enableDebounceLe = _ref.enableDebounceLeadingCall, enableDebounceLeadingCall = _ref$enableDebounceLe === undefined ? true : _ref$enableDebounceLe, resizeObserverPolyfill = _ref.resizeObserverPolyfill;
    var parentRef = (0, _react.useRef)(null);
    var animationFrameID = (0, _react.useRef)(0);
    var _useState = (0, _react.useState)(_extends11({}, defaultInitialSize, initialSize)), state = _useState[0], setState = _useState[1];
    var resize = (0, _react.useMemo)(function() {
      var normalized = Array.isArray(ignoreDimensions) ? ignoreDimensions : [ignoreDimensions];
      return (0, _debounce.default)(function(incoming) {
        setState(function(existing) {
          var stateKeys = Object.keys(existing);
          var keysWithChanges = stateKeys.filter(function(key) {
            return existing[key] !== incoming[key];
          });
          var shouldBail = keysWithChanges.every(function(key) {
            return normalized.includes(key);
          });
          return shouldBail ? existing : incoming;
        });
      }, debounceTime, {
        leading: enableDebounceLeadingCall
      });
    }, [debounceTime, enableDebounceLeadingCall, ignoreDimensions]);
    (0, _react.useEffect)(function() {
      var LocalResizeObserver = resizeObserverPolyfill || window.ResizeObserver;
      var observer = new LocalResizeObserver(function(entries) {
        entries.forEach(function(entry) {
          var _entry$contentRect;
          var _ref2 = (_entry$contentRect = entry == null ? undefined : entry.contentRect) != null ? _entry$contentRect : {}, left = _ref2.left, top = _ref2.top, width = _ref2.width, height = _ref2.height;
          animationFrameID.current = window.requestAnimationFrame(function() {
            resize({
              width,
              height,
              top,
              left
            });
          });
        });
      });
      if (parentRef.current)
        observer.observe(parentRef.current);
      return function() {
        window.cancelAnimationFrame(animationFrameID.current);
        observer.disconnect();
        resize.cancel();
      };
    }, [resize, resizeObserverPolyfill]);
    return _extends11({
      parentRef,
      resize
    }, state);
  }
});

// node_modules/@visx/responsive/lib/components/ParentSize.js
var require_ParentSize = __commonJS((exports) => {
  var react = __toESM(require_react(), 1);
  exports.__esModule = true;
  exports.default = ParentSize;
  var _propTypes = _interopRequireDefault(require_prop_types());
  var _react = _interopRequireDefault(react);
  var _useParentSize2 = _interopRequireDefault(require_useParentSize());
  var _excluded9 = ["className", "children", "debounceTime", "ignoreDimensions", "initialSize", "parentSizeStyles", "enableDebounceLeadingCall", "resizeObserverPolyfill"];
  var _excluded24 = ["parentRef", "resize"];
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _extends11() {
    _extends11 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends11.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose9(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var defaultParentSizeStyles = {
    width: "100%",
    height: "100%"
  };
  function ParentSize(_ref) {
    var { className, children, debounceTime, ignoreDimensions, initialSize, parentSizeStyles: _ref$parentSizeStyles } = _ref, parentSizeStyles = _ref$parentSizeStyles === undefined ? defaultParentSizeStyles : _ref$parentSizeStyles, _ref$enableDebounceLe = _ref.enableDebounceLeadingCall, enableDebounceLeadingCall = _ref$enableDebounceLe === undefined ? true : _ref$enableDebounceLe, resizeObserverPolyfill = _ref.resizeObserverPolyfill, restProps = _objectWithoutPropertiesLoose9(_ref, _excluded9);
    var _useParentSize = (0, _useParentSize2.default)({
      initialSize,
      debounceTime,
      ignoreDimensions,
      enableDebounceLeadingCall,
      resizeObserverPolyfill
    }), parentRef = _useParentSize.parentRef, resize = _useParentSize.resize, dimensions = _objectWithoutPropertiesLoose9(_useParentSize, _excluded24);
    return /* @__PURE__ */ _react.default.createElement("div", _extends11({
      style: parentSizeStyles,
      ref: parentRef,
      className
    }, restProps), children(_extends11({}, dimensions, {
      ref: parentRef.current,
      resize
    })));
  }
  ParentSize.propTypes = {
    className: _propTypes.default.string,
    children: _propTypes.default.func.isRequired
  };
});

// node_modules/react/cjs/react-jsx-dev-runtime.development.js
var require_react_jsx_dev_runtime_development = __commonJS((exports) => {
  var React24 = __toESM(require_react(), 1);
  (function() {
    function getComponentNameFromType(type) {
      if (type == null)
        return null;
      if (typeof type === "function")
        return type.$$typeof === REACT_CLIENT_REFERENCE$2 ? null : type.displayName || type.name || null;
      if (typeof type === "string")
        return type;
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PORTAL_TYPE:
          return "Portal";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
      }
      if (typeof type === "object")
        switch (typeof type.tag === "number" && console.error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            return (type.displayName || "Context") + ".Provider";
          case REACT_CONSUMER_TYPE:
            return (type._context.displayName || "Context") + ".Consumer";
          case REACT_FORWARD_REF_TYPE:
            var innerType = type.render;
            type = type.displayName;
            type || (type = innerType.displayName || innerType.name || "", type = type !== "" ? "ForwardRef(" + type + ")" : "ForwardRef");
            return type;
          case REACT_MEMO_TYPE:
            return innerType = type.displayName || null, innerType !== null ? innerType : getComponentNameFromType(type.type) || "Memo";
          case REACT_LAZY_TYPE:
            innerType = type._payload;
            type = type._init;
            try {
              return getComponentNameFromType(type(innerType));
            } catch (x) {
            }
        }
      return null;
    }
    function testStringCoercion(value) {
      return "" + value;
    }
    function checkKeyStringCoercion(value) {
      try {
        testStringCoercion(value);
        var JSCompiler_inline_result = false;
      } catch (e) {
        JSCompiler_inline_result = true;
      }
      if (JSCompiler_inline_result) {
        JSCompiler_inline_result = console;
        var JSCompiler_temp_const = JSCompiler_inline_result.error;
        var JSCompiler_inline_result$jscomp$0 = typeof Symbol === "function" && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        JSCompiler_temp_const.call(JSCompiler_inline_result, "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.", JSCompiler_inline_result$jscomp$0);
        return testStringCoercion(value);
      }
    }
    function disabledLog() {
    }
    function disableLogs() {
      if (disabledDepth === 0) {
        prevLog = console.log;
        prevInfo = console.info;
        prevWarn = console.warn;
        prevError = console.error;
        prevGroup = console.group;
        prevGroupCollapsed = console.groupCollapsed;
        prevGroupEnd = console.groupEnd;
        var props = {
          configurable: true,
          enumerable: true,
          value: disabledLog,
          writable: true
        };
        Object.defineProperties(console, {
          info: props,
          log: props,
          warn: props,
          error: props,
          group: props,
          groupCollapsed: props,
          groupEnd: props
        });
      }
      disabledDepth++;
    }
    function reenableLogs() {
      disabledDepth--;
      if (disabledDepth === 0) {
        var props = { configurable: true, enumerable: true, writable: true };
        Object.defineProperties(console, {
          log: assign2({}, props, { value: prevLog }),
          info: assign2({}, props, { value: prevInfo }),
          warn: assign2({}, props, { value: prevWarn }),
          error: assign2({}, props, { value: prevError }),
          group: assign2({}, props, { value: prevGroup }),
          groupCollapsed: assign2({}, props, { value: prevGroupCollapsed }),
          groupEnd: assign2({}, props, { value: prevGroupEnd })
        });
      }
      0 > disabledDepth && console.error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    function describeBuiltInComponentFrame(name) {
      if (prefix2 === undefined)
        try {
          throw Error();
        } catch (x) {
          var match = x.stack.trim().match(/\n( *(at )?)/);
          prefix2 = match && match[1] || "";
          suffix = -1 < x.stack.indexOf(`
    at`) ? " (<anonymous>)" : -1 < x.stack.indexOf("@") ? "@unknown:0:0" : "";
        }
      return `
` + prefix2 + name + suffix;
    }
    function describeNativeComponentFrame(fn, construct) {
      if (!fn || reentry)
        return "";
      var frame = componentFrameCache.get(fn);
      if (frame !== undefined)
        return frame;
      reentry = true;
      frame = Error.prepareStackTrace;
      Error.prepareStackTrace = undefined;
      var previousDispatcher = null;
      previousDispatcher = ReactSharedInternals.H;
      ReactSharedInternals.H = null;
      disableLogs();
      try {
        var RunInRootFrame = {
          DetermineComponentFrameRoot: function() {
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    var control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x$0) {
                    control = x$0;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x$1) {
                  control = x$1;
                }
                (Fake = fn()) && typeof Fake.catch === "function" && Fake.catch(function() {
                });
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string")
                return [sample.stack, control.stack];
            }
            return [null, null];
          }
        };
        RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
        var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, "name");
        namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, "name", { value: "DetermineComponentFrameRoot" });
        var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
        if (sampleStack && controlStack) {
          var sampleLines = sampleStack.split(`
`), controlLines = controlStack.split(`
`);
          for (_RunInRootFrame$Deter = namePropDescriptor = 0;namePropDescriptor < sampleLines.length && !sampleLines[namePropDescriptor].includes("DetermineComponentFrameRoot"); )
            namePropDescriptor++;
          for (;_RunInRootFrame$Deter < controlLines.length && !controlLines[_RunInRootFrame$Deter].includes("DetermineComponentFrameRoot"); )
            _RunInRootFrame$Deter++;
          if (namePropDescriptor === sampleLines.length || _RunInRootFrame$Deter === controlLines.length)
            for (namePropDescriptor = sampleLines.length - 1, _RunInRootFrame$Deter = controlLines.length - 1;1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter && sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]; )
              _RunInRootFrame$Deter--;
          for (;1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter; namePropDescriptor--, _RunInRootFrame$Deter--)
            if (sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]) {
              if (namePropDescriptor !== 1 || _RunInRootFrame$Deter !== 1) {
                do
                  if (namePropDescriptor--, _RunInRootFrame$Deter--, 0 > _RunInRootFrame$Deter || sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]) {
                    var _frame = `
` + sampleLines[namePropDescriptor].replace(" at new ", " at ");
                    fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName));
                    typeof fn === "function" && componentFrameCache.set(fn, _frame);
                    return _frame;
                  }
                while (1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter);
              }
              break;
            }
        }
      } finally {
        reentry = false, ReactSharedInternals.H = previousDispatcher, reenableLogs(), Error.prepareStackTrace = frame;
      }
      sampleLines = (sampleLines = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(sampleLines) : "";
      typeof fn === "function" && componentFrameCache.set(fn, sampleLines);
      return sampleLines;
    }
    function describeUnknownElementTypeFrameInDEV(type) {
      if (type == null)
        return "";
      if (typeof type === "function") {
        var prototype = type.prototype;
        return describeNativeComponentFrame(type, !(!prototype || !prototype.isReactComponent));
      }
      if (typeof type === "string")
        return describeBuiltInComponentFrame(type);
      switch (type) {
        case REACT_SUSPENSE_TYPE:
          return describeBuiltInComponentFrame("Suspense");
        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame("SuspenseList");
      }
      if (typeof type === "object")
        switch (type.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return type = describeNativeComponentFrame(type.render, false), type;
          case REACT_MEMO_TYPE:
            return describeUnknownElementTypeFrameInDEV(type.type);
          case REACT_LAZY_TYPE:
            prototype = type._payload;
            type = type._init;
            try {
              return describeUnknownElementTypeFrameInDEV(type(prototype));
            } catch (x) {
            }
        }
      return "";
    }
    function getOwner() {
      var dispatcher = ReactSharedInternals.A;
      return dispatcher === null ? null : dispatcher.getOwner();
    }
    function hasValidKey(config2) {
      if (hasOwnProperty.call(config2, "key")) {
        var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
        if (getter && getter.isReactWarning)
          return false;
      }
      return config2.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
      function warnAboutAccessingKey() {
        specialPropKeyWarningShown || (specialPropKeyWarningShown = true, console.error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)", displayName));
      }
      warnAboutAccessingKey.isReactWarning = true;
      Object.defineProperty(props, "key", {
        get: warnAboutAccessingKey,
        configurable: true
      });
    }
    function elementRefGetterWithDeprecationWarning() {
      var componentName = getComponentNameFromType(this.type);
      didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = true, console.error("Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."));
      componentName = this.props.ref;
      return componentName !== undefined ? componentName : null;
    }
    function ReactElement(type, key, self2, source, owner, props) {
      self2 = props.ref;
      type = {
        $$typeof: REACT_ELEMENT_TYPE,
        type,
        key,
        props,
        _owner: owner
      };
      (self2 !== undefined ? self2 : null) !== null ? Object.defineProperty(type, "ref", {
        enumerable: false,
        get: elementRefGetterWithDeprecationWarning
      }) : Object.defineProperty(type, "ref", { enumerable: false, value: null });
      type._store = {};
      Object.defineProperty(type._store, "validated", {
        configurable: false,
        enumerable: false,
        writable: true,
        value: 0
      });
      Object.defineProperty(type, "_debugInfo", {
        configurable: false,
        enumerable: false,
        writable: true,
        value: null
      });
      Object.freeze && (Object.freeze(type.props), Object.freeze(type));
      return type;
    }
    function jsxDEVImpl(type, config2, maybeKey, isStaticChildren, source, self2) {
      if (typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_OFFSCREEN_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_CONSUMER_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined)) {
        var children = config2.children;
        if (children !== undefined)
          if (isStaticChildren)
            if (isArrayImpl(children)) {
              for (isStaticChildren = 0;isStaticChildren < children.length; isStaticChildren++)
                validateChildKeys(children[isStaticChildren], type);
              Object.freeze && Object.freeze(children);
            } else
              console.error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
          else
            validateChildKeys(children, type);
      } else {
        children = "";
        if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0)
          children += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
        type === null ? isStaticChildren = "null" : isArrayImpl(type) ? isStaticChildren = "array" : type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE ? (isStaticChildren = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", children = " Did you accidentally export a JSX literal instead of a component?") : isStaticChildren = typeof type;
        console.error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", isStaticChildren, children);
      }
      if (hasOwnProperty.call(config2, "key")) {
        children = getComponentNameFromType(type);
        var keys = Object.keys(config2).filter(function(k2) {
          return k2 !== "key";
        });
        isStaticChildren = 0 < keys.length ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
        didWarnAboutKeySpread[children + isStaticChildren] || (keys = 0 < keys.length ? "{" + keys.join(": ..., ") + ": ...}" : "{}", console.error(`A props object containing a "key" prop is being spread into JSX:
  let props = %s;
  <%s {...props} />
React keys must be passed directly to JSX without using spread:
  let props = %s;
  <%s key={someKey} {...props} />`, isStaticChildren, children, keys, children), didWarnAboutKeySpread[children + isStaticChildren] = true);
      }
      children = null;
      maybeKey !== undefined && (checkKeyStringCoercion(maybeKey), children = "" + maybeKey);
      hasValidKey(config2) && (checkKeyStringCoercion(config2.key), children = "" + config2.key);
      if ("key" in config2) {
        maybeKey = {};
        for (var propName in config2)
          propName !== "key" && (maybeKey[propName] = config2[propName]);
      } else
        maybeKey = config2;
      children && defineKeyPropWarningGetter(maybeKey, typeof type === "function" ? type.displayName || type.name || "Unknown" : type);
      return ReactElement(type, children, self2, source, getOwner(), maybeKey);
    }
    function validateChildKeys(node, parentType) {
      if (typeof node === "object" && node && node.$$typeof !== REACT_CLIENT_REFERENCE) {
        if (isArrayImpl(node))
          for (var i = 0;i < node.length; i++) {
            var child = node[i];
            isValidElement(child) && validateExplicitKey(child, parentType);
          }
        else if (isValidElement(node))
          node._store && (node._store.validated = 1);
        else if (node === null || typeof node !== "object" ? i = null : (i = MAYBE_ITERATOR_SYMBOL && node[MAYBE_ITERATOR_SYMBOL] || node["@@iterator"], i = typeof i === "function" ? i : null), typeof i === "function" && i !== node.entries && (i = i.call(node), i !== node))
          for (;!(node = i.next()).done; )
            isValidElement(node.value) && validateExplicitKey(node.value, parentType);
      }
    }
    function isValidElement(object) {
      return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function validateExplicitKey(element, parentType) {
      if (element._store && !element._store.validated && element.key == null && (element._store.validated = 1, parentType = getCurrentComponentErrorInfo(parentType), !ownerHasKeyUseWarning[parentType])) {
        ownerHasKeyUseWarning[parentType] = true;
        var childOwner = "";
        element && element._owner != null && element._owner !== getOwner() && (childOwner = null, typeof element._owner.tag === "number" ? childOwner = getComponentNameFromType(element._owner.type) : typeof element._owner.name === "string" && (childOwner = element._owner.name), childOwner = " It was passed a child from " + childOwner + ".");
        var prevGetCurrentStack = ReactSharedInternals.getCurrentStack;
        ReactSharedInternals.getCurrentStack = function() {
          var stack = describeUnknownElementTypeFrameInDEV(element.type);
          prevGetCurrentStack && (stack += prevGetCurrentStack() || "");
          return stack;
        };
        console.error('Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.', parentType, childOwner);
        ReactSharedInternals.getCurrentStack = prevGetCurrentStack;
      }
    }
    function getCurrentComponentErrorInfo(parentType) {
      var info = "", owner = getOwner();
      owner && (owner = getComponentNameFromType(owner.type)) && (info = `

Check the render method of \`` + owner + "`.");
      info || (parentType = getComponentNameFromType(parentType)) && (info = `

Check the top-level render call using <` + parentType + ">.");
      return info;
    }
    var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    Symbol.for("react.provider");
    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, REACT_CLIENT_REFERENCE$2 = Symbol.for("react.client.reference"), ReactSharedInternals = React24.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, hasOwnProperty = Object.prototype.hasOwnProperty, assign2 = Object.assign, REACT_CLIENT_REFERENCE$1 = Symbol.for("react.client.reference"), isArrayImpl = Array.isArray, disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
    disabledLog.__reactDisabledLog = true;
    var prefix2, suffix, reentry = false;
    var componentFrameCache = new (typeof WeakMap === "function" ? WeakMap : Map);
    var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), specialPropKeyWarningShown;
    var didWarnAboutElementRef = {};
    var didWarnAboutKeySpread = {}, ownerHasKeyUseWarning = {};
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.jsxDEV = function(type, config2, maybeKey, isStaticChildren, source, self2) {
      return jsxDEVImpl(type, config2, maybeKey, isStaticChildren, source, self2);
    };
  })();
});

// node_modules/react/jsx-dev-runtime.js
var require_jsx_dev_runtime = __commonJS((exports, module) => {
  var react_jsx_dev_runtime_development = __toESM(require_react_jsx_dev_runtime_development(), 1);
  if (false) {
  } else {
    module.exports = react_jsx_dev_runtime_development;
  }
});

// assets/component/system_usage.js
var React27 = __toESM(require_react(), 1);

// node_modules/react-use-measure/dist/index.js
var import_react = __toESM(require_react(), 1);
function g(n, t) {
  let o;
  return (...i) => {
    window.clearTimeout(o), o = window.setTimeout(() => n(...i), t);
  };
}
function j({ debounce: n, scroll: t, polyfill: o, offsetSize: i } = { debounce: 0, scroll: false, offsetSize: false }) {
  const a = o || (typeof window == "undefined" ? class {
  } : window.ResizeObserver);
  if (!a)
    throw new Error("This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills");
  const [c, h] = import_react.useState({ left: 0, top: 0, width: 0, height: 0, bottom: 0, right: 0, x: 0, y: 0 }), e = import_react.useRef({ element: null, scrollContainers: null, resizeObserver: null, lastBounds: c, orientationHandler: null }), d = n ? typeof n == "number" ? n : n.scroll : null, f = n ? typeof n == "number" ? n : n.resize : null, w = import_react.useRef(false);
  import_react.useEffect(() => (w.current = true, () => void (w.current = false)));
  const [z, m, s] = import_react.useMemo(() => {
    const r = () => {
      if (!e.current.element)
        return;
      const { left: y, top: C, width: H, height: O, bottom: S, right: x, x: B, y: R } = e.current.element.getBoundingClientRect(), l = { left: y, top: C, width: H, height: O, bottom: S, right: x, x: B, y: R };
      e.current.element instanceof HTMLElement && i && (l.height = e.current.element.offsetHeight, l.width = e.current.element.offsetWidth), Object.freeze(l), w.current && !D(e.current.lastBounds, l) && h(e.current.lastBounds = l);
    };
    return [r, f ? g(r, f) : r, d ? g(r, d) : r];
  }, [h, i, d, f]);
  function v() {
    e.current.scrollContainers && (e.current.scrollContainers.forEach((r) => r.removeEventListener("scroll", s, true)), e.current.scrollContainers = null), e.current.resizeObserver && (e.current.resizeObserver.disconnect(), e.current.resizeObserver = null), e.current.orientationHandler && ("orientation" in screen && "removeEventListener" in screen.orientation ? screen.orientation.removeEventListener("change", e.current.orientationHandler) : ("onorientationchange" in window) && window.removeEventListener("orientationchange", e.current.orientationHandler));
  }
  function b() {
    e.current.element && (e.current.resizeObserver = new a(s), e.current.resizeObserver.observe(e.current.element), t && e.current.scrollContainers && e.current.scrollContainers.forEach((r) => r.addEventListener("scroll", s, { capture: true, passive: true })), e.current.orientationHandler = () => {
      s();
    }, ("orientation" in screen) && ("addEventListener" in screen.orientation) ? screen.orientation.addEventListener("change", e.current.orientationHandler) : ("onorientationchange" in window) && window.addEventListener("orientationchange", e.current.orientationHandler));
  }
  const L = (r) => {
    !r || r === e.current.element || (v(), e.current.element = r, e.current.scrollContainers = E(r), b());
  };
  return X(s, !!t), W(m), import_react.useEffect(() => {
    v(), b();
  }, [t, s, m]), import_react.useEffect(() => v, []), [L, c, z];
}
function W(n) {
  import_react.useEffect(() => {
    const t = n;
    return window.addEventListener("resize", t), () => void window.removeEventListener("resize", t);
  }, [n]);
}
function X(n, t) {
  import_react.useEffect(() => {
    if (t) {
      const o = n;
      return window.addEventListener("scroll", o, { capture: true, passive: true }), () => void window.removeEventListener("scroll", o, true);
    }
  }, [n, t]);
}
function E(n) {
  const t = [];
  if (!n || n === document.body)
    return t;
  const { overflow: o, overflowX: i, overflowY: a } = window.getComputedStyle(n);
  return [o, i, a].some((c) => c === "auto" || c === "scroll") && t.push(n), [...t, ...E(n.parentElement)];
}
var k = ["x", "y", "top", "bottom", "left", "right", "width", "height"];
var D = (n, t) => k.every((o) => n[o] === t[o]);

// node_modules/d3-array/src/ascending.js
function ascending(a, b) {
  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

// node_modules/d3-array/src/descending.js
function descending(a, b) {
  return a == null || b == null ? NaN : b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}

// node_modules/d3-array/src/bisector.js
function bisector(f) {
  let compare1, compare2, delta;
  if (f.length !== 2) {
    compare1 = ascending;
    compare2 = (d, x) => ascending(f(d), x);
    delta = (d, x) => f(d) - x;
  } else {
    compare1 = f === ascending || f === descending ? f : zero;
    compare2 = f;
    delta = f;
  }
  function left(a, x, lo = 0, hi = a.length) {
    if (lo < hi) {
      if (compare1(x, x) !== 0)
        return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a[mid], x) < 0)
          lo = mid + 1;
        else
          hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function right(a, x, lo = 0, hi = a.length) {
    if (lo < hi) {
      if (compare1(x, x) !== 0)
        return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a[mid], x) <= 0)
          lo = mid + 1;
        else
          hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function center(a, x, lo = 0, hi = a.length) {
    const i = left(a, x, lo, hi - 1);
    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
  }
  return { left, center, right };
}
function zero() {
  return 0;
}

// node_modules/d3-array/src/number.js
function number(x) {
  return x === null ? NaN : +x;
}

// node_modules/d3-array/src/bisect.js
var ascendingBisect = bisector(ascending);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;
var bisectCenter = bisector(number).center;
var bisect_default = bisectRight;
// node_modules/d3-array/src/extent.js
function extent(values, valueof) {
  let min;
  let max;
  if (valueof === undefined) {
    for (const value of values) {
      if (value != null) {
        if (min === undefined) {
          if (value >= value)
            min = max = value;
        } else {
          if (min > value)
            min = value;
          if (max < value)
            max = value;
        }
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null) {
        if (min === undefined) {
          if (value >= value)
            min = max = value;
        } else {
          if (min > value)
            min = value;
          if (max < value)
            max = value;
        }
      }
    }
  }
  return [min, max];
}
// node_modules/internmap/src/index.js
class InternMap extends Map {
  constructor(entries, key = keyof) {
    super();
    Object.defineProperties(this, { _intern: { value: new Map }, _key: { value: key } });
    if (entries != null)
      for (const [key2, value] of entries)
        this.set(key2, value);
  }
  get(key) {
    return super.get(intern_get(this, key));
  }
  has(key) {
    return super.has(intern_get(this, key));
  }
  set(key, value) {
    return super.set(intern_set(this, key), value);
  }
  delete(key) {
    return super.delete(intern_delete(this, key));
  }
}
function intern_get({ _intern, _key }, value) {
  const key = _key(value);
  return _intern.has(key) ? _intern.get(key) : value;
}
function intern_set({ _intern, _key }, value) {
  const key = _key(value);
  if (_intern.has(key))
    return _intern.get(key);
  _intern.set(key, value);
  return value;
}
function intern_delete({ _intern, _key }, value) {
  const key = _key(value);
  if (_intern.has(key)) {
    value = _intern.get(key);
    _intern.delete(key);
  }
  return value;
}
function keyof(value) {
  return value !== null && typeof value === "object" ? value.valueOf() : value;
}

// node_modules/d3-array/src/ticks.js
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);
function ticks(start, stop, count) {
  var reverse, i = -1, n, ticks2, step;
  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0)
    return [start];
  if (reverse = stop < start)
    n = start, start = stop, stop = n;
  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step))
    return [];
  if (step > 0) {
    let r0 = Math.round(start / step), r1 = Math.round(stop / step);
    if (r0 * step < start)
      ++r0;
    if (r1 * step > stop)
      --r1;
    ticks2 = new Array(n = r1 - r0 + 1);
    while (++i < n)
      ticks2[i] = (r0 + i) * step;
  } else {
    step = -step;
    let r0 = Math.round(start * step), r1 = Math.round(stop * step);
    if (r0 / step < start)
      ++r0;
    if (r1 / step > stop)
      --r1;
    ticks2 = new Array(n = r1 - r0 + 1);
    while (++i < n)
      ticks2[i] = (r0 + i) / step;
  }
  if (reverse)
    ticks2.reverse();
  return ticks2;
}
function tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count), power = Math.floor(Math.log(step) / Math.LN10), error = step / Math.pow(10, power);
  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}
function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
  if (error >= e10)
    step1 *= 10;
  else if (error >= e5)
    step1 *= 5;
  else if (error >= e2)
    step1 *= 2;
  return stop < start ? -step1 : step1;
}

// node_modules/d3-array/src/quantile.js
function quantileSorted(values, p2, valueof = number) {
  if (!(n = values.length) || isNaN(p2 = +p2))
    return;
  if (p2 <= 0 || n < 2)
    return +valueof(values[0], 0, values);
  if (p2 >= 1)
    return +valueof(values[n - 1], n - 1, values);
  var n, i = (n - 1) * p2, i0 = Math.floor(i), value0 = +valueof(values[i0], i0, values), value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i - i0);
}
// node_modules/d3-array/src/range.js
function range(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
  var i = -1, n = Math.max(0, Math.ceil((stop - start) / step)) | 0, range2 = new Array(n);
  while (++i < n) {
    range2[i] = start + i * step;
  }
  return range2;
}
// node_modules/d3-scale/src/init.js
function initRange(domain, range2) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range2).domain(domain);
      break;
  }
  return this;
}

// node_modules/d3-scale/src/ordinal.js
var implicit = Symbol("implicit");
function ordinal() {
  var index = new InternMap, domain = [], range2 = [], unknown = implicit;
  function scale(d) {
    let i = index.get(d);
    if (i === undefined) {
      if (unknown !== implicit)
        return unknown;
      index.set(d, i = domain.push(d) - 1);
    }
    return range2[i % range2.length];
  }
  scale.domain = function(_) {
    if (!arguments.length)
      return domain.slice();
    domain = [], index = new InternMap;
    for (const value of _) {
      if (index.has(value))
        continue;
      index.set(value, domain.push(value) - 1);
    }
    return scale;
  };
  scale.range = function(_) {
    return arguments.length ? (range2 = Array.from(_), scale) : range2.slice();
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  scale.copy = function() {
    return ordinal(domain, range2).unknown(unknown);
  };
  initRange.apply(scale, arguments);
  return scale;
}

// node_modules/d3-scale/src/band.js
function band() {
  var scale = ordinal().unknown(undefined), domain = scale.domain, ordinalRange = scale.range, r0 = 0, r1 = 1, step, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
  delete scale.unknown;
  function rescale() {
    var n = domain().length, reverse = r1 < r0, start = reverse ? r1 : r0, stop = reverse ? r0 : r1;
    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round)
      step = Math.floor(step);
    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round)
      start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = range(n).map(function(i) {
      return start + step * i;
    });
    return ordinalRange(reverse ? values.reverse() : values);
  }
  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };
  scale.range = function(_) {
    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
  };
  scale.rangeRound = function(_) {
    return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();
  };
  scale.bandwidth = function() {
    return bandwidth;
  };
  scale.step = function() {
    return step;
  };
  scale.round = function(_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };
  scale.padding = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
  };
  scale.paddingInner = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
  };
  scale.paddingOuter = function(_) {
    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
  };
  scale.align = function(_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };
  scale.copy = function() {
    return band(domain(), [r0, r1]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
  };
  return initRange.apply(rescale(), arguments);
}
function pointish(scale) {
  var copy = scale.copy;
  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;
  scale.copy = function() {
    return pointish(copy());
  };
  return scale;
}
function point() {
  return pointish(band.apply(null, arguments).paddingInner(1));
}
// node_modules/d3-color/src/define.js
function define_default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}

// node_modules/d3-color/src/color.js
function Color() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*";
var reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex = /^#([0-9a-f]{3,8})$/;
var reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
var reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
var reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
var reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
var reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
var reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default(Color, color, {
  copy(channels) {
    return Object.assign(new this.constructor, this, channels);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  formatHex: color_formatHex,
  formatHex8: color_formatHex8,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHex8() {
  return this.rgb().formatHex8();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format) {
  var m, l;
  format = (format + "").trim().toLowerCase();
  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) : l === 3 ? new Rgb(m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, (m & 15) << 4 | m & 15, 1) : l === 8 ? rgba(m >> 24 & 255, m >> 16 & 255, m >> 8 & 255, (m & 255) / 255) : l === 4 ? rgba(m >> 12 & 15 | m >> 8 & 240, m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, ((m & 15) << 4 | m & 15) / 255) : null) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) : named.hasOwnProperty(format) ? rgbn(named[format]) : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n) {
  return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
}
function rgba(r, g2, b, a) {
  if (a <= 0)
    r = g2 = b = NaN;
  return new Rgb(r, g2, b, a);
}
function rgbConvert(o) {
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Rgb;
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r, g2, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g2, b, opacity == null ? 1 : opacity);
}
function Rgb(r, g2, b, opacity) {
  this.r = +r;
  this.g = +g2;
  this.b = +b;
  this.opacity = +opacity;
}
define_default(Rgb, rgb, extend(Color, {
  brighter(k2) {
    k2 = k2 == null ? brighter : Math.pow(brighter, k2);
    return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
  },
  darker(k2) {
    k2 = k2 == null ? darker : Math.pow(darker, k2);
    return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
  },
  displayable() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  formatHex: rgb_formatHex,
  formatHex8: rgb_formatHex8,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}
function rgb_formatHex8() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function rgb_formatRgb() {
  const a = clampa(this.opacity);
  return `${a === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a === 1 ? ")" : `, ${a})`}`;
}
function clampa(opacity) {
  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}
function clampi(value) {
  return Math.max(0, Math.min(255, Math.round(value) || 0));
}
function hex(value) {
  value = clampi(value);
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h, s, l, a) {
  if (a <= 0)
    h = s = l = NaN;
  else if (l <= 0 || l >= 1)
    h = s = NaN;
  else if (s <= 0)
    h = NaN;
  return new Hsl(h, s, l, a);
}
function hslConvert(o) {
  if (o instanceof Hsl)
    return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Hsl;
  if (o instanceof Hsl)
    return o;
  o = o.rgb();
  var r = o.r / 255, g2 = o.g / 255, b = o.b / 255, min = Math.min(r, g2, b), max = Math.max(r, g2, b), h = NaN, s = max - min, l = (max + min) / 2;
  if (s) {
    if (r === max)
      h = (g2 - b) / s + (g2 < b) * 6;
    else if (g2 === max)
      h = (b - r) / s + 2;
    else
      h = (r - g2) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}
function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}
function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}
define_default(Hsl, hsl, extend(Color, {
  brighter(k2) {
    k2 = k2 == null ? brighter : Math.pow(brighter, k2);
    return new Hsl(this.h, this.s, this.l * k2, this.opacity);
  },
  darker(k2) {
    k2 = k2 == null ? darker : Math.pow(darker, k2);
    return new Hsl(this.h, this.s, this.l * k2, this.opacity);
  },
  rgb() {
    var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
    return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
  },
  clamp() {
    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl() {
    const a = clampa(this.opacity);
    return `${a === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a === 1 ? ")" : `, ${a})`}`;
  }
}));
function clamph(value) {
  value = (value || 0) % 360;
  return value < 0 ? value + 360 : value;
}
function clampt(value) {
  return Math.max(0, Math.min(1, value || 0));
}
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}
// node_modules/d3-color/src/math.js
var radians = Math.PI / 180;
var degrees = 180 / Math.PI;

// node_modules/d3-color/src/lab.js
var K = 18;
var Xn = 0.96422;
var Yn = 1;
var Zn = 0.82521;
var t0 = 4 / 29;
var t1 = 6 / 29;
var t2 = 3 * t1 * t1;
var t3 = t1 * t1 * t1;
function labConvert(o) {
  if (o instanceof Lab)
    return new Lab(o.l, o.a, o.b, o.opacity);
  if (o instanceof Hcl)
    return hcl2lab(o);
  if (!(o instanceof Rgb))
    o = rgbConvert(o);
  var r = rgb2lrgb(o.r), g2 = rgb2lrgb(o.g), b = rgb2lrgb(o.b), y = xyz2lab((0.2225045 * r + 0.7168786 * g2 + 0.0606169 * b) / Yn), x, z;
  if (r === g2 && g2 === b)
    x = z = y;
  else {
    x = xyz2lab((0.4360747 * r + 0.3850649 * g2 + 0.1430804 * b) / Xn);
    z = xyz2lab((0.0139322 * r + 0.0971045 * g2 + 0.7141733 * b) / Zn);
  }
  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
}
function lab(l, a, b, opacity) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
}
function Lab(l, a, b, opacity) {
  this.l = +l;
  this.a = +a;
  this.b = +b;
  this.opacity = +opacity;
}
define_default(Lab, lab, extend(Color, {
  brighter(k2) {
    return new Lab(this.l + K * (k2 == null ? 1 : k2), this.a, this.b, this.opacity);
  },
  darker(k2) {
    return new Lab(this.l - K * (k2 == null ? 1 : k2), this.a, this.b, this.opacity);
  },
  rgb() {
    var y = (this.l + 16) / 116, x = isNaN(this.a) ? y : y + this.a / 500, z = isNaN(this.b) ? y : y - this.b / 200;
    x = Xn * lab2xyz(x);
    y = Yn * lab2xyz(y);
    z = Zn * lab2xyz(z);
    return new Rgb(lrgb2rgb(3.1338561 * x - 1.6168667 * y - 0.4906146 * z), lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.033454 * z), lrgb2rgb(0.0719453 * x - 0.2289914 * y + 1.4052427 * z), this.opacity);
  }
}));
function xyz2lab(t) {
  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}
function lab2xyz(t) {
  return t > t1 ? t * t * t : t2 * (t - t0);
}
function lrgb2rgb(x) {
  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}
function rgb2lrgb(x) {
  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}
function hclConvert(o) {
  if (o instanceof Hcl)
    return new Hcl(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab))
    o = labConvert(o);
  if (o.a === 0 && o.b === 0)
    return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
  var h = Math.atan2(o.b, o.a) * degrees;
  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}
function hcl(h, c, l, opacity) {
  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}
function Hcl(h, c, l, opacity) {
  this.h = +h;
  this.c = +c;
  this.l = +l;
  this.opacity = +opacity;
}
function hcl2lab(o) {
  if (isNaN(o.h))
    return new Lab(o.l, 0, 0, o.opacity);
  var h = o.h * radians;
  return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
}
define_default(Hcl, hcl, extend(Color, {
  brighter(k2) {
    return new Hcl(this.h, this.c, this.l + K * (k2 == null ? 1 : k2), this.opacity);
  },
  darker(k2) {
    return new Hcl(this.h, this.c, this.l - K * (k2 == null ? 1 : k2), this.opacity);
  },
  rgb() {
    return hcl2lab(this).rgb();
  }
}));
// node_modules/d3-color/src/cubehelix.js
var A = -0.14861;
var B = 1.78277;
var C = -0.29227;
var D2 = -0.90649;
var E2 = 1.97294;
var ED = E2 * D2;
var EB = E2 * B;
var BC_DA = B * C - D2 * A;
function cubehelixConvert(o) {
  if (o instanceof Cubehelix)
    return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Rgb))
    o = rgbConvert(o);
  var r = o.r / 255, g2 = o.g / 255, b = o.b / 255, l = (BC_DA * b + ED * r - EB * g2) / (BC_DA + ED - EB), bl = b - l, k2 = (E2 * (g2 - l) - C * bl) / D2, s = Math.sqrt(k2 * k2 + bl * bl) / (E2 * l * (1 - l)), h = s ? Math.atan2(k2, bl) * degrees - 120 : NaN;
  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
}
function cubehelix(h, s, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
}
function Cubehelix(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}
define_default(Cubehelix, cubehelix, extend(Color, {
  brighter(k2) {
    k2 = k2 == null ? brighter : Math.pow(brighter, k2);
    return new Cubehelix(this.h, this.s, this.l * k2, this.opacity);
  },
  darker(k2) {
    k2 = k2 == null ? darker : Math.pow(darker, k2);
    return new Cubehelix(this.h, this.s, this.l * k2, this.opacity);
  },
  rgb() {
    var h = isNaN(this.h) ? 0 : (this.h + 120) * radians, l = +this.l, a = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh = Math.cos(h), sinh = Math.sin(h);
    return new Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D2 * sinh)), 255 * (l + a * (E2 * cosh)), this.opacity);
  }
}));
// node_modules/d3-interpolate/src/basis.js
function basis(t12, v0, v1, v2, v3) {
  var t22 = t12 * t12, t32 = t22 * t12;
  return ((1 - 3 * t12 + 3 * t22 - t32) * v0 + (4 - 6 * t22 + 3 * t32) * v1 + (1 + 3 * t12 + 3 * t22 - 3 * t32) * v2 + t32 * v3) / 6;
}
function basis_default(values) {
  var n = values.length - 1;
  return function(t) {
    var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}

// node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default(values) {
  var n = values.length;
  return function(t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}

// node_modules/d3-interpolate/src/constant.js
var constant_default = (x) => () => x;

// node_modules/d3-interpolate/src/color.js
function linear(a, d) {
  return function(t) {
    return a + t * d;
  };
}
function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
    return Math.pow(a + t * b, y);
  };
}
function hue(a, b) {
  var d = b - a;
  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant_default(isNaN(a) ? b : a);
}
function gamma(y) {
  return (y = +y) === 1 ? nogamma : function(a, b) {
    return b - a ? exponential(a, b, y) : constant_default(isNaN(a) ? b : a);
  };
}
function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : constant_default(isNaN(a) ? b : a);
}

// node_modules/d3-interpolate/src/rgb.js
var rgb_default = function rgbGamma(y) {
  var color2 = gamma(y);
  function rgb2(start, end) {
    var r = color2((start = rgb(start)).r, (end = rgb(end)).r), g2 = color2(start.g, end.g), b = color2(start.b, end.b), opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.r = r(t);
      start.g = g2(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }
  rgb2.gamma = rgbGamma;
  return rgb2;
}(1);
function rgbSpline(spline) {
  return function(colors) {
    var n = colors.length, r = new Array(n), g2 = new Array(n), b = new Array(n), i, color2;
    for (i = 0;i < n; ++i) {
      color2 = rgb(colors[i]);
      r[i] = color2.r || 0;
      g2[i] = color2.g || 0;
      b[i] = color2.b || 0;
    }
    r = spline(r);
    g2 = spline(g2);
    b = spline(b);
    color2.opacity = 1;
    return function(t) {
      color2.r = r(t);
      color2.g = g2(t);
      color2.b = b(t);
      return color2 + "";
    };
  };
}
var rgbBasis = rgbSpline(basis_default);
var rgbBasisClosed = rgbSpline(basisClosed_default);

// node_modules/d3-interpolate/src/numberArray.js
function numberArray_default(a, b) {
  if (!b)
    b = [];
  var n = a ? Math.min(b.length, a.length) : 0, c = b.slice(), i;
  return function(t) {
    for (i = 0;i < n; ++i)
      c[i] = a[i] * (1 - t) + b[i] * t;
    return c;
  };
}
function isNumberArray(x) {
  return ArrayBuffer.isView(x) && !(x instanceof DataView);
}

// node_modules/d3-interpolate/src/array.js
function genericArray(a, b) {
  var nb = b ? b.length : 0, na = a ? Math.min(nb, a.length) : 0, x = new Array(na), c = new Array(nb), i;
  for (i = 0;i < na; ++i)
    x[i] = value_default(a[i], b[i]);
  for (;i < nb; ++i)
    c[i] = b[i];
  return function(t) {
    for (i = 0;i < na; ++i)
      c[i] = x[i](t);
    return c;
  };
}

// node_modules/d3-interpolate/src/date.js
function date_default(a, b) {
  var d = new Date;
  return a = +a, b = +b, function(t) {
    return d.setTime(a * (1 - t) + b * t), d;
  };
}

// node_modules/d3-interpolate/src/number.js
function number_default(a, b) {
  return a = +a, b = +b, function(t) {
    return a * (1 - t) + b * t;
  };
}

// node_modules/d3-interpolate/src/object.js
function object_default(a, b) {
  var i = {}, c = {}, k2;
  if (a === null || typeof a !== "object")
    a = {};
  if (b === null || typeof b !== "object")
    b = {};
  for (k2 in b) {
    if (k2 in a) {
      i[k2] = value_default(a[k2], b[k2]);
    } else {
      c[k2] = b[k2];
    }
  }
  return function(t) {
    for (k2 in i)
      c[k2] = i[k2](t);
    return c;
  };
}

// node_modules/d3-interpolate/src/string.js
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB = new RegExp(reA.source, "g");
function zero2(b) {
  return function() {
    return b;
  };
}
function one(b) {
  return function(t) {
    return b(t) + "";
  };
}
function string_default(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
  a = a + "", b = b + "";
  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      bs = b.slice(bi, bs);
      if (s[i])
        s[i] += bs;
      else
        s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s[i])
        s[i] += bm;
      else
        s[++i] = bm;
    } else {
      s[++i] = null;
      q.push({ i, x: number_default(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i])
      s[i] += bs;
    else
      s[++i] = bs;
  }
  return s.length < 2 ? q[0] ? one(q[0].x) : zero2(b) : (b = q.length, function(t) {
    for (var i2 = 0, o;i2 < b; ++i2)
      s[(o = q[i2]).i] = o.x(t);
    return s.join("");
  });
}

// node_modules/d3-interpolate/src/value.js
function value_default(a, b) {
  var t = typeof b, c;
  return b == null || t === "boolean" ? constant_default(b) : (t === "number" ? number_default : t === "string" ? (c = color(b)) ? (b = c, rgb_default) : string_default : b instanceof color ? rgb_default : b instanceof Date ? date_default : isNumberArray(b) ? numberArray_default : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object_default : number_default)(a, b);
}
// node_modules/d3-interpolate/src/round.js
function round_default(a, b) {
  return a = +a, b = +b, function(t) {
    return Math.round(a * (1 - t) + b * t);
  };
}
// node_modules/d3-interpolate/src/hsl.js
function hsl2(hue2) {
  return function(start, end) {
    var h = hue2((start = hsl(start)).h, (end = hsl(end)).h), s = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.h = h(t);
      start.s = s(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  };
}
var hsl_default = hsl2(hue);
var hslLong = hsl2(nogamma);
// node_modules/d3-interpolate/src/lab.js
function lab2(start, end) {
  var l = nogamma((start = lab(start)).l, (end = lab(end)).l), a = nogamma(start.a, end.a), b = nogamma(start.b, end.b), opacity = nogamma(start.opacity, end.opacity);
  return function(t) {
    start.l = l(t);
    start.a = a(t);
    start.b = b(t);
    start.opacity = opacity(t);
    return start + "";
  };
}
// node_modules/d3-interpolate/src/hcl.js
function hcl2(hue2) {
  return function(start, end) {
    var h = hue2((start = hcl(start)).h, (end = hcl(end)).h), c = nogamma(start.c, end.c), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.h = h(t);
      start.c = c(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  };
}
var hcl_default = hcl2(hue);
var hclLong = hcl2(nogamma);
// node_modules/d3-interpolate/src/cubehelix.js
function cubehelix2(hue2) {
  return function cubehelixGamma(y) {
    y = +y;
    function cubehelix3(start, end) {
      var h = hue2((start = cubehelix(start)).h, (end = cubehelix(end)).h), s = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
      return function(t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(Math.pow(t, y));
        start.opacity = opacity(t);
        return start + "";
      };
    }
    cubehelix3.gamma = cubehelixGamma;
    return cubehelix3;
  }(1);
}
var cubehelix_default = cubehelix2(hue);
var cubehelixLong = cubehelix2(nogamma);
// node_modules/d3-scale/src/constant.js
function constants(x) {
  return function() {
    return x;
  };
}

// node_modules/d3-scale/src/number.js
function number2(x) {
  return +x;
}

// node_modules/d3-scale/src/continuous.js
var unit = [0, 1];
function identity(x) {
  return x;
}
function normalize(a, b) {
  return (b -= a = +a) ? function(x) {
    return (x - a) / b;
  } : constants(isNaN(b) ? NaN : 0.5);
}
function clamper(a, b) {
  var t;
  if (a > b)
    t = a, a = b, b = t;
  return function(x) {
    return Math.max(a, Math.min(b, x));
  };
}
function bimap(domain, range2, interpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range2[0], r1 = range2[1];
  if (d1 < d0)
    d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
  else
    d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function(x) {
    return r0(d0(x));
  };
}
function polymap(domain, range2, interpolate) {
  var j2 = Math.min(domain.length, range2.length) - 1, d = new Array(j2), r = new Array(j2), i = -1;
  if (domain[j2] < domain[0]) {
    domain = domain.slice().reverse();
    range2 = range2.slice().reverse();
  }
  while (++i < j2) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range2[i], range2[i + 1]);
  }
  return function(x) {
    var i2 = bisect_default(domain, x, 1, j2) - 1;
    return r[i2](d[i2](x));
  };
}
function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer() {
  var domain = unit, range2 = unit, interpolate = value_default, transform, untransform, unknown, clamp = identity, piecewise, output, input;
  function rescale() {
    var n = Math.min(domain.length, range2.length);
    if (clamp !== identity)
      clamp = clamper(domain[0], domain[n - 1]);
    piecewise = n > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }
  function scale(x) {
    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range2, interpolate)))(transform(clamp(x)));
  }
  scale.invert = function(y) {
    return clamp(untransform((input || (input = piecewise(range2, domain.map(transform), number_default)))(y)));
  };
  scale.domain = function(_) {
    return arguments.length ? (domain = Array.from(_, number2), rescale()) : domain.slice();
  };
  scale.range = function(_) {
    return arguments.length ? (range2 = Array.from(_), rescale()) : range2.slice();
  };
  scale.rangeRound = function(_) {
    return range2 = Array.from(_), interpolate = round_default, rescale();
  };
  scale.clamp = function(_) {
    return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;
  };
  scale.interpolate = function(_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  return function(t, u2) {
    transform = t, untransform = u2;
    return rescale();
  };
}
function continuous() {
  return transformer()(identity, identity);
}

// node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default(x) {
  return Math.abs(x = Math.round(x)) >= 1000000000000000000000 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
}
function formatDecimalParts(x, p2) {
  if ((i = (x = p2 ? x.toExponential(p2 - 1) : x.toExponential()).indexOf("e")) < 0)
    return null;
  var i, coefficient = x.slice(0, i);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x.slice(i + 1)
  ];
}

// node_modules/d3-format/src/exponent.js
function exponent_default(x) {
  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
}

// node_modules/d3-format/src/formatGroup.js
function formatGroup_default(grouping, thousands) {
  return function(value, width) {
    var i = value.length, t = [], j2 = 0, g2 = grouping[0], length = 0;
    while (i > 0 && g2 > 0) {
      if (length + g2 + 1 > width)
        g2 = Math.max(1, width - length);
      t.push(value.substring(i -= g2, i + g2));
      if ((length += g2 + 1) > width)
        break;
      g2 = grouping[j2 = (j2 + 1) % grouping.length];
    }
    return t.reverse().join(thousands);
  };
}

// node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}

// node_modules/d3-format/src/formatSpecifier.js
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype;
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
  this.align = specifier.align === undefined ? ">" : specifier.align + "";
  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === undefined ? undefined : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === undefined ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === undefined ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// node_modules/d3-format/src/formatTrim.js
function formatTrim_default(s) {
  out:
    for (var n = s.length, i = 1, i0 = -1, i1;i < n; ++i) {
      switch (s[i]) {
        case ".":
          i0 = i1 = i;
          break;
        case "0":
          if (i0 === 0)
            i0 = i;
          i1 = i;
          break;
        default:
          if (!+s[i])
            break out;
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}

// node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent;
function formatPrefixAuto_default(x, p2) {
  var d = formatDecimalParts(x, p2);
  if (!d)
    return x + "";
  var coefficient = d[0], exponent = d[1], i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p2 + i - 1))[0];
}

// node_modules/d3-format/src/formatRounded.js
function formatRounded_default(x, p2) {
  var d = formatDecimalParts(x, p2);
  if (!d)
    return x + "";
  var coefficient = d[0], exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// node_modules/d3-format/src/formatTypes.js
var formatTypes_default = {
  "%": (x, p2) => (x * 100).toFixed(p2),
  b: (x) => Math.round(x).toString(2),
  c: (x) => x + "",
  d: formatDecimal_default,
  e: (x, p2) => x.toExponential(p2),
  f: (x, p2) => x.toFixed(p2),
  g: (x, p2) => x.toPrecision(p2),
  o: (x) => Math.round(x).toString(8),
  p: (x, p2) => formatRounded_default(x * 100, p2),
  r: formatRounded_default,
  s: formatPrefixAuto_default,
  X: (x) => Math.round(x).toString(16).toUpperCase(),
  x: (x) => Math.round(x).toString(16)
};

// node_modules/d3-format/src/identity.js
function identity_default(x) {
  return x;
}

// node_modules/d3-format/src/locale.js
var map = Array.prototype.map;
var prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function locale_default(locale) {
  var group = locale.grouping === undefined || locale.thousands === undefined ? identity_default : formatGroup_default(map.call(locale.grouping, Number), locale.thousands + ""), currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "", currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "", decimal = locale.decimal === undefined ? "." : locale.decimal + "", numerals = locale.numerals === undefined ? identity_default : formatNumerals_default(map.call(locale.numerals, String)), percent = locale.percent === undefined ? "%" : locale.percent + "", minus = locale.minus === undefined ? "−" : locale.minus + "", nan = locale.nan === undefined ? "NaN" : locale.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var { fill, align, sign, symbol, zero: zero3, width, comma, precision, trim, type } = specifier;
    if (type === "n")
      comma = true, type = "g";
    else if (!formatTypes_default[type])
      precision === undefined && (precision = 12), trim = true, type = "g";
    if (zero3 || fill === "0" && align === "=")
      zero3 = true, fill = "0", align = "=";
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
    var formatType = formatTypes_default[type], maybeSuffix = /[defgprs%]/.test(type);
    precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format(value) {
      var valuePrefix = prefix, valueSuffix = suffix, i, n, c;
      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim)
          value = formatTrim_default(value);
        if (valueNegative && +value === 0 && sign !== "+")
          valueNegative = false;
        valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }
      if (comma && !zero3)
        value = group(value, Infinity);
      var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero3)
        value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format.toString = function() {
      return specifier + "";
    };
    return format;
  }
  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k2 = Math.pow(10, -e), prefix = prefixes[8 + e / 3];
    return function(value2) {
      return f(k2 * value2) + prefix;
    };
  }
  return {
    format: newFormat,
    formatPrefix
  };
}

// node_modules/d3-format/src/defaultLocale.js
var locale;
var format;
var formatPrefix;
defaultLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function defaultLocale(definition) {
  locale = locale_default(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}
// node_modules/d3-format/src/precisionFixed.js
function precisionFixed_default(step) {
  return Math.max(0, -exponent_default(Math.abs(step)));
}
// node_modules/d3-format/src/precisionPrefix.js
function precisionPrefix_default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3 - exponent_default(Math.abs(step)));
}
// node_modules/d3-format/src/precisionRound.js
function precisionRound_default(step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, exponent_default(max) - exponent_default(step)) + 1;
}
// node_modules/d3-scale/src/tickFormat.js
function tickFormat(start, stop, count, specifier) {
  var step = tickStep(start, stop, count), precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step, value)))
        specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound_default(step, Math.max(Math.abs(start), Math.abs(stop)))))
        specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step)))
        specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}

// node_modules/d3-scale/src/linear.js
function linearish(scale) {
  var domain = scale.domain;
  scale.ticks = function(count) {
    var d = domain();
    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
  };
  scale.tickFormat = function(count, specifier) {
    var d = domain();
    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
  };
  scale.nice = function(count) {
    if (count == null)
      count = 10;
    var d = domain();
    var i0 = 0;
    var i1 = d.length - 1;
    var start = d[i0];
    var stop = d[i1];
    var prestep;
    var step;
    var maxIter = 10;
    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }
    while (maxIter-- > 0) {
      step = tickIncrement(start, stop, count);
      if (step === prestep) {
        d[i0] = start;
        d[i1] = stop;
        return domain(d);
      } else if (step > 0) {
        start = Math.floor(start / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start = Math.ceil(start * step) / step;
        stop = Math.floor(stop * step) / step;
      } else {
        break;
      }
      prestep = step;
    }
    return scale;
  };
  return scale;
}
function linear2() {
  var scale = continuous();
  scale.copy = function() {
    return copy(scale, linear2());
  };
  initRange.apply(scale, arguments);
  return linearish(scale);
}
// node_modules/d3-scale/src/nice.js
function nice(domain, interval) {
  domain = domain.slice();
  var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t;
  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }
  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}

// node_modules/d3-scale/src/log.js
function transformLog(x) {
  return Math.log(x);
}
function transformExp(x) {
  return Math.exp(x);
}
function transformLogn(x) {
  return -Math.log(-x);
}
function transformExpn(x) {
  return -Math.exp(-x);
}
function pow10(x) {
  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}
function powp(base) {
  return base === 10 ? pow10 : base === Math.E ? Math.exp : (x) => Math.pow(base, x);
}
function logp(base) {
  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), (x) => Math.log(x) / base);
}
function reflect(f) {
  return (x, k2) => -f(-x, k2);
}
function loggish(transform) {
  const scale = transform(transformLog, transformExp);
  const domain = scale.domain;
  let base = 10;
  let logs;
  let pows;
  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform(transformLogn, transformExpn);
    } else {
      transform(transformLog, transformExp);
    }
    return scale;
  }
  scale.base = function(_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };
  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };
  scale.ticks = (count) => {
    const d = domain();
    let u2 = d[0];
    let v = d[d.length - 1];
    const r = v < u2;
    if (r)
      [u2, v] = [v, u2];
    let i = logs(u2);
    let j2 = logs(v);
    let k2;
    let t;
    const n = count == null ? 10 : +count;
    let z = [];
    if (!(base % 1) && j2 - i < n) {
      i = Math.floor(i), j2 = Math.ceil(j2);
      if (u2 > 0)
        for (;i <= j2; ++i) {
          for (k2 = 1;k2 < base; ++k2) {
            t = i < 0 ? k2 / pows(-i) : k2 * pows(i);
            if (t < u2)
              continue;
            if (t > v)
              break;
            z.push(t);
          }
        }
      else
        for (;i <= j2; ++i) {
          for (k2 = base - 1;k2 >= 1; --k2) {
            t = i > 0 ? k2 / pows(-i) : k2 * pows(i);
            if (t < u2)
              continue;
            if (t > v)
              break;
            z.push(t);
          }
        }
      if (z.length * 2 < n)
        z = ticks(u2, v, n);
    } else {
      z = ticks(i, j2, Math.min(j2 - i, n)).map(pows);
    }
    return r ? z.reverse() : z;
  };
  scale.tickFormat = (count, specifier) => {
    if (count == null)
      count = 10;
    if (specifier == null)
      specifier = base === 10 ? "s" : ",";
    if (typeof specifier !== "function") {
      if (!(base % 1) && (specifier = formatSpecifier(specifier)).precision == null)
        specifier.trim = true;
      specifier = format(specifier);
    }
    if (count === Infinity)
      return specifier;
    const k2 = Math.max(1, base * count / scale.ticks().length);
    return (d) => {
      let i = d / pows(Math.round(logs(d)));
      if (i * base < base - 0.5)
        i *= base;
      return i <= k2 ? specifier(d) : "";
    };
  };
  scale.nice = () => {
    return domain(nice(domain(), {
      floor: (x) => pows(Math.floor(logs(x))),
      ceil: (x) => pows(Math.ceil(logs(x)))
    }));
  };
  return scale;
}
function log() {
  const scale = loggish(transformer()).domain([1, 10]);
  scale.copy = () => copy(scale, log()).base(scale.base());
  initRange.apply(scale, arguments);
  return scale;
}
// node_modules/d3-scale/src/symlog.js
function transformSymlog(c) {
  return function(x) {
    return Math.sign(x) * Math.log1p(Math.abs(x / c));
  };
}
function transformSymexp(c) {
  return function(x) {
    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
  };
}
function symlogish(transform) {
  var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));
  scale.constant = function(_) {
    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
  };
  return linearish(scale);
}
function symlog() {
  var scale = symlogish(transformer());
  scale.copy = function() {
    return copy(scale, symlog()).constant(scale.constant());
  };
  return initRange.apply(scale, arguments);
}
// node_modules/d3-scale/src/pow.js
function transformPow(exponent) {
  return function(x) {
    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
  };
}
function transformSqrt(x) {
  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
}
function transformSquare(x) {
  return x < 0 ? -x * x : x * x;
}
function powish(transform) {
  var scale = transform(identity, identity), exponent = 1;
  function rescale() {
    return exponent === 1 ? transform(identity, identity) : exponent === 0.5 ? transform(transformSqrt, transformSquare) : transform(transformPow(exponent), transformPow(1 / exponent));
  }
  scale.exponent = function(_) {
    return arguments.length ? (exponent = +_, rescale()) : exponent;
  };
  return linearish(scale);
}
function pow() {
  var scale = powish(transformer());
  scale.copy = function() {
    return copy(scale, pow()).exponent(scale.exponent());
  };
  initRange.apply(scale, arguments);
  return scale;
}
function sqrt() {
  return pow.apply(null, arguments).exponent(0.5);
}
// node_modules/d3-scale/src/quantile.js
function quantile2() {
  var domain = [], range2 = [], thresholds = [], unknown;
  function rescale() {
    var i = 0, n = Math.max(1, range2.length);
    thresholds = new Array(n - 1);
    while (++i < n)
      thresholds[i - 1] = quantileSorted(domain, i / n);
    return scale;
  }
  function scale(x) {
    return x == null || isNaN(x = +x) ? unknown : range2[bisect_default(thresholds, x)];
  }
  scale.invertExtent = function(y) {
    var i = range2.indexOf(y);
    return i < 0 ? [NaN, NaN] : [
      i > 0 ? thresholds[i - 1] : domain[0],
      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
    ];
  };
  scale.domain = function(_) {
    if (!arguments.length)
      return domain.slice();
    domain = [];
    for (let d of _)
      if (d != null && !isNaN(d = +d))
        domain.push(d);
    domain.sort(ascending);
    return rescale();
  };
  scale.range = function(_) {
    return arguments.length ? (range2 = Array.from(_), rescale()) : range2.slice();
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  scale.quantiles = function() {
    return thresholds.slice();
  };
  scale.copy = function() {
    return quantile2().domain(domain).range(range2).unknown(unknown);
  };
  return initRange.apply(scale, arguments);
}
// node_modules/d3-scale/src/quantize.js
function quantize() {
  var x0 = 0, x1 = 1, n = 1, domain = [0.5], range2 = [0, 1], unknown;
  function scale(x) {
    return x != null && x <= x ? range2[bisect_default(domain, x, 0, n)] : unknown;
  }
  function rescale() {
    var i = -1;
    domain = new Array(n);
    while (++i < n)
      domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
    return scale;
  }
  scale.domain = function(_) {
    return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];
  };
  scale.range = function(_) {
    return arguments.length ? (n = (range2 = Array.from(_)).length - 1, rescale()) : range2.slice();
  };
  scale.invertExtent = function(y) {
    var i = range2.indexOf(y);
    return i < 0 ? [NaN, NaN] : i < 1 ? [x0, domain[0]] : i >= n ? [domain[n - 1], x1] : [domain[i - 1], domain[i]];
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : scale;
  };
  scale.thresholds = function() {
    return domain.slice();
  };
  scale.copy = function() {
    return quantize().domain([x0, x1]).range(range2).unknown(unknown);
  };
  return initRange.apply(linearish(scale), arguments);
}
// node_modules/d3-scale/src/threshold.js
function threshold() {
  var domain = [0.5], range2 = [0, 1], unknown, n = 1;
  function scale(x) {
    return x != null && x <= x ? range2[bisect_default(domain, x, 0, n)] : unknown;
  }
  scale.domain = function(_) {
    return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range2.length - 1), scale) : domain.slice();
  };
  scale.range = function(_) {
    return arguments.length ? (range2 = Array.from(_), n = Math.min(domain.length, range2.length - 1), scale) : range2.slice();
  };
  scale.invertExtent = function(y) {
    var i = range2.indexOf(y);
    return [domain[i - 1], domain[i]];
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  scale.copy = function() {
    return threshold().domain(domain).range(range2).unknown(unknown);
  };
  return initRange.apply(scale, arguments);
}
// node_modules/d3-time/src/interval.js
var t02 = new Date;
var t12 = new Date;
function timeInterval(floori, offseti, count, field) {
  function interval(date) {
    return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;
  }
  interval.floor = (date) => {
    return floori(date = new Date(+date)), date;
  };
  interval.ceil = (date) => {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };
  interval.round = (date) => {
    const d0 = interval(date), d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };
  interval.offset = (date, step) => {
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };
  interval.range = (start, stop, step) => {
    const range2 = [];
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0))
      return range2;
    let previous;
    do
      range2.push(previous = new Date(+start)), offseti(start, step), floori(start);
    while (previous < start && start < stop);
    return range2;
  };
  interval.filter = (test) => {
    return timeInterval((date) => {
      if (date >= date)
        while (floori(date), !test(date))
          date.setTime(date - 1);
    }, (date, step) => {
      if (date >= date) {
        if (step < 0)
          while (++step <= 0) {
            while (offseti(date, -1), !test(date)) {
            }
          }
        else
          while (--step >= 0) {
            while (offseti(date, 1), !test(date)) {
            }
          }
      }
    });
  };
  if (count) {
    interval.count = (start, end) => {
      t02.setTime(+start), t12.setTime(+end);
      floori(t02), floori(t12);
      return Math.floor(count(t02, t12));
    };
    interval.every = (step) => {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? (d) => field(d) % step === 0 : (d) => interval.count(0, d) % step === 0);
    };
  }
  return interval;
}

// node_modules/d3-time/src/millisecond.js
var millisecond = timeInterval(() => {
}, (date, step) => {
  date.setTime(+date + step);
}, (start, end) => {
  return end - start;
});
millisecond.every = (k2) => {
  k2 = Math.floor(k2);
  if (!isFinite(k2) || !(k2 > 0))
    return null;
  if (!(k2 > 1))
    return millisecond;
  return timeInterval((date) => {
    date.setTime(Math.floor(date / k2) * k2);
  }, (date, step) => {
    date.setTime(+date + step * k2);
  }, (start, end) => {
    return (end - start) / k2;
  });
};
var milliseconds = millisecond.range;

// node_modules/d3-time/src/duration.js
var durationSecond = 1000;
var durationMinute = durationSecond * 60;
var durationHour = durationMinute * 60;
var durationDay = durationHour * 24;
var durationWeek = durationDay * 7;
var durationMonth = durationDay * 30;
var durationYear = durationDay * 365;

// node_modules/d3-time/src/second.js
var second = timeInterval((date) => {
  date.setTime(date - date.getMilliseconds());
}, (date, step) => {
  date.setTime(+date + step * durationSecond);
}, (start, end) => {
  return (end - start) / durationSecond;
}, (date) => {
  return date.getUTCSeconds();
});
var seconds = second.range;
// node_modules/d3-time/src/minute.js
var timeMinute = timeInterval((date) => {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
}, (date, step) => {
  date.setTime(+date + step * durationMinute);
}, (start, end) => {
  return (end - start) / durationMinute;
}, (date) => {
  return date.getMinutes();
});
var timeMinutes = timeMinute.range;
var utcMinute = timeInterval((date) => {
  date.setUTCSeconds(0, 0);
}, (date, step) => {
  date.setTime(+date + step * durationMinute);
}, (start, end) => {
  return (end - start) / durationMinute;
}, (date) => {
  return date.getUTCMinutes();
});
var utcMinutes = utcMinute.range;
// node_modules/d3-time/src/hour.js
var timeHour = timeInterval((date) => {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
}, (date, step) => {
  date.setTime(+date + step * durationHour);
}, (start, end) => {
  return (end - start) / durationHour;
}, (date) => {
  return date.getHours();
});
var timeHours = timeHour.range;
var utcHour = timeInterval((date) => {
  date.setUTCMinutes(0, 0, 0);
}, (date, step) => {
  date.setTime(+date + step * durationHour);
}, (start, end) => {
  return (end - start) / durationHour;
}, (date) => {
  return date.getUTCHours();
});
var utcHours = utcHour.range;
// node_modules/d3-time/src/day.js
var timeDay = timeInterval((date) => date.setHours(0, 0, 0, 0), (date, step) => date.setDate(date.getDate() + step), (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay, (date) => date.getDate() - 1);
var timeDays = timeDay.range;
var utcDay = timeInterval((date) => {
  date.setUTCHours(0, 0, 0, 0);
}, (date, step) => {
  date.setUTCDate(date.getUTCDate() + step);
}, (start, end) => {
  return (end - start) / durationDay;
}, (date) => {
  return date.getUTCDate() - 1;
});
var utcDays = utcDay.range;
var unixDay = timeInterval((date) => {
  date.setUTCHours(0, 0, 0, 0);
}, (date, step) => {
  date.setUTCDate(date.getUTCDate() + step);
}, (start, end) => {
  return (end - start) / durationDay;
}, (date) => {
  return Math.floor(date / durationDay);
});
var unixDays = unixDay.range;
// node_modules/d3-time/src/week.js
function timeWeekday(i) {
  return timeInterval((date) => {
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
    date.setHours(0, 0, 0, 0);
  }, (date, step) => {
    date.setDate(date.getDate() + step * 7);
  }, (start, end) => {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}
var timeSunday = timeWeekday(0);
var timeMonday = timeWeekday(1);
var timeTuesday = timeWeekday(2);
var timeWednesday = timeWeekday(3);
var timeThursday = timeWeekday(4);
var timeFriday = timeWeekday(5);
var timeSaturday = timeWeekday(6);
var timeSundays = timeSunday.range;
var timeMondays = timeMonday.range;
var timeTuesdays = timeTuesday.range;
var timeWednesdays = timeWednesday.range;
var timeThursdays = timeThursday.range;
var timeFridays = timeFriday.range;
var timeSaturdays = timeSaturday.range;
function utcWeekday(i) {
  return timeInterval((date) => {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, (date, step) => {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, (start, end) => {
    return (end - start) / durationWeek;
  });
}
var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);
var utcSundays = utcSunday.range;
var utcMondays = utcMonday.range;
var utcTuesdays = utcTuesday.range;
var utcWednesdays = utcWednesday.range;
var utcThursdays = utcThursday.range;
var utcFridays = utcFriday.range;
var utcSaturdays = utcSaturday.range;
// node_modules/d3-time/src/month.js
var timeMonth = timeInterval((date) => {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, (date, step) => {
  date.setMonth(date.getMonth() + step);
}, (start, end) => {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, (date) => {
  return date.getMonth();
});
var timeMonths = timeMonth.range;
var utcMonth = timeInterval((date) => {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, (date, step) => {
  date.setUTCMonth(date.getUTCMonth() + step);
}, (start, end) => {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, (date) => {
  return date.getUTCMonth();
});
var utcMonths = utcMonth.range;
// node_modules/d3-time/src/year.js
var timeYear = timeInterval((date) => {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, (date, step) => {
  date.setFullYear(date.getFullYear() + step);
}, (start, end) => {
  return end.getFullYear() - start.getFullYear();
}, (date) => {
  return date.getFullYear();
});
timeYear.every = (k2) => {
  return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : timeInterval((date) => {
    date.setFullYear(Math.floor(date.getFullYear() / k2) * k2);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, (date, step) => {
    date.setFullYear(date.getFullYear() + step * k2);
  });
};
var timeYears = timeYear.range;
var utcYear = timeInterval((date) => {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, (date, step) => {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, (start, end) => {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, (date) => {
  return date.getUTCFullYear();
});
utcYear.every = (k2) => {
  return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : timeInterval((date) => {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k2) * k2);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, (date, step) => {
    date.setUTCFullYear(date.getUTCFullYear() + step * k2);
  });
};
var utcYears = utcYear.range;
// node_modules/d3-time/src/ticks.js
function ticker(year, month, week, day, hour, minute) {
  const tickIntervals = [
    [second, 1, durationSecond],
    [second, 5, 5 * durationSecond],
    [second, 15, 15 * durationSecond],
    [second, 30, 30 * durationSecond],
    [minute, 1, durationMinute],
    [minute, 5, 5 * durationMinute],
    [minute, 15, 15 * durationMinute],
    [minute, 30, 30 * durationMinute],
    [hour, 1, durationHour],
    [hour, 3, 3 * durationHour],
    [hour, 6, 6 * durationHour],
    [hour, 12, 12 * durationHour],
    [day, 1, durationDay],
    [day, 2, 2 * durationDay],
    [week, 1, durationWeek],
    [month, 1, durationMonth],
    [month, 3, 3 * durationMonth],
    [year, 1, durationYear]
  ];
  function ticks2(start, stop, count) {
    const reverse = stop < start;
    if (reverse)
      [start, stop] = [stop, start];
    const interval = count && typeof count.range === "function" ? count : tickInterval(start, stop, count);
    const ticks3 = interval ? interval.range(start, +stop + 1) : [];
    return reverse ? ticks3.reverse() : ticks3;
  }
  function tickInterval(start, stop, count) {
    const target = Math.abs(stop - start) / count;
    const i = bisector(([, , step2]) => step2).right(tickIntervals, target);
    if (i === tickIntervals.length)
      return year.every(tickStep(start / durationYear, stop / durationYear, count));
    if (i === 0)
      return millisecond.every(Math.max(tickStep(start, stop, count), 1));
    const [t, step] = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
    return t.every(step);
  }
  return [ticks2, tickInterval];
}
var [utcTicks, utcTickInterval] = ticker(utcYear, utcMonth, utcSunday, unixDay, utcHour, utcMinute);
var [timeTicks, timeTickInterval] = ticker(timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute);
// node_modules/d3-time-format/src/locale.js
function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}
function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}
function newDate(y, m, d) {
  return { y, m, d, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale(locale2) {
  var { dateTime: locale_dateTime, date: locale_date, time: locale_time, periods: locale_periods, days: locale_weekdays, shortDays: locale_shortWeekdays, months: locale_months, shortMonths: locale_shortMonths } = locale2;
  var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    a: formatShortWeekday,
    A: formatWeekday,
    b: formatShortMonth,
    B: formatMonth,
    c: null,
    d: formatDayOfMonth,
    e: formatDayOfMonth,
    f: formatMicroseconds,
    g: formatYearISO,
    G: formatFullYearISO,
    H: formatHour24,
    I: formatHour12,
    j: formatDayOfYear,
    L: formatMilliseconds,
    m: formatMonthNumber,
    M: formatMinutes,
    p: formatPeriod,
    q: formatQuarter,
    Q: formatUnixTimestamp,
    s: formatUnixTimestampSeconds,
    S: formatSeconds,
    u: formatWeekdayNumberMonday,
    U: formatWeekNumberSunday,
    V: formatWeekNumberISO,
    w: formatWeekdayNumberSunday,
    W: formatWeekNumberMonday,
    x: null,
    X: null,
    y: formatYear,
    Y: formatFullYear,
    Z: formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    a: formatUTCShortWeekday,
    A: formatUTCWeekday,
    b: formatUTCShortMonth,
    B: formatUTCMonth,
    c: null,
    d: formatUTCDayOfMonth,
    e: formatUTCDayOfMonth,
    f: formatUTCMicroseconds,
    g: formatUTCYearISO,
    G: formatUTCFullYearISO,
    H: formatUTCHour24,
    I: formatUTCHour12,
    j: formatUTCDayOfYear,
    L: formatUTCMilliseconds,
    m: formatUTCMonthNumber,
    M: formatUTCMinutes,
    p: formatUTCPeriod,
    q: formatUTCQuarter,
    Q: formatUnixTimestamp,
    s: formatUnixTimestampSeconds,
    S: formatUTCSeconds,
    u: formatUTCWeekdayNumberMonday,
    U: formatUTCWeekNumberSunday,
    V: formatUTCWeekNumberISO,
    w: formatUTCWeekdayNumberSunday,
    W: formatUTCWeekNumberMonday,
    x: null,
    X: null,
    y: formatUTCYear,
    Y: formatUTCFullYear,
    Z: formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    a: parseShortWeekday,
    A: parseWeekday,
    b: parseShortMonth,
    B: parseMonth,
    c: parseLocaleDateTime,
    d: parseDayOfMonth,
    e: parseDayOfMonth,
    f: parseMicroseconds,
    g: parseYear,
    G: parseFullYear,
    H: parseHour24,
    I: parseHour24,
    j: parseDayOfYear,
    L: parseMilliseconds,
    m: parseMonthNumber,
    M: parseMinutes,
    p: parsePeriod,
    q: parseQuarter,
    Q: parseUnixTimestamp,
    s: parseUnixTimestampSeconds,
    S: parseSeconds,
    u: parseWeekdayNumberMonday,
    U: parseWeekNumberSunday,
    V: parseWeekNumberISO,
    w: parseWeekdayNumberSunday,
    W: parseWeekNumberMonday,
    x: parseLocaleDate,
    X: parseLocaleTime,
    y: parseYear,
    Y: parseFullYear,
    Z: parseZone,
    "%": parseLiteralPercent
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date) {
      var string = [], i = -1, j2 = 0, n = specifier.length, c, pad, format2;
      if (!(date instanceof Date))
        date = new Date(+date);
      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j2, i));
          if ((pad = pads[c = specifier.charAt(++i)]) != null)
            c = specifier.charAt(++i);
          else
            pad = c === "e" ? " " : "0";
          if (format2 = formats2[c])
            c = format2(date, pad);
          string.push(c);
          j2 = i + 1;
        }
      }
      string.push(specifier.slice(j2, i));
      return string.join("");
    };
  }
  function newParse(specifier, Z) {
    return function(string) {
      var d = newDate(1900, undefined, 1), i = parseSpecifier(d, specifier, string += "", 0), week, day;
      if (i != string.length)
        return null;
      if ("Q" in d)
        return new Date(d.Q);
      if ("s" in d)
        return new Date(d.s * 1000 + ("L" in d ? d.L : 0));
      if (Z && !("Z" in d))
        d.Z = 0;
      if ("p" in d)
        d.H = d.H % 12 + d.p * 12;
      if (d.m === undefined)
        d.m = "q" in d ? d.q : 0;
      if ("V" in d) {
        if (d.V < 1 || d.V > 53)
          return null;
        if (!("w" in d))
          d.w = 1;
        if ("Z" in d) {
          week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
          week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);
          week = utcDay.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
          week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week);
          week = timeDay.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d))
          d.w = "u" in d ? d.u % 7 : ("W" in d) ? 1 : 0;
        day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
      }
      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      }
      return localDate(d);
    };
  }
  function parseSpecifier(d, specifier, string, j2) {
    var i = 0, n = specifier.length, m = string.length, c, parse;
    while (i < n) {
      if (j2 >= m)
        return -1;
      c = specifier.charCodeAt(i++);
      if (c === 37) {
        c = specifier.charAt(i++);
        parse = parses[c in pads ? specifier.charAt(i++) : c];
        if (!parse || (j2 = parse(d, string, j2)) < 0)
          return -1;
      } else if (c != string.charCodeAt(j2++)) {
        return -1;
      }
    }
    return j2;
  }
  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }
  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }
  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }
  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }
  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }
  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }
  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }
  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }
  function formatQuarter(d) {
    return 1 + ~~(d.getMonth() / 3);
  }
  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }
  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }
  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }
  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }
  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d) {
    return 1 + ~~(d.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f = newFormat(specifier += "", formats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    parse: function(specifier) {
      var p2 = newParse(specifier += "", false);
      p2.toString = function() {
        return specifier;
      };
      return p2;
    },
    utcFormat: function(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    utcParse: function(specifier) {
      var p2 = newParse(specifier += "", true);
      p2.toString = function() {
        return specifier;
      };
      return p2;
    }
  };
}
var pads = { "-": "", _: " ", "0": "0" };
var numberRe = /^\s*\d+/;
var percentRe = /^%/;
var requoteRe = /[\\^$*+?|[\]().{}]/g;
function pad(value, fill, width) {
  var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}
function requote(s) {
  return s.replace(requoteRe, "\\$&");
}
function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}
function formatLookup(names) {
  return new Map(names.map((name, i) => [name.toLowerCase(), i]));
}
function parseWeekdayNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}
function parseWeekdayNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberISO(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}
function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}
function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
}
function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}
function parseQuarter(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
}
function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}
function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}
function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}
function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}
function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}
function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}
function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}
function parseMicroseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
}
function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}
function parseUnixTimestamp(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}
function parseUnixTimestampSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.s = +n[0], i + n[0].length) : -1;
}
function formatDayOfMonth(d, p2) {
  return pad(d.getDate(), p2, 2);
}
function formatHour24(d, p2) {
  return pad(d.getHours(), p2, 2);
}
function formatHour12(d, p2) {
  return pad(d.getHours() % 12 || 12, p2, 2);
}
function formatDayOfYear(d, p2) {
  return pad(1 + timeDay.count(timeYear(d), d), p2, 3);
}
function formatMilliseconds(d, p2) {
  return pad(d.getMilliseconds(), p2, 3);
}
function formatMicroseconds(d, p2) {
  return formatMilliseconds(d, p2) + "000";
}
function formatMonthNumber(d, p2) {
  return pad(d.getMonth() + 1, p2, 2);
}
function formatMinutes(d, p2) {
  return pad(d.getMinutes(), p2, 2);
}
function formatSeconds(d, p2) {
  return pad(d.getSeconds(), p2, 2);
}
function formatWeekdayNumberMonday(d) {
  var day = d.getDay();
  return day === 0 ? 7 : day;
}
function formatWeekNumberSunday(d, p2) {
  return pad(timeSunday.count(timeYear(d) - 1, d), p2, 2);
}
function dISO(d) {
  var day = d.getDay();
  return day >= 4 || day === 0 ? timeThursday(d) : timeThursday.ceil(d);
}
function formatWeekNumberISO(d, p2) {
  d = dISO(d);
  return pad(timeThursday.count(timeYear(d), d) + (timeYear(d).getDay() === 4), p2, 2);
}
function formatWeekdayNumberSunday(d) {
  return d.getDay();
}
function formatWeekNumberMonday(d, p2) {
  return pad(timeMonday.count(timeYear(d) - 1, d), p2, 2);
}
function formatYear(d, p2) {
  return pad(d.getFullYear() % 100, p2, 2);
}
function formatYearISO(d, p2) {
  d = dISO(d);
  return pad(d.getFullYear() % 100, p2, 2);
}
function formatFullYear(d, p2) {
  return pad(d.getFullYear() % 1e4, p2, 4);
}
function formatFullYearISO(d, p2) {
  var day = d.getDay();
  d = day >= 4 || day === 0 ? timeThursday(d) : timeThursday.ceil(d);
  return pad(d.getFullYear() % 1e4, p2, 4);
}
function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
}
function formatUTCDayOfMonth(d, p2) {
  return pad(d.getUTCDate(), p2, 2);
}
function formatUTCHour24(d, p2) {
  return pad(d.getUTCHours(), p2, 2);
}
function formatUTCHour12(d, p2) {
  return pad(d.getUTCHours() % 12 || 12, p2, 2);
}
function formatUTCDayOfYear(d, p2) {
  return pad(1 + utcDay.count(utcYear(d), d), p2, 3);
}
function formatUTCMilliseconds(d, p2) {
  return pad(d.getUTCMilliseconds(), p2, 3);
}
function formatUTCMicroseconds(d, p2) {
  return formatUTCMilliseconds(d, p2) + "000";
}
function formatUTCMonthNumber(d, p2) {
  return pad(d.getUTCMonth() + 1, p2, 2);
}
function formatUTCMinutes(d, p2) {
  return pad(d.getUTCMinutes(), p2, 2);
}
function formatUTCSeconds(d, p2) {
  return pad(d.getUTCSeconds(), p2, 2);
}
function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday(d, p2) {
  return pad(utcSunday.count(utcYear(d) - 1, d), p2, 2);
}
function UTCdISO(d) {
  var day = d.getUTCDay();
  return day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
}
function formatUTCWeekNumberISO(d, p2) {
  d = UTCdISO(d);
  return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p2, 2);
}
function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}
function formatUTCWeekNumberMonday(d, p2) {
  return pad(utcMonday.count(utcYear(d) - 1, d), p2, 2);
}
function formatUTCYear(d, p2) {
  return pad(d.getUTCFullYear() % 100, p2, 2);
}
function formatUTCYearISO(d, p2) {
  d = UTCdISO(d);
  return pad(d.getUTCFullYear() % 100, p2, 2);
}
function formatUTCFullYear(d, p2) {
  return pad(d.getUTCFullYear() % 1e4, p2, 4);
}
function formatUTCFullYearISO(d, p2) {
  var day = d.getUTCDay();
  d = day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
  return pad(d.getUTCFullYear() % 1e4, p2, 4);
}
function formatUTCZone() {
  return "+0000";
}
function formatLiteralPercent() {
  return "%";
}
function formatUnixTimestamp(d) {
  return +d;
}
function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1000);
}

// node_modules/d3-time-format/src/defaultLocale.js
var locale2;
var timeFormat;
var timeParse;
var utcFormat;
var utcParse;
defaultLocale2({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale2(definition) {
  locale2 = formatLocale(definition);
  timeFormat = locale2.format;
  timeParse = locale2.parse;
  utcFormat = locale2.utcFormat;
  utcParse = locale2.utcParse;
  return locale2;
}
// node_modules/d3-scale/src/time.js
function date(t) {
  return new Date(t);
}
function number3(t) {
  return t instanceof Date ? +t : +new Date(+t);
}
function calendar(ticks2, tickInterval, year, month, week, day, hour, minute, second2, format2) {
  var scale = continuous(), invert = scale.invert, domain = scale.domain;
  var formatMillisecond = format2(".%L"), formatSecond = format2(":%S"), formatMinute = format2("%I:%M"), formatHour = format2("%I %p"), formatDay = format2("%a %d"), formatWeek = format2("%b %d"), formatMonth = format2("%B"), formatYear2 = format2("%Y");
  function tickFormat2(date2) {
    return (second2(date2) < date2 ? formatMillisecond : minute(date2) < date2 ? formatSecond : hour(date2) < date2 ? formatMinute : day(date2) < date2 ? formatHour : month(date2) < date2 ? week(date2) < date2 ? formatDay : formatWeek : year(date2) < date2 ? formatMonth : formatYear2)(date2);
  }
  scale.invert = function(y) {
    return new Date(invert(y));
  };
  scale.domain = function(_) {
    return arguments.length ? domain(Array.from(_, number3)) : domain().map(date);
  };
  scale.ticks = function(interval) {
    var d = domain();
    return ticks2(d[0], d[d.length - 1], interval == null ? 10 : interval);
  };
  scale.tickFormat = function(count, specifier) {
    return specifier == null ? tickFormat2 : format2(specifier);
  };
  scale.nice = function(interval) {
    var d = domain();
    if (!interval || typeof interval.range !== "function")
      interval = tickInterval(d[0], d[d.length - 1], interval == null ? 10 : interval);
    return interval ? domain(nice(d, interval)) : scale;
  };
  scale.copy = function() {
    return copy(scale, calendar(ticks2, tickInterval, year, month, week, day, hour, minute, second2, format2));
  };
  return scale;
}
function time() {
  return initRange.apply(calendar(timeTicks, timeTickInterval, timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute, second, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);
}
// node_modules/d3-scale/src/utcTime.js
function utcTime() {
  return initRange.apply(calendar(utcTicks, utcTickInterval, utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);
}
// node_modules/@visx/scale/esm/operators/domain.js
function applyDomain(scale, config) {
  if (config.domain) {
    if ("nice" in scale || "quantiles" in scale) {
      scale.domain(config.domain);
    } else if ("padding" in scale) {
      scale.domain(config.domain);
    } else {
      scale.domain(config.domain);
    }
  }
}

// node_modules/@visx/scale/esm/operators/range.js
function applyRange(scale, config) {
  if (config.range) {
    if ("padding" in scale) {
      scale.range(config.range);
    } else {
      scale.range(config.range);
    }
  }
}

// node_modules/@visx/scale/esm/operators/align.js
function applyAlign(scale, config) {
  if ("align" in scale && "align" in config && typeof config.align !== "undefined") {
    scale.align(config.align);
  }
}

// node_modules/@visx/scale/esm/operators/base.js
function applyBase(scale, config) {
  if ("base" in scale && "base" in config && typeof config.base !== "undefined") {
    scale.base(config.base);
  }
}

// node_modules/@visx/scale/esm/operators/clamp.js
function applyClamp(scale, config) {
  if ("clamp" in scale && "clamp" in config && typeof config.clamp !== "undefined") {
    scale.clamp(config.clamp);
  }
}

// node_modules/@visx/scale/esm/operators/constant.js
function applyConstant(scale, config) {
  if ("constant" in scale && "constant" in config && typeof config.constant !== "undefined") {
    scale.constant(config.constant);
  }
}

// node_modules/@visx/scale/esm/operators/exponent.js
function applyExponent(scale, config) {
  if ("exponent" in scale && "exponent" in config && typeof config.exponent !== "undefined") {
    scale.exponent(config.exponent);
  }
}

// node_modules/@visx/scale/esm/utils/createColorInterpolator.js
var interpolatorMap = {
  lab: lab2,
  hcl: hcl_default,
  "hcl-long": hclLong,
  hsl: hsl_default,
  "hsl-long": hslLong,
  cubehelix: cubehelix_default,
  "cubehelix-long": cubehelixLong,
  rgb: rgb_default
};
function createColorInterpolator(interpolate) {
  switch (interpolate) {
    case "lab":
    case "hcl":
    case "hcl-long":
    case "hsl":
    case "hsl-long":
    case "cubehelix":
    case "cubehelix-long":
    case "rgb":
      return interpolatorMap[interpolate];
    default:
  }
  var { type, gamma: gamma2 } = interpolate;
  var interpolator = interpolatorMap[type];
  return typeof gamma2 === "undefined" ? interpolator : interpolator.gamma(gamma2);
}

// node_modules/@visx/scale/esm/operators/interpolate.js
function applyInterpolate(scale, config) {
  if ("interpolate" in config && "interpolate" in scale && typeof config.interpolate !== "undefined") {
    var interpolator = createColorInterpolator(config.interpolate);
    scale.interpolate(interpolator);
  }
}

// node_modules/@visx/scale/esm/utils/isUtcScale.js
var TEST_TIME = new Date(Date.UTC(2020, 1, 2, 3, 4, 5));
var TEST_FORMAT = "%Y-%m-%d %H:%M";
function isUtcScale(scale) {
  var output = scale.tickFormat(1, TEST_FORMAT)(TEST_TIME);
  return output === "2020-02-02 03:04";
}

// node_modules/@visx/scale/esm/operators/nice.js
var localTimeIntervals = {
  day: timeDay,
  hour: timeHour,
  minute: timeMinute,
  month: timeMonth,
  second,
  week: timeSunday,
  year: timeYear
};
var utcIntervals = {
  day: utcDay,
  hour: utcHour,
  minute: utcMinute,
  month: utcMonth,
  second,
  week: utcSunday,
  year: utcYear
};
function applyNice(scale, config) {
  if ("nice" in config && typeof config.nice !== "undefined" && "nice" in scale) {
    var nice2 = config.nice;
    if (typeof nice2 === "boolean") {
      if (nice2) {
        scale.nice();
      }
    } else if (typeof nice2 === "number") {
      scale.nice(nice2);
    } else {
      var timeScale = scale;
      var isUtc = isUtcScale(timeScale);
      if (typeof nice2 === "string") {
        timeScale.nice(isUtc ? utcIntervals[nice2] : localTimeIntervals[nice2]);
      } else {
        var { interval, step } = nice2;
        var parsedInterval = (isUtc ? utcIntervals[interval] : localTimeIntervals[interval]).every(step);
        if (parsedInterval != null) {
          timeScale.nice(parsedInterval);
        }
      }
    }
  }
}

// node_modules/@visx/scale/esm/operators/padding.js
function applyPadding(scale, config) {
  if ("padding" in scale && "padding" in config && typeof config.padding !== "undefined") {
    scale.padding(config.padding);
  }
  if ("paddingInner" in scale && "paddingInner" in config && typeof config.paddingInner !== "undefined") {
    scale.paddingInner(config.paddingInner);
  }
  if ("paddingOuter" in scale && "paddingOuter" in config && typeof config.paddingOuter !== "undefined") {
    scale.paddingOuter(config.paddingOuter);
  }
}

// node_modules/@visx/scale/esm/operators/reverse.js
function applyReverse(scale, config) {
  if (config.reverse) {
    var reversedRange = scale.range().slice().reverse();
    if ("padding" in scale) {
      scale.range(reversedRange);
    } else {
      scale.range(reversedRange);
    }
  }
}

// node_modules/@visx/scale/esm/operators/round.js
function applyRound(scale, config) {
  if ("round" in config && typeof config.round !== "undefined") {
    if (config.round && "interpolate" in config && typeof config.interpolate !== "undefined") {
      console.warn("[visx/scale/applyRound] ignoring round: scale config contains round and interpolate. only applying interpolate. config:", config);
    } else if ("round" in scale) {
      scale.round(config.round);
    } else if ("interpolate" in scale && config.round) {
      scale.interpolate(round_default);
    }
  }
}

// node_modules/@visx/scale/esm/operators/unknown.js
function applyUnknown(scale, config) {
  if ("unknown" in scale && "unknown" in config && typeof config.unknown !== "undefined") {
    scale.unknown(config.unknown);
  }
}

// node_modules/@visx/scale/esm/operators/zero.js
function applyZero(scale, config) {
  if ("zero" in config && config.zero === true) {
    var domain = scale.domain();
    var a = domain[0], b = domain[1];
    var isDescending = b < a;
    var _ref = isDescending ? [b, a] : [a, b], min = _ref[0], max = _ref[1];
    var domainWithZero = [Math.min(0, min), Math.max(0, max)];
    scale.domain(isDescending ? domainWithZero.reverse() : domainWithZero);
  }
}

// node_modules/@visx/scale/esm/operators/scaleOperator.js
var ALL_OPERATORS = [
  "domain",
  "nice",
  "zero",
  "interpolate",
  "round",
  "range",
  "reverse",
  "align",
  "base",
  "clamp",
  "constant",
  "exponent",
  "padding",
  "unknown"
];
var operators = {
  domain: applyDomain,
  nice: applyNice,
  zero: applyZero,
  interpolate: applyInterpolate,
  round: applyRound,
  align: applyAlign,
  base: applyBase,
  clamp: applyClamp,
  constant: applyConstant,
  exponent: applyExponent,
  padding: applyPadding,
  range: applyRange,
  reverse: applyReverse,
  unknown: applyUnknown
};
function scaleOperator() {
  for (var _len = arguments.length, ops = new Array(_len), _key = 0;_key < _len; _key++) {
    ops[_key] = arguments[_key];
  }
  var selection = new Set(ops);
  var selectedOps = ALL_OPERATORS.filter(function(o) {
    return selection.has(o);
  });
  return function applyOperators(scale, config) {
    if (typeof config !== "undefined") {
      selectedOps.forEach(function(op) {
        operators[op](scale, config);
      });
    }
    return scale;
  };
}

// node_modules/@visx/scale/esm/scales/band.js
var updateBandScale = scaleOperator("domain", "range", "reverse", "align", "padding", "round");
function createBandScale(config) {
  return updateBandScale(band(), config);
}

// node_modules/@visx/scale/esm/scales/point.js
var updatePointScale = scaleOperator("domain", "range", "reverse", "align", "padding", "round");
function createPointScale(config) {
  return updatePointScale(point(), config);
}

// node_modules/@visx/scale/esm/scales/linear.js
var updateLinearScale = scaleOperator("domain", "range", "reverse", "clamp", "interpolate", "nice", "round", "zero");
function createLinearScale(config) {
  return updateLinearScale(linear2(), config);
}

// node_modules/@visx/scale/esm/scales/time.js
var updateTimeScale = scaleOperator("domain", "range", "reverse", "clamp", "interpolate", "nice", "round");
function createTimeScale(config) {
  return updateTimeScale(time(), config);
}

// node_modules/@visx/scale/esm/scales/utc.js
var updateUtcScale = scaleOperator("domain", "range", "reverse", "clamp", "interpolate", "nice", "round");
function createUtcScale(config) {
  return updateUtcScale(utcTime(), config);
}

// node_modules/@visx/scale/esm/scales/log.js
var updateLogScale = scaleOperator("domain", "range", "reverse", "base", "clamp", "interpolate", "nice", "round");
function createLogScale(config) {
  return updateLogScale(log(), config);
}

// node_modules/@visx/scale/esm/scales/power.js
var updatePowScale = scaleOperator("domain", "range", "reverse", "clamp", "exponent", "interpolate", "nice", "round", "zero");
function createPowScale(config) {
  return updatePowScale(pow(), config);
}

// node_modules/@visx/scale/esm/scales/ordinal.js
var updateOrdinalScale = scaleOperator("domain", "range", "reverse", "unknown");
function createOrdinalScale(config) {
  return updateOrdinalScale(ordinal(), config);
}

// node_modules/@visx/scale/esm/scales/quantize.js
var updateQuantizeScale = scaleOperator("domain", "range", "reverse", "nice", "zero");
function createQuantizeScale(config) {
  return updateQuantizeScale(quantize(), config);
}

// node_modules/@visx/scale/esm/scales/quantile.js
var updateQuantileScale = scaleOperator("domain", "range", "reverse");
function createQuantileScale(config) {
  return updateQuantileScale(quantile2(), config);
}

// node_modules/@visx/scale/esm/scales/symlog.js
var updateSymlogScale = scaleOperator("domain", "range", "reverse", "clamp", "constant", "nice", "zero", "round");
function createSymlogScale(config) {
  return updateSymlogScale(symlog(), config);
}

// node_modules/@visx/scale/esm/scales/threshold.js
var updateThresholdScale = scaleOperator("domain", "range", "reverse");
function createThresholdScale(config) {
  return updateThresholdScale(threshold(), config);
}

// node_modules/@visx/scale/esm/scales/squareRoot.js
var updateSqrtScale = scaleOperator("domain", "range", "reverse", "clamp", "interpolate", "nice", "round", "zero");
function createSqrtScale(config) {
  return updateSqrtScale(sqrt(), config);
}

// node_modules/@visx/scale/esm/createScale.js
function createScale(config) {
  if (typeof config !== "undefined" && "type" in config) {
    switch (config.type) {
      case "linear":
        return createLinearScale(config);
      case "log":
        return createLogScale(config);
      case "pow":
        return createPowScale(config);
      case "sqrt":
        return createSqrtScale(config);
      case "symlog":
        return createSymlogScale(config);
      case "time":
        return createTimeScale(config);
      case "utc":
        return createUtcScale(config);
      case "quantile":
        return createQuantileScale(config);
      case "quantize":
        return createQuantizeScale(config);
      case "threshold":
        return createThresholdScale(config);
      case "ordinal":
        return createOrdinalScale(config);
      case "point":
        return createPointScale(config);
      case "band":
        return createBandScale(config);
      default:
    }
  }
  return createLinearScale(config);
}
var createScale_default = createScale;
// node_modules/@visx/scale/esm/utils/scaleCanBeZeroed.js
var zeroableScaleTypes = new Set(["linear", "pow", "quantize", "sqrt", "symlog"]);
function scaleCanBeZeroed(scaleConfig) {
  return zeroableScaleTypes.has(scaleConfig.type);
}
// node_modules/@visx/xychart/esm/context/DataContext.js
var import_react2 = __toESM(require_react(), 1);
var DataContext = /* @__PURE__ */ import_react2.default.createContext({});
var DataContext_default = DataContext;

// node_modules/@visx/xychart/esm/utils/getScaleBandwidth.js
function getScaleBandwidth(scale) {
  var _s$bandwidth;
  var s = scale;
  return s && "bandwidth" in s ? (_s$bandwidth = s == null ? undefined : s.bandwidth()) != null ? _s$bandwidth : 0 : 0;
}

// node_modules/@visx/xychart/esm/typeguards/isValidNumber.js
function isValidNumber(_) {
  return _ != null && typeof _ === "number" && !Number.isNaN(_) && Number.isFinite(_);
}

// node_modules/@react-spring/rafz/dist/react-spring_rafz.modern.mjs
var updateQueue = makeQueue();
var raf = (fn) => schedule(fn, updateQueue);
var writeQueue = makeQueue();
raf.write = (fn) => schedule(fn, writeQueue);
var onStartQueue = makeQueue();
raf.onStart = (fn) => schedule(fn, onStartQueue);
var onFrameQueue = makeQueue();
raf.onFrame = (fn) => schedule(fn, onFrameQueue);
var onFinishQueue = makeQueue();
raf.onFinish = (fn) => schedule(fn, onFinishQueue);
var timeouts = [];
raf.setTimeout = (handler, ms) => {
  const time2 = raf.now() + ms;
  const cancel = () => {
    const i = timeouts.findIndex((t) => t.cancel == cancel);
    if (~i)
      timeouts.splice(i, 1);
    pendingCount -= ~i ? 1 : 0;
  };
  const timeout = { time: time2, handler, cancel };
  timeouts.splice(findTimeout(time2), 0, timeout);
  pendingCount += 1;
  start();
  return timeout;
};
var findTimeout = (time2) => ~(~timeouts.findIndex((t) => t.time > time2) || ~timeouts.length);
raf.cancel = (fn) => {
  onStartQueue.delete(fn);
  onFrameQueue.delete(fn);
  onFinishQueue.delete(fn);
  updateQueue.delete(fn);
  writeQueue.delete(fn);
};
raf.sync = (fn) => {
  sync = true;
  raf.batchedUpdates(fn);
  sync = false;
};
raf.throttle = (fn) => {
  let lastArgs;
  function queuedFn() {
    try {
      fn(...lastArgs);
    } finally {
      lastArgs = null;
    }
  }
  function throttled(...args) {
    lastArgs = args;
    raf.onStart(queuedFn);
  }
  throttled.handler = fn;
  throttled.cancel = () => {
    onStartQueue.delete(queuedFn);
    lastArgs = null;
  };
  return throttled;
};
var nativeRaf = typeof window != "undefined" ? window.requestAnimationFrame : () => {
};
raf.use = (impl) => nativeRaf = impl;
raf.now = typeof performance != "undefined" ? () => performance.now() : Date.now;
raf.batchedUpdates = (fn) => fn();
raf.catch = console.error;
raf.frameLoop = "always";
raf.advance = () => {
  if (raf.frameLoop !== "demand") {
    console.warn("Cannot call the manual advancement of rafz whilst frameLoop is not set as demand");
  } else {
    update();
  }
};
var ts = -1;
var pendingCount = 0;
var sync = false;
function schedule(fn, queue) {
  if (sync) {
    queue.delete(fn);
    fn(0);
  } else {
    queue.add(fn);
    start();
  }
}
function start() {
  if (ts < 0) {
    ts = 0;
    if (raf.frameLoop !== "demand") {
      nativeRaf(loop);
    }
  }
}
function stop() {
  ts = -1;
}
function loop() {
  if (~ts) {
    nativeRaf(loop);
    raf.batchedUpdates(update);
  }
}
function update() {
  const prevTs = ts;
  ts = raf.now();
  const count = findTimeout(ts);
  if (count) {
    eachSafely(timeouts.splice(0, count), (t) => t.handler());
    pendingCount -= count;
  }
  if (!pendingCount) {
    stop();
    return;
  }
  onStartQueue.flush();
  updateQueue.flush(prevTs ? Math.min(64, ts - prevTs) : 16.667);
  onFrameQueue.flush();
  writeQueue.flush();
  onFinishQueue.flush();
}
function makeQueue() {
  let next = /* @__PURE__ */ new Set;
  let current = next;
  return {
    add(fn) {
      pendingCount += current == next && !next.has(fn) ? 1 : 0;
      next.add(fn);
    },
    delete(fn) {
      pendingCount -= current == next && next.has(fn) ? 1 : 0;
      return next.delete(fn);
    },
    flush(arg) {
      if (current.size) {
        next = /* @__PURE__ */ new Set;
        pendingCount -= current.size;
        eachSafely(current, (fn) => fn(arg) && next.add(fn));
        pendingCount += next.size;
        current = next;
      }
    }
  };
}
function eachSafely(values, each) {
  values.forEach((value) => {
    try {
      each(value);
    } catch (e) {
      raf.catch(e);
    }
  });
}

// node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs
var import_react3 = __toESM(require_react(), 1);
var import_react4 = __toESM(require_react(), 1);
var import_react5 = __toESM(require_react(), 1);
var import_react6 = __toESM(require_react(), 1);
var import_react7 = __toESM(require_react(), 1);
var import_react8 = __toESM(require_react(), 1);
var import_react9 = __toESM(require_react(), 1);
var import_react10 = __toESM(require_react(), 1);
var __defProp2 = Object.defineProperty;
var __export2 = (target, all) => {
  for (var name in all)
    __defProp2(target, name, { get: all[name], enumerable: true });
};
var globals_exports = {};
__export2(globals_exports, {
  assign: () => assign,
  colors: () => colors,
  createStringInterpolator: () => createStringInterpolator,
  skipAnimation: () => skipAnimation,
  to: () => to,
  willAdvance: () => willAdvance
});
function noop() {
}
var defineHidden = (obj, key, value) => Object.defineProperty(obj, key, { value, writable: true, configurable: true });
var is = {
  arr: Array.isArray,
  obj: (a) => !!a && a.constructor.name === "Object",
  fun: (a) => typeof a === "function",
  str: (a) => typeof a === "string",
  num: (a) => typeof a === "number",
  und: (a) => a === undefined
};
function isEqual(a, b) {
  if (is.arr(a)) {
    if (!is.arr(b) || a.length !== b.length)
      return false;
    for (let i = 0;i < a.length; i++) {
      if (a[i] !== b[i])
        return false;
    }
    return true;
  }
  return a === b;
}
var each = (obj, fn) => obj.forEach(fn);
function eachProp(obj, fn, ctx) {
  if (is.arr(obj)) {
    for (let i = 0;i < obj.length; i++) {
      fn.call(ctx, obj[i], `${i}`);
    }
    return;
  }
  for (const key in obj) {
    if (obj.hasOwnProperty(key)) {
      fn.call(ctx, obj[key], key);
    }
  }
}
var toArray = (a) => is.und(a) ? [] : is.arr(a) ? a : [a];
function flush(queue, iterator) {
  if (queue.size) {
    const items = Array.from(queue);
    queue.clear();
    each(items, iterator);
  }
}
var flushCalls = (queue, ...args) => flush(queue, (fn) => fn(...args));
var isSSR = () => typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
var createStringInterpolator;
var to;
var colors = null;
var skipAnimation = false;
var willAdvance = noop;
var assign = (globals) => {
  if (globals.to)
    to = globals.to;
  if (globals.now)
    raf.now = globals.now;
  if (globals.colors !== undefined)
    colors = globals.colors;
  if (globals.skipAnimation != null)
    skipAnimation = globals.skipAnimation;
  if (globals.createStringInterpolator)
    createStringInterpolator = globals.createStringInterpolator;
  if (globals.requestAnimationFrame)
    raf.use(globals.requestAnimationFrame);
  if (globals.batchedUpdates)
    raf.batchedUpdates = globals.batchedUpdates;
  if (globals.willAdvance)
    willAdvance = globals.willAdvance;
  if (globals.frameLoop)
    raf.frameLoop = globals.frameLoop;
};
var startQueue = /* @__PURE__ */ new Set;
var currentFrame = [];
var prevFrame = [];
var priority = 0;
var frameLoop = {
  get idle() {
    return !startQueue.size && !currentFrame.length;
  },
  start(animation) {
    if (priority > animation.priority) {
      startQueue.add(animation);
      raf.onStart(flushStartQueue);
    } else {
      startSafely(animation);
      raf(advance);
    }
  },
  advance,
  sort(animation) {
    if (priority) {
      raf.onFrame(() => frameLoop.sort(animation));
    } else {
      const prevIndex = currentFrame.indexOf(animation);
      if (~prevIndex) {
        currentFrame.splice(prevIndex, 1);
        startUnsafely(animation);
      }
    }
  },
  clear() {
    currentFrame = [];
    startQueue.clear();
  }
};
function flushStartQueue() {
  startQueue.forEach(startSafely);
  startQueue.clear();
  raf(advance);
}
function startSafely(animation) {
  if (!currentFrame.includes(animation))
    startUnsafely(animation);
}
function startUnsafely(animation) {
  currentFrame.splice(findIndex(currentFrame, (other) => other.priority > animation.priority), 0, animation);
}
function advance(dt) {
  const nextFrame = prevFrame;
  for (let i = 0;i < currentFrame.length; i++) {
    const animation = currentFrame[i];
    priority = animation.priority;
    if (!animation.idle) {
      willAdvance(animation);
      animation.advance(dt);
      if (!animation.idle) {
        nextFrame.push(animation);
      }
    }
  }
  priority = 0;
  prevFrame = currentFrame;
  prevFrame.length = 0;
  currentFrame = nextFrame;
  return currentFrame.length > 0;
}
function findIndex(arr, test) {
  const index = arr.findIndex(test);
  return index < 0 ? arr.length : index;
}
var clamp = (min, max, v) => Math.min(Math.max(v, min), max);
var colors2 = {
  transparent: 0,
  aliceblue: 4042850303,
  antiquewhite: 4209760255,
  aqua: 16777215,
  aquamarine: 2147472639,
  azure: 4043309055,
  beige: 4126530815,
  bisque: 4293182719,
  black: 255,
  blanchedalmond: 4293643775,
  blue: 65535,
  blueviolet: 2318131967,
  brown: 2771004159,
  burlywood: 3736635391,
  burntsienna: 3934150143,
  cadetblue: 1604231423,
  chartreuse: 2147418367,
  chocolate: 3530104575,
  coral: 4286533887,
  cornflowerblue: 1687547391,
  cornsilk: 4294499583,
  crimson: 3692313855,
  cyan: 16777215,
  darkblue: 35839,
  darkcyan: 9145343,
  darkgoldenrod: 3095792639,
  darkgray: 2846468607,
  darkgreen: 6553855,
  darkgrey: 2846468607,
  darkkhaki: 3182914559,
  darkmagenta: 2332068863,
  darkolivegreen: 1433087999,
  darkorange: 4287365375,
  darkorchid: 2570243327,
  darkred: 2332033279,
  darksalmon: 3918953215,
  darkseagreen: 2411499519,
  darkslateblue: 1211993087,
  darkslategray: 793726975,
  darkslategrey: 793726975,
  darkturquoise: 13554175,
  darkviolet: 2483082239,
  deeppink: 4279538687,
  deepskyblue: 12582911,
  dimgray: 1768516095,
  dimgrey: 1768516095,
  dodgerblue: 512819199,
  firebrick: 2988581631,
  floralwhite: 4294635775,
  forestgreen: 579543807,
  fuchsia: 4278255615,
  gainsboro: 3705462015,
  ghostwhite: 4177068031,
  gold: 4292280575,
  goldenrod: 3668254975,
  gray: 2155905279,
  green: 8388863,
  greenyellow: 2919182335,
  grey: 2155905279,
  honeydew: 4043305215,
  hotpink: 4285117695,
  indianred: 3445382399,
  indigo: 1258324735,
  ivory: 4294963455,
  khaki: 4041641215,
  lavender: 3873897215,
  lavenderblush: 4293981695,
  lawngreen: 2096890111,
  lemonchiffon: 4294626815,
  lightblue: 2916673279,
  lightcoral: 4034953471,
  lightcyan: 3774873599,
  lightgoldenrodyellow: 4210742015,
  lightgray: 3553874943,
  lightgreen: 2431553791,
  lightgrey: 3553874943,
  lightpink: 4290167295,
  lightsalmon: 4288707327,
  lightseagreen: 548580095,
  lightskyblue: 2278488831,
  lightslategray: 2005441023,
  lightslategrey: 2005441023,
  lightsteelblue: 2965692159,
  lightyellow: 4294959359,
  lime: 16711935,
  limegreen: 852308735,
  linen: 4210091775,
  magenta: 4278255615,
  maroon: 2147483903,
  mediumaquamarine: 1724754687,
  mediumblue: 52735,
  mediumorchid: 3126187007,
  mediumpurple: 2473647103,
  mediumseagreen: 1018393087,
  mediumslateblue: 2070474495,
  mediumspringgreen: 16423679,
  mediumturquoise: 1221709055,
  mediumvioletred: 3340076543,
  midnightblue: 421097727,
  mintcream: 4127193855,
  mistyrose: 4293190143,
  moccasin: 4293178879,
  navajowhite: 4292783615,
  navy: 33023,
  oldlace: 4260751103,
  olive: 2155872511,
  olivedrab: 1804477439,
  orange: 4289003775,
  orangered: 4282712319,
  orchid: 3664828159,
  palegoldenrod: 4008225535,
  palegreen: 2566625535,
  paleturquoise: 2951671551,
  palevioletred: 3681588223,
  papayawhip: 4293907967,
  peachpuff: 4292524543,
  peru: 3448061951,
  pink: 4290825215,
  plum: 3718307327,
  powderblue: 2967529215,
  purple: 2147516671,
  rebeccapurple: 1714657791,
  red: 4278190335,
  rosybrown: 3163525119,
  royalblue: 1097458175,
  saddlebrown: 2336560127,
  salmon: 4202722047,
  sandybrown: 4104413439,
  seagreen: 780883967,
  seashell: 4294307583,
  sienna: 2689740287,
  silver: 3233857791,
  skyblue: 2278484991,
  slateblue: 1784335871,
  slategray: 1887473919,
  slategrey: 1887473919,
  snow: 4294638335,
  springgreen: 16744447,
  steelblue: 1182971135,
  tan: 3535047935,
  teal: 8421631,
  thistle: 3636451583,
  tomato: 4284696575,
  turquoise: 1088475391,
  violet: 4001558271,
  wheat: 4125012991,
  white: 4294967295,
  whitesmoke: 4126537215,
  yellow: 4294902015,
  yellowgreen: 2597139199
};
var NUMBER = "[-+]?\\d*\\.?\\d+";
var PERCENTAGE = NUMBER + "%";
function call(...parts) {
  return "\\(\\s*(" + parts.join(")\\s*,\\s*(") + ")\\s*\\)";
}
var rgb2 = new RegExp("rgb" + call(NUMBER, NUMBER, NUMBER));
var rgba2 = new RegExp("rgba" + call(NUMBER, NUMBER, NUMBER, NUMBER));
var hsl3 = new RegExp("hsl" + call(NUMBER, PERCENTAGE, PERCENTAGE));
var hsla2 = new RegExp("hsla" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));
var hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex6 = /^#([0-9a-fA-F]{6})$/;
var hex8 = /^#([0-9a-fA-F]{8})$/;
function normalizeColor(color2) {
  let match;
  if (typeof color2 === "number") {
    return color2 >>> 0 === color2 && color2 >= 0 && color2 <= 4294967295 ? color2 : null;
  }
  if (match = hex6.exec(color2))
    return parseInt(match[1] + "ff", 16) >>> 0;
  if (colors && colors[color2] !== undefined) {
    return colors[color2];
  }
  if (match = rgb2.exec(color2)) {
    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 255) >>> 0;
  }
  if (match = rgba2.exec(color2)) {
    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
  }
  if (match = hex3.exec(color2)) {
    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + "ff", 16) >>> 0;
  }
  if (match = hex8.exec(color2))
    return parseInt(match[1], 16) >>> 0;
  if (match = hex4.exec(color2)) {
    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
  }
  if (match = hsl3.exec(color2)) {
    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 255) >>> 0;
  }
  if (match = hsla2.exec(color2)) {
    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
  }
  return null;
}
function hue2rgb(p2, q, t) {
  if (t < 0)
    t += 1;
  if (t > 1)
    t -= 1;
  if (t < 1 / 6)
    return p2 + (q - p2) * 6 * t;
  if (t < 1 / 2)
    return q;
  if (t < 2 / 3)
    return p2 + (q - p2) * (2 / 3 - t) * 6;
  return p2;
}
function hslToRgb(h, s, l) {
  const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
  const p2 = 2 * l - q;
  const r = hue2rgb(p2, q, h + 1 / 3);
  const g2 = hue2rgb(p2, q, h);
  const b = hue2rgb(p2, q, h - 1 / 3);
  return Math.round(r * 255) << 24 | Math.round(g2 * 255) << 16 | Math.round(b * 255) << 8;
}
function parse255(str) {
  const int = parseInt(str, 10);
  if (int < 0)
    return 0;
  if (int > 255)
    return 255;
  return int;
}
function parse360(str) {
  const int = parseFloat(str);
  return (int % 360 + 360) % 360 / 360;
}
function parse1(str) {
  const num = parseFloat(str);
  if (num < 0)
    return 0;
  if (num > 1)
    return 255;
  return Math.round(num * 255);
}
function parsePercentage(str) {
  const int = parseFloat(str);
  if (int < 0)
    return 0;
  if (int > 100)
    return 1;
  return int / 100;
}
function colorToRgba(input) {
  let int32Color = normalizeColor(input);
  if (int32Color === null)
    return input;
  int32Color = int32Color || 0;
  const r = (int32Color & 4278190080) >>> 24;
  const g2 = (int32Color & 16711680) >>> 16;
  const b = (int32Color & 65280) >>> 8;
  const a = (int32Color & 255) / 255;
  return `rgba(${r}, ${g2}, ${b}, ${a})`;
}
var createInterpolator = (range2, output, extrapolate) => {
  if (is.fun(range2)) {
    return range2;
  }
  if (is.arr(range2)) {
    return createInterpolator({
      range: range2,
      output,
      extrapolate
    });
  }
  if (is.str(range2.output[0])) {
    return createStringInterpolator(range2);
  }
  const config = range2;
  const outputRange = config.output;
  const inputRange = config.range || [0, 1];
  const extrapolateLeft = config.extrapolateLeft || config.extrapolate || "extend";
  const extrapolateRight = config.extrapolateRight || config.extrapolate || "extend";
  const easing = config.easing || ((t) => t);
  return (input) => {
    const range22 = findRange(input, inputRange);
    return interpolate(input, inputRange[range22], inputRange[range22 + 1], outputRange[range22], outputRange[range22 + 1], easing, extrapolateLeft, extrapolateRight, config.map);
  };
};
function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map2) {
  let result = map2 ? map2(input) : input;
  if (result < inputMin) {
    if (extrapolateLeft === "identity")
      return result;
    else if (extrapolateLeft === "clamp")
      result = inputMin;
  }
  if (result > inputMax) {
    if (extrapolateRight === "identity")
      return result;
    else if (extrapolateRight === "clamp")
      result = inputMax;
  }
  if (outputMin === outputMax)
    return outputMin;
  if (inputMin === inputMax)
    return input <= inputMin ? outputMin : outputMax;
  if (inputMin === -Infinity)
    result = -result;
  else if (inputMax === Infinity)
    result = result - inputMin;
  else
    result = (result - inputMin) / (inputMax - inputMin);
  result = easing(result);
  if (outputMin === -Infinity)
    result = -result;
  else if (outputMax === Infinity)
    result = result + outputMin;
  else
    result = result * (outputMax - outputMin) + outputMin;
  return result;
}
function findRange(input, inputRange) {
  for (var i = 1;i < inputRange.length - 1; ++i)
    if (inputRange[i] >= input)
      break;
  return i - 1;
}
var steps = (steps2, direction = "end") => (progress2) => {
  progress2 = direction === "end" ? Math.min(progress2, 0.999) : Math.max(progress2, 0.001);
  const expanded = progress2 * steps2;
  const rounded = direction === "end" ? Math.floor(expanded) : Math.ceil(expanded);
  return clamp(0, 1, rounded / steps2);
};
var c1 = 1.70158;
var c2 = c1 * 1.525;
var c3 = c1 + 1;
var c4 = 2 * Math.PI / 3;
var c5 = 2 * Math.PI / 4.5;
var bounceOut = (x) => {
  const n1 = 7.5625;
  const d1 = 2.75;
  if (x < 1 / d1) {
    return n1 * x * x;
  } else if (x < 2 / d1) {
    return n1 * (x -= 1.5 / d1) * x + 0.75;
  } else if (x < 2.5 / d1) {
    return n1 * (x -= 2.25 / d1) * x + 0.9375;
  } else {
    return n1 * (x -= 2.625 / d1) * x + 0.984375;
  }
};
var easings = {
  linear: (x) => x,
  easeInQuad: (x) => x * x,
  easeOutQuad: (x) => 1 - (1 - x) * (1 - x),
  easeInOutQuad: (x) => x < 0.5 ? 2 * x * x : 1 - Math.pow(-2 * x + 2, 2) / 2,
  easeInCubic: (x) => x * x * x,
  easeOutCubic: (x) => 1 - Math.pow(1 - x, 3),
  easeInOutCubic: (x) => x < 0.5 ? 4 * x * x * x : 1 - Math.pow(-2 * x + 2, 3) / 2,
  easeInQuart: (x) => x * x * x * x,
  easeOutQuart: (x) => 1 - Math.pow(1 - x, 4),
  easeInOutQuart: (x) => x < 0.5 ? 8 * x * x * x * x : 1 - Math.pow(-2 * x + 2, 4) / 2,
  easeInQuint: (x) => x * x * x * x * x,
  easeOutQuint: (x) => 1 - Math.pow(1 - x, 5),
  easeInOutQuint: (x) => x < 0.5 ? 16 * x * x * x * x * x : 1 - Math.pow(-2 * x + 2, 5) / 2,
  easeInSine: (x) => 1 - Math.cos(x * Math.PI / 2),
  easeOutSine: (x) => Math.sin(x * Math.PI / 2),
  easeInOutSine: (x) => -(Math.cos(Math.PI * x) - 1) / 2,
  easeInExpo: (x) => x === 0 ? 0 : Math.pow(2, 10 * x - 10),
  easeOutExpo: (x) => x === 1 ? 1 : 1 - Math.pow(2, -10 * x),
  easeInOutExpo: (x) => x === 0 ? 0 : x === 1 ? 1 : x < 0.5 ? Math.pow(2, 20 * x - 10) / 2 : (2 - Math.pow(2, -20 * x + 10)) / 2,
  easeInCirc: (x) => 1 - Math.sqrt(1 - Math.pow(x, 2)),
  easeOutCirc: (x) => Math.sqrt(1 - Math.pow(x - 1, 2)),
  easeInOutCirc: (x) => x < 0.5 ? (1 - Math.sqrt(1 - Math.pow(2 * x, 2))) / 2 : (Math.sqrt(1 - Math.pow(-2 * x + 2, 2)) + 1) / 2,
  easeInBack: (x) => c3 * x * x * x - c1 * x * x,
  easeOutBack: (x) => 1 + c3 * Math.pow(x - 1, 3) + c1 * Math.pow(x - 1, 2),
  easeInOutBack: (x) => x < 0.5 ? Math.pow(2 * x, 2) * ((c2 + 1) * 2 * x - c2) / 2 : (Math.pow(2 * x - 2, 2) * ((c2 + 1) * (x * 2 - 2) + c2) + 2) / 2,
  easeInElastic: (x) => x === 0 ? 0 : x === 1 ? 1 : -Math.pow(2, 10 * x - 10) * Math.sin((x * 10 - 10.75) * c4),
  easeOutElastic: (x) => x === 0 ? 0 : x === 1 ? 1 : Math.pow(2, -10 * x) * Math.sin((x * 10 - 0.75) * c4) + 1,
  easeInOutElastic: (x) => x === 0 ? 0 : x === 1 ? 1 : x < 0.5 ? -(Math.pow(2, 20 * x - 10) * Math.sin((20 * x - 11.125) * c5)) / 2 : Math.pow(2, -20 * x + 10) * Math.sin((20 * x - 11.125) * c5) / 2 + 1,
  easeInBounce: (x) => 1 - bounceOut(1 - x),
  easeOutBounce: bounceOut,
  easeInOutBounce: (x) => x < 0.5 ? (1 - bounceOut(1 - 2 * x)) / 2 : (1 + bounceOut(2 * x - 1)) / 2,
  steps
};
var $get = Symbol.for("FluidValue.get");
var $observers = Symbol.for("FluidValue.observers");
var hasFluidValue = (arg) => Boolean(arg && arg[$get]);
var getFluidValue = (arg) => arg && arg[$get] ? arg[$get]() : arg;
var getFluidObservers = (target) => target[$observers] || null;
function callFluidObserver(observer2, event) {
  if (observer2.eventObserved) {
    observer2.eventObserved(event);
  } else {
    observer2(event);
  }
}
function callFluidObservers(target, event) {
  const observers = target[$observers];
  if (observers) {
    observers.forEach((observer2) => {
      callFluidObserver(observer2, event);
    });
  }
}
var FluidValue = class {
  constructor(get) {
    if (!get && !(get = this.get)) {
      throw Error("Unknown getter");
    }
    setFluidGetter(this, get);
  }
};
var setFluidGetter = (target, get) => setHidden(target, $get, get);
function addFluidObserver(target, observer2) {
  if (target[$get]) {
    let observers = target[$observers];
    if (!observers) {
      setHidden(target, $observers, observers = /* @__PURE__ */ new Set);
    }
    if (!observers.has(observer2)) {
      observers.add(observer2);
      if (target.observerAdded) {
        target.observerAdded(observers.size, observer2);
      }
    }
  }
  return observer2;
}
function removeFluidObserver(target, observer2) {
  const observers = target[$observers];
  if (observers && observers.has(observer2)) {
    const count = observers.size - 1;
    if (count) {
      observers.delete(observer2);
    } else {
      target[$observers] = null;
    }
    if (target.observerRemoved) {
      target.observerRemoved(count, observer2);
    }
  }
}
var setHidden = (target, key, value) => Object.defineProperty(target, key, {
  value,
  writable: true,
  configurable: true
});
var numberRegex = /[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
var colorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d\.]+%?\))/gi;
var unitRegex = new RegExp(`(${numberRegex.source})(%|[a-z]+)`, "i");
var rgbaRegex = /rgba\(([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+)\)/gi;
var cssVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
var variableToRgba = (input) => {
  const [token, fallback] = parseCSSVariable(input);
  if (!token || isSSR()) {
    return input;
  }
  const value = window.getComputedStyle(document.documentElement).getPropertyValue(token);
  if (value) {
    return value.trim();
  } else if (fallback && fallback.startsWith("--")) {
    const value2 = window.getComputedStyle(document.documentElement).getPropertyValue(fallback);
    if (value2) {
      return value2;
    } else {
      return input;
    }
  } else if (fallback && cssVariableRegex.test(fallback)) {
    return variableToRgba(fallback);
  } else if (fallback) {
    return fallback;
  }
  return input;
};
var parseCSSVariable = (current) => {
  const match = cssVariableRegex.exec(current);
  if (!match)
    return [,];
  const [, token, fallback] = match;
  return [token, fallback];
};
var namedColorRegex;
var rgbaRound = (_, p1, p2, p3, p4) => `rgba(${Math.round(p1)}, ${Math.round(p2)}, ${Math.round(p3)}, ${p4})`;
var createStringInterpolator2 = (config) => {
  if (!namedColorRegex)
    namedColorRegex = colors ? new RegExp(`(${Object.keys(colors).join("|")})(?!\\w)`, "g") : /^\b$/;
  const output = config.output.map((value) => {
    return getFluidValue(value).replace(cssVariableRegex, variableToRgba).replace(colorRegex, colorToRgba).replace(namedColorRegex, colorToRgba);
  });
  const keyframes = output.map((value) => value.match(numberRegex).map(Number));
  const outputRanges = keyframes[0].map((_, i) => keyframes.map((values) => {
    if (!(i in values)) {
      throw Error('The arity of each "output" value must be equal');
    }
    return values[i];
  }));
  const interpolators = outputRanges.map((output2) => createInterpolator({ ...config, output: output2 }));
  return (input) => {
    const missingUnit = !unitRegex.test(output[0]) && output.find((value) => unitRegex.test(value))?.replace(numberRegex, "");
    let i = 0;
    return output[0].replace(numberRegex, () => `${interpolators[i++](input)}${missingUnit || ""}`).replace(rgbaRegex, rgbaRound);
  };
};
var prefix = "react-spring: ";
var once = (fn) => {
  const func = fn;
  let called = false;
  if (typeof func != "function") {
    throw new TypeError(`${prefix}once requires a function parameter`);
  }
  return (...args) => {
    if (!called) {
      func(...args);
      called = true;
    }
  };
};
var warnInterpolate = once(console.warn);
function deprecateInterpolate() {
  warnInterpolate(`${prefix}The "interpolate" function is deprecated in v9 (use "to" instead)`);
}
var warnDirectCall = once(console.warn);
function deprecateDirectCall() {
  warnDirectCall(`${prefix}Directly calling start instead of using the api object is deprecated in v9 (use ".start" instead), this will be removed in later 0.X.0 versions`);
}
function isAnimatedString(value) {
  return is.str(value) && (value[0] == "#" || /\d/.test(value) || !isSSR() && cssVariableRegex.test(value) || (value in (colors || {})));
}
var useIsomorphicLayoutEffect = isSSR() ? import_react6.useEffect : import_react6.useLayoutEffect;
var useIsMounted = () => {
  const isMounted = import_react5.useRef(false);
  useIsomorphicLayoutEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return isMounted;
};
function useForceUpdate() {
  const update2 = import_react4.useState()[1];
  const isMounted = useIsMounted();
  return () => {
    if (isMounted.current) {
      update2(Math.random());
    }
  };
}
function useMemoOne(getResult, inputs) {
  const [initial] = import_react7.useState(() => ({
    inputs,
    result: getResult()
  }));
  const committed = import_react7.useRef();
  const prevCache = committed.current;
  let cache = prevCache;
  if (cache) {
    const useCache = Boolean(inputs && cache.inputs && areInputsEqual(inputs, cache.inputs));
    if (!useCache) {
      cache = {
        inputs,
        result: getResult()
      };
    }
  } else {
    cache = initial;
  }
  import_react7.useEffect(() => {
    committed.current = cache;
    if (prevCache == initial) {
      initial.inputs = initial.result = undefined;
    }
  }, [cache]);
  return cache.result;
}
function areInputsEqual(next, prev) {
  if (next.length !== prev.length) {
    return false;
  }
  for (let i = 0;i < next.length; i++) {
    if (next[i] !== prev[i]) {
      return false;
    }
  }
  return true;
}
var useOnce = (effect) => import_react8.useEffect(effect, emptyDeps);
var emptyDeps = [];
function usePrev(value) {
  const prevRef = import_react9.useRef();
  import_react9.useEffect(() => {
    prevRef.current = value;
  });
  return prevRef.current;
}

// node_modules/@react-spring/core/dist/react-spring_core.modern.mjs
var import_react12 = __toESM(require_react(), 1);

// node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs
var React2 = __toESM(require_react(), 1);
var import_react11 = __toESM(require_react(), 1);
var $node = Symbol.for("Animated:node");
var isAnimated = (value) => !!value && value[$node] === value;
var getAnimated = (owner) => owner && owner[$node];
var setAnimated = (owner, node) => defineHidden(owner, $node, node);
var getPayload = (owner) => owner && owner[$node] && owner[$node].getPayload();
var Animated = class {
  constructor() {
    setAnimated(this, this);
  }
  getPayload() {
    return this.payload || [];
  }
};
var AnimatedValue = class extends Animated {
  constructor(_value) {
    super();
    this._value = _value;
    this.done = true;
    this.durationProgress = 0;
    if (is.num(this._value)) {
      this.lastPosition = this._value;
    }
  }
  static create(value) {
    return new AnimatedValue(value);
  }
  getPayload() {
    return [this];
  }
  getValue() {
    return this._value;
  }
  setValue(value, step) {
    if (is.num(value)) {
      this.lastPosition = value;
      if (step) {
        value = Math.round(value / step) * step;
        if (this.done) {
          this.lastPosition = value;
        }
      }
    }
    if (this._value === value) {
      return false;
    }
    this._value = value;
    return true;
  }
  reset() {
    const { done } = this;
    this.done = false;
    if (is.num(this._value)) {
      this.elapsedTime = 0;
      this.durationProgress = 0;
      this.lastPosition = this._value;
      if (done)
        this.lastVelocity = null;
      this.v0 = null;
    }
  }
};
var AnimatedString = class extends AnimatedValue {
  constructor(value) {
    super(0);
    this._string = null;
    this._toString = createInterpolator({
      output: [value, value]
    });
  }
  static create(value) {
    return new AnimatedString(value);
  }
  getValue() {
    const value = this._string;
    return value == null ? this._string = this._toString(this._value) : value;
  }
  setValue(value) {
    if (is.str(value)) {
      if (value == this._string) {
        return false;
      }
      this._string = value;
      this._value = 1;
    } else if (super.setValue(value)) {
      this._string = null;
    } else {
      return false;
    }
    return true;
  }
  reset(goal) {
    if (goal) {
      this._toString = createInterpolator({
        output: [this.getValue(), goal]
      });
    }
    this._value = 0;
    super.reset();
  }
};
var TreeContext = { dependencies: null };
var AnimatedObject = class extends Animated {
  constructor(source) {
    super();
    this.source = source;
    this.setValue(source);
  }
  getValue(animated) {
    const values = {};
    eachProp(this.source, (source, key) => {
      if (isAnimated(source)) {
        values[key] = source.getValue(animated);
      } else if (hasFluidValue(source)) {
        values[key] = getFluidValue(source);
      } else if (!animated) {
        values[key] = source;
      }
    });
    return values;
  }
  setValue(source) {
    this.source = source;
    this.payload = this._makePayload(source);
  }
  reset() {
    if (this.payload) {
      each(this.payload, (node) => node.reset());
    }
  }
  _makePayload(source) {
    if (source) {
      const payload = /* @__PURE__ */ new Set;
      eachProp(source, this._addToPayload, payload);
      return Array.from(payload);
    }
  }
  _addToPayload(source) {
    if (TreeContext.dependencies && hasFluidValue(source)) {
      TreeContext.dependencies.add(source);
    }
    const payload = getPayload(source);
    if (payload) {
      each(payload, (node) => this.add(node));
    }
  }
};
var AnimatedArray = class extends AnimatedObject {
  constructor(source) {
    super(source);
  }
  static create(source) {
    return new AnimatedArray(source);
  }
  getValue() {
    return this.source.map((node) => node.getValue());
  }
  setValue(source) {
    const payload = this.getPayload();
    if (source.length == payload.length) {
      return payload.map((node, i) => node.setValue(source[i])).some(Boolean);
    }
    super.setValue(source.map(makeAnimated));
    return true;
  }
};
function makeAnimated(value) {
  const nodeType = isAnimatedString(value) ? AnimatedString : AnimatedValue;
  return nodeType.create(value);
}
function getAnimatedType(value) {
  const parentNode = getAnimated(value);
  return parentNode ? parentNode.constructor : is.arr(value) ? AnimatedArray : isAnimatedString(value) ? AnimatedString : AnimatedValue;
}
var withAnimated = (Component, host) => {
  const hasInstance = !is.fun(Component) || Component.prototype && Component.prototype.isReactComponent;
  return import_react11.forwardRef((givenProps, givenRef) => {
    const instanceRef = import_react11.useRef(null);
    const ref = hasInstance && import_react11.useCallback((value) => {
      instanceRef.current = updateRef(givenRef, value);
    }, [givenRef]);
    const [props, deps] = getAnimatedState(givenProps, host);
    const forceUpdate = useForceUpdate();
    const callback = () => {
      const instance = instanceRef.current;
      if (hasInstance && !instance) {
        return;
      }
      const didUpdate = instance ? host.applyAnimatedValues(instance, props.getValue(true)) : false;
      if (didUpdate === false) {
        forceUpdate();
      }
    };
    const observer = new PropsObserver(callback, deps);
    const observerRef = import_react11.useRef();
    useIsomorphicLayoutEffect(() => {
      observerRef.current = observer;
      each(deps, (dep) => addFluidObserver(dep, observer));
      return () => {
        if (observerRef.current) {
          each(observerRef.current.deps, (dep) => removeFluidObserver(dep, observerRef.current));
          raf.cancel(observerRef.current.update);
        }
      };
    });
    import_react11.useEffect(callback, []);
    useOnce(() => () => {
      const observer2 = observerRef.current;
      each(observer2.deps, (dep) => removeFluidObserver(dep, observer2));
    });
    const usedProps = host.getComponentProps(props.getValue());
    return /* @__PURE__ */ React2.createElement(Component, { ...usedProps, ref });
  });
};
var PropsObserver = class {
  constructor(update2, deps) {
    this.update = update2;
    this.deps = deps;
  }
  eventObserved(event) {
    if (event.type == "change") {
      raf.write(this.update);
    }
  }
};
function getAnimatedState(props, host) {
  const dependencies = /* @__PURE__ */ new Set;
  TreeContext.dependencies = dependencies;
  if (props.style)
    props = {
      ...props,
      style: host.createAnimatedStyle(props.style)
    };
  props = new AnimatedObject(props);
  TreeContext.dependencies = null;
  return [props, dependencies];
}
function updateRef(ref, value) {
  if (ref) {
    if (is.fun(ref))
      ref(value);
    else
      ref.current = value;
  }
  return value;
}
var cacheKey = Symbol.for("AnimatedComponent");
var createHost = (components, {
  applyAnimatedValues = () => false,
  createAnimatedStyle = (style) => new AnimatedObject(style),
  getComponentProps = (props) => props
} = {}) => {
  const hostConfig = {
    applyAnimatedValues,
    createAnimatedStyle,
    getComponentProps
  };
  const animated = (Component) => {
    const displayName = getDisplayName(Component) || "Anonymous";
    if (is.str(Component)) {
      Component = animated[Component] || (animated[Component] = withAnimated(Component, hostConfig));
    } else {
      Component = Component[cacheKey] || (Component[cacheKey] = withAnimated(Component, hostConfig));
    }
    Component.displayName = `Animated(${displayName})`;
    return Component;
  };
  eachProp(components, (Component, key) => {
    if (is.arr(components)) {
      key = getDisplayName(Component);
    }
    animated[key] = animated(Component);
  });
  return {
    animated
  };
};
var getDisplayName = (arg) => is.str(arg) ? arg : arg && is.str(arg.displayName) ? arg.displayName : is.fun(arg) && arg.name || null;

// node_modules/@react-spring/core/dist/react-spring_core.modern.mjs
var React3 = __toESM(require_react(), 1);
var import_react13 = __toESM(require_react(), 1);
var import_react14 = __toESM(require_react(), 1);
var React22 = __toESM(require_react(), 1);
var import_react15 = __toESM(require_react(), 1);
var import_react16 = __toESM(require_react(), 1);
function callProp(value, ...args) {
  return is.fun(value) ? value(...args) : value;
}
var matchProp = (value, key) => value === true || !!(key && value && (is.fun(value) ? value(key) : toArray(value).includes(key)));
var resolveProp = (prop, key) => is.obj(prop) ? key && prop[key] : prop;
var getDefaultProp = (props, key) => props.default === true ? props[key] : props.default ? props.default[key] : undefined;
var noopTransform = (value) => value;
var getDefaultProps = (props, transform = noopTransform) => {
  let keys = DEFAULT_PROPS;
  if (props.default && props.default !== true) {
    props = props.default;
    keys = Object.keys(props);
  }
  const defaults2 = {};
  for (const key of keys) {
    const value = transform(props[key], key);
    if (!is.und(value)) {
      defaults2[key] = value;
    }
  }
  return defaults2;
};
var DEFAULT_PROPS = [
  "config",
  "onProps",
  "onStart",
  "onChange",
  "onPause",
  "onResume",
  "onRest"
];
var RESERVED_PROPS = {
  config: 1,
  from: 1,
  to: 1,
  ref: 1,
  loop: 1,
  reset: 1,
  pause: 1,
  cancel: 1,
  reverse: 1,
  immediate: 1,
  default: 1,
  delay: 1,
  onProps: 1,
  onStart: 1,
  onChange: 1,
  onPause: 1,
  onResume: 1,
  onRest: 1,
  onResolve: 1,
  items: 1,
  trail: 1,
  sort: 1,
  expires: 1,
  initial: 1,
  enter: 1,
  update: 1,
  leave: 1,
  children: 1,
  onDestroyed: 1,
  keys: 1,
  callId: 1,
  parentId: 1
};
function getForwardProps(props) {
  const forward = {};
  let count = 0;
  eachProp(props, (value, prop) => {
    if (!RESERVED_PROPS[prop]) {
      forward[prop] = value;
      count++;
    }
  });
  if (count) {
    return forward;
  }
}
function inferTo(props) {
  const to2 = getForwardProps(props);
  if (to2) {
    const out = { to: to2 };
    eachProp(props, (val, key) => (key in to2) || (out[key] = val));
    return out;
  }
  return { ...props };
}
function computeGoal(value) {
  value = getFluidValue(value);
  return is.arr(value) ? value.map(computeGoal) : isAnimatedString(value) ? globals_exports.createStringInterpolator({
    range: [0, 1],
    output: [value, value]
  })(1) : value;
}
function hasProps(props) {
  for (const _ in props)
    return true;
  return false;
}
function isAsyncTo(to2) {
  return is.fun(to2) || is.arr(to2) && is.obj(to2[0]);
}
function detachRefs(ctrl, ref) {
  ctrl.ref?.delete(ctrl);
  ref?.delete(ctrl);
}
function replaceRef(ctrl, ref) {
  if (ref && ctrl.ref !== ref) {
    ctrl.ref?.delete(ctrl);
    ref.add(ctrl);
    ctrl.ref = ref;
  }
}
var config = {
  default: { tension: 170, friction: 26 },
  gentle: { tension: 120, friction: 14 },
  wobbly: { tension: 180, friction: 12 },
  stiff: { tension: 210, friction: 20 },
  slow: { tension: 280, friction: 60 },
  molasses: { tension: 280, friction: 120 }
};
var defaults = {
  ...config.default,
  mass: 1,
  damping: 1,
  easing: easings.linear,
  clamp: false
};
var AnimationConfig = class {
  constructor() {
    this.velocity = 0;
    Object.assign(this, defaults);
  }
};
function mergeConfig(config2, newConfig, defaultConfig) {
  if (defaultConfig) {
    defaultConfig = { ...defaultConfig };
    sanitizeConfig(defaultConfig, newConfig);
    newConfig = { ...defaultConfig, ...newConfig };
  }
  sanitizeConfig(config2, newConfig);
  Object.assign(config2, newConfig);
  for (const key in defaults) {
    if (config2[key] == null) {
      config2[key] = defaults[key];
    }
  }
  let { frequency, damping } = config2;
  const { mass } = config2;
  if (!is.und(frequency)) {
    if (frequency < 0.01)
      frequency = 0.01;
    if (damping < 0)
      damping = 0;
    config2.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;
    config2.friction = 4 * Math.PI * damping * mass / frequency;
  }
  return config2;
}
function sanitizeConfig(config2, props) {
  if (!is.und(props.decay)) {
    config2.duration = undefined;
  } else {
    const isTensionConfig = !is.und(props.tension) || !is.und(props.friction);
    if (isTensionConfig || !is.und(props.frequency) || !is.und(props.damping) || !is.und(props.mass)) {
      config2.duration = undefined;
      config2.decay = undefined;
    }
    if (isTensionConfig) {
      config2.frequency = undefined;
    }
  }
}
var emptyArray = [];
var Animation = class {
  constructor() {
    this.changed = false;
    this.values = emptyArray;
    this.toValues = null;
    this.fromValues = emptyArray;
    this.config = new AnimationConfig;
    this.immediate = false;
  }
};
function scheduleProps(callId, { key, props, defaultProps, state, actions }) {
  return new Promise((resolve, reject) => {
    let delay;
    let timeout;
    let cancel = matchProp(props.cancel ?? defaultProps?.cancel, key);
    if (cancel) {
      onStart();
    } else {
      if (!is.und(props.pause)) {
        state.paused = matchProp(props.pause, key);
      }
      let pause = defaultProps?.pause;
      if (pause !== true) {
        pause = state.paused || matchProp(pause, key);
      }
      delay = callProp(props.delay || 0, key);
      if (pause) {
        state.resumeQueue.add(onResume);
        actions.pause();
      } else {
        actions.resume();
        onResume();
      }
    }
    function onPause() {
      state.resumeQueue.add(onResume);
      state.timeouts.delete(timeout);
      timeout.cancel();
      delay = timeout.time - raf.now();
    }
    function onResume() {
      if (delay > 0 && !globals_exports.skipAnimation) {
        state.delayed = true;
        timeout = raf.setTimeout(onStart, delay);
        state.pauseQueue.add(onPause);
        state.timeouts.add(timeout);
      } else {
        onStart();
      }
    }
    function onStart() {
      if (state.delayed) {
        state.delayed = false;
      }
      state.pauseQueue.delete(onPause);
      state.timeouts.delete(timeout);
      if (callId <= (state.cancelId || 0)) {
        cancel = true;
      }
      try {
        actions.start({ ...props, callId, cancel }, resolve);
      } catch (err) {
        reject(err);
      }
    }
  });
}
var getCombinedResult = (target, results) => results.length == 1 ? results[0] : results.some((result) => result.cancelled) ? getCancelledResult(target.get()) : results.every((result) => result.noop) ? getNoopResult(target.get()) : getFinishedResult(target.get(), results.every((result) => result.finished));
var getNoopResult = (value) => ({
  value,
  noop: true,
  finished: true,
  cancelled: false
});
var getFinishedResult = (value, finished, cancelled = false) => ({
  value,
  finished,
  cancelled
});
var getCancelledResult = (value) => ({
  value,
  cancelled: true,
  finished: false
});
function runAsync(to2, props, state, target) {
  const { callId, parentId, onRest } = props;
  const { asyncTo: prevTo, promise: prevPromise } = state;
  if (!parentId && to2 === prevTo && !props.reset) {
    return prevPromise;
  }
  return state.promise = (async () => {
    state.asyncId = callId;
    state.asyncTo = to2;
    const defaultProps = getDefaultProps(props, (value, key) => key === "onRest" ? undefined : value);
    let preventBail;
    let bail;
    const bailPromise = new Promise((resolve, reject) => (preventBail = resolve, bail = reject));
    const bailIfEnded = (bailSignal) => {
      const bailResult = callId <= (state.cancelId || 0) && getCancelledResult(target) || callId !== state.asyncId && getFinishedResult(target, false);
      if (bailResult) {
        bailSignal.result = bailResult;
        bail(bailSignal);
        throw bailSignal;
      }
    };
    const animate = (arg1, arg2) => {
      const bailSignal = new BailSignal;
      const skipAnimationSignal = new SkipAnimationSignal;
      return (async () => {
        if (globals_exports.skipAnimation) {
          stopAsync(state);
          skipAnimationSignal.result = getFinishedResult(target, false);
          bail(skipAnimationSignal);
          throw skipAnimationSignal;
        }
        bailIfEnded(bailSignal);
        const props2 = is.obj(arg1) ? { ...arg1 } : { ...arg2, to: arg1 };
        props2.parentId = callId;
        eachProp(defaultProps, (value, key) => {
          if (is.und(props2[key])) {
            props2[key] = value;
          }
        });
        const result2 = await target.start(props2);
        bailIfEnded(bailSignal);
        if (state.paused) {
          await new Promise((resume) => {
            state.resumeQueue.add(resume);
          });
        }
        return result2;
      })();
    };
    let result;
    if (globals_exports.skipAnimation) {
      stopAsync(state);
      return getFinishedResult(target, false);
    }
    try {
      let animating;
      if (is.arr(to2)) {
        animating = (async (queue) => {
          for (const props2 of queue) {
            await animate(props2);
          }
        })(to2);
      } else {
        animating = Promise.resolve(to2(animate, target.stop.bind(target)));
      }
      await Promise.all([animating.then(preventBail), bailPromise]);
      result = getFinishedResult(target.get(), true, false);
    } catch (err) {
      if (err instanceof BailSignal) {
        result = err.result;
      } else if (err instanceof SkipAnimationSignal) {
        result = err.result;
      } else {
        throw err;
      }
    } finally {
      if (callId == state.asyncId) {
        state.asyncId = parentId;
        state.asyncTo = parentId ? prevTo : undefined;
        state.promise = parentId ? prevPromise : undefined;
      }
    }
    if (is.fun(onRest)) {
      raf.batchedUpdates(() => {
        onRest(result, target, target.item);
      });
    }
    return result;
  })();
}
function stopAsync(state, cancelId) {
  flush(state.timeouts, (t) => t.cancel());
  state.pauseQueue.clear();
  state.resumeQueue.clear();
  state.asyncId = state.asyncTo = state.promise = undefined;
  if (cancelId)
    state.cancelId = cancelId;
}
var BailSignal = class extends Error {
  constructor() {
    super("An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise.");
  }
};
var SkipAnimationSignal = class extends Error {
  constructor() {
    super("SkipAnimationSignal");
  }
};
var isFrameValue = (value) => value instanceof FrameValue;
var nextId = 1;
var FrameValue = class extends FluidValue {
  constructor() {
    super(...arguments);
    this.id = nextId++;
    this._priority = 0;
  }
  get priority() {
    return this._priority;
  }
  set priority(priority2) {
    if (this._priority != priority2) {
      this._priority = priority2;
      this._onPriorityChange(priority2);
    }
  }
  get() {
    const node = getAnimated(this);
    return node && node.getValue();
  }
  to(...args) {
    return globals_exports.to(this, args);
  }
  interpolate(...args) {
    deprecateInterpolate();
    return globals_exports.to(this, args);
  }
  toJSON() {
    return this.get();
  }
  observerAdded(count) {
    if (count == 1)
      this._attach();
  }
  observerRemoved(count) {
    if (count == 0)
      this._detach();
  }
  _attach() {
  }
  _detach() {
  }
  _onChange(value, idle = false) {
    callFluidObservers(this, {
      type: "change",
      parent: this,
      value,
      idle
    });
  }
  _onPriorityChange(priority2) {
    if (!this.idle) {
      frameLoop.sort(this);
    }
    callFluidObservers(this, {
      type: "priority",
      parent: this,
      priority: priority2
    });
  }
};
var $P = Symbol.for("SpringPhase");
var HAS_ANIMATED = 1;
var IS_ANIMATING = 2;
var IS_PAUSED = 4;
var hasAnimated = (target) => (target[$P] & HAS_ANIMATED) > 0;
var isAnimating = (target) => (target[$P] & IS_ANIMATING) > 0;
var isPaused = (target) => (target[$P] & IS_PAUSED) > 0;
var setActiveBit = (target, active) => active ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;
var setPausedBit = (target, paused) => paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;
var SpringValue = class extends FrameValue {
  constructor(arg1, arg2) {
    super();
    this.animation = new Animation;
    this.defaultProps = {};
    this._state = {
      paused: false,
      delayed: false,
      pauseQueue: /* @__PURE__ */ new Set,
      resumeQueue: /* @__PURE__ */ new Set,
      timeouts: /* @__PURE__ */ new Set
    };
    this._pendingCalls = /* @__PURE__ */ new Set;
    this._lastCallId = 0;
    this._lastToId = 0;
    this._memoizedDuration = 0;
    if (!is.und(arg1) || !is.und(arg2)) {
      const props = is.obj(arg1) ? { ...arg1 } : { ...arg2, from: arg1 };
      if (is.und(props.default)) {
        props.default = true;
      }
      this.start(props);
    }
  }
  get idle() {
    return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);
  }
  get goal() {
    return getFluidValue(this.animation.to);
  }
  get velocity() {
    const node = getAnimated(this);
    return node instanceof AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map((node2) => node2.lastVelocity || 0);
  }
  get hasAnimated() {
    return hasAnimated(this);
  }
  get isAnimating() {
    return isAnimating(this);
  }
  get isPaused() {
    return isPaused(this);
  }
  get isDelayed() {
    return this._state.delayed;
  }
  advance(dt) {
    let idle = true;
    let changed = false;
    const anim = this.animation;
    let { toValues } = anim;
    const { config: config2 } = anim;
    const payload = getPayload(anim.to);
    if (!payload && hasFluidValue(anim.to)) {
      toValues = toArray(getFluidValue(anim.to));
    }
    anim.values.forEach((node2, i) => {
      if (node2.done)
        return;
      const to2 = node2.constructor == AnimatedString ? 1 : payload ? payload[i].lastPosition : toValues[i];
      let finished = anim.immediate;
      let position = to2;
      if (!finished) {
        position = node2.lastPosition;
        if (config2.tension <= 0) {
          node2.done = true;
          return;
        }
        let elapsed = node2.elapsedTime += dt;
        const from = anim.fromValues[i];
        const v0 = node2.v0 != null ? node2.v0 : node2.v0 = is.arr(config2.velocity) ? config2.velocity[i] : config2.velocity;
        let velocity;
        const precision = config2.precision || (from == to2 ? 0.005 : Math.min(1, Math.abs(to2 - from) * 0.001));
        if (!is.und(config2.duration)) {
          let p2 = 1;
          if (config2.duration > 0) {
            if (this._memoizedDuration !== config2.duration) {
              this._memoizedDuration = config2.duration;
              if (node2.durationProgress > 0) {
                node2.elapsedTime = config2.duration * node2.durationProgress;
                elapsed = node2.elapsedTime += dt;
              }
            }
            p2 = (config2.progress || 0) + elapsed / this._memoizedDuration;
            p2 = p2 > 1 ? 1 : p2 < 0 ? 0 : p2;
            node2.durationProgress = p2;
          }
          position = from + config2.easing(p2) * (to2 - from);
          velocity = (position - node2.lastPosition) / dt;
          finished = p2 == 1;
        } else if (config2.decay) {
          const decay = config2.decay === true ? 0.998 : config2.decay;
          const e = Math.exp(-(1 - decay) * elapsed);
          position = from + v0 / (1 - decay) * (1 - e);
          finished = Math.abs(node2.lastPosition - position) <= precision;
          velocity = v0 * e;
        } else {
          velocity = node2.lastVelocity == null ? v0 : node2.lastVelocity;
          const restVelocity = config2.restVelocity || precision / 10;
          const bounceFactor = config2.clamp ? 0 : config2.bounce;
          const canBounce = !is.und(bounceFactor);
          const isGrowing = from == to2 ? node2.v0 > 0 : from < to2;
          let isMoving;
          let isBouncing = false;
          const step = 1;
          const numSteps = Math.ceil(dt / step);
          for (let n = 0;n < numSteps; ++n) {
            isMoving = Math.abs(velocity) > restVelocity;
            if (!isMoving) {
              finished = Math.abs(to2 - position) <= precision;
              if (finished) {
                break;
              }
            }
            if (canBounce) {
              isBouncing = position == to2 || position > to2 == isGrowing;
              if (isBouncing) {
                velocity = -velocity * bounceFactor;
                position = to2;
              }
            }
            const springForce = -config2.tension * 0.000001 * (position - to2);
            const dampingForce = -config2.friction * 0.001 * velocity;
            const acceleration = (springForce + dampingForce) / config2.mass;
            velocity = velocity + acceleration * step;
            position = position + velocity * step;
          }
        }
        node2.lastVelocity = velocity;
        if (Number.isNaN(position)) {
          console.warn(`Got NaN while animating:`, this);
          finished = true;
        }
      }
      if (payload && !payload[i].done) {
        finished = false;
      }
      if (finished) {
        node2.done = true;
      } else {
        idle = false;
      }
      if (node2.setValue(position, config2.round)) {
        changed = true;
      }
    });
    const node = getAnimated(this);
    const currVal = node.getValue();
    if (idle) {
      const finalVal = getFluidValue(anim.to);
      if ((currVal !== finalVal || changed) && !config2.decay) {
        node.setValue(finalVal);
        this._onChange(finalVal);
      } else if (changed && config2.decay) {
        this._onChange(currVal);
      }
      this._stop();
    } else if (changed) {
      this._onChange(currVal);
    }
  }
  set(value) {
    raf.batchedUpdates(() => {
      this._stop();
      this._focus(value);
      this._set(value);
    });
    return this;
  }
  pause() {
    this._update({ pause: true });
  }
  resume() {
    this._update({ pause: false });
  }
  finish() {
    if (isAnimating(this)) {
      const { to: to2, config: config2 } = this.animation;
      raf.batchedUpdates(() => {
        this._onStart();
        if (!config2.decay) {
          this._set(to2, false);
        }
        this._stop();
      });
    }
    return this;
  }
  update(props) {
    const queue = this.queue || (this.queue = []);
    queue.push(props);
    return this;
  }
  start(to2, arg2) {
    let queue;
    if (!is.und(to2)) {
      queue = [is.obj(to2) ? to2 : { ...arg2, to: to2 }];
    } else {
      queue = this.queue || [];
      this.queue = [];
    }
    return Promise.all(queue.map((props) => {
      const up = this._update(props);
      return up;
    })).then((results) => getCombinedResult(this, results));
  }
  stop(cancel) {
    const { to: to2 } = this.animation;
    this._focus(this.get());
    stopAsync(this._state, cancel && this._lastCallId);
    raf.batchedUpdates(() => this._stop(to2, cancel));
    return this;
  }
  reset() {
    this._update({ reset: true });
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._start();
    } else if (event.type == "priority") {
      this.priority = event.priority + 1;
    }
  }
  _prepareNode(props) {
    const key = this.key || "";
    let { to: to2, from } = props;
    to2 = is.obj(to2) ? to2[key] : to2;
    if (to2 == null || isAsyncTo(to2)) {
      to2 = undefined;
    }
    from = is.obj(from) ? from[key] : from;
    if (from == null) {
      from = undefined;
    }
    const range2 = { to: to2, from };
    if (!hasAnimated(this)) {
      if (props.reverse)
        [to2, from] = [from, to2];
      from = getFluidValue(from);
      if (!is.und(from)) {
        this._set(from);
      } else if (!getAnimated(this)) {
        this._set(to2);
      }
    }
    return range2;
  }
  _update({ ...props }, isLoop) {
    const { key, defaultProps } = this;
    if (props.default)
      Object.assign(defaultProps, getDefaultProps(props, (value, prop) => /^on/.test(prop) ? resolveProp(value, key) : value));
    mergeActiveFn(this, props, "onProps");
    sendEvent(this, "onProps", props, this);
    const range2 = this._prepareNode(props);
    if (Object.isFrozen(this)) {
      throw Error("Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?");
    }
    const state = this._state;
    return scheduleProps(++this._lastCallId, {
      key,
      props,
      defaultProps,
      state,
      actions: {
        pause: () => {
          if (!isPaused(this)) {
            setPausedBit(this, true);
            flushCalls(state.pauseQueue);
            sendEvent(this, "onPause", getFinishedResult(this, checkFinished(this, this.animation.to)), this);
          }
        },
        resume: () => {
          if (isPaused(this)) {
            setPausedBit(this, false);
            if (isAnimating(this)) {
              this._resume();
            }
            flushCalls(state.resumeQueue);
            sendEvent(this, "onResume", getFinishedResult(this, checkFinished(this, this.animation.to)), this);
          }
        },
        start: this._merge.bind(this, range2)
      }
    }).then((result) => {
      if (props.loop && result.finished && !(isLoop && result.noop)) {
        const nextProps = createLoopUpdate(props);
        if (nextProps) {
          return this._update(nextProps, true);
        }
      }
      return result;
    });
  }
  _merge(range2, props, resolve) {
    if (props.cancel) {
      this.stop(true);
      return resolve(getCancelledResult(this));
    }
    const hasToProp = !is.und(range2.to);
    const hasFromProp = !is.und(range2.from);
    if (hasToProp || hasFromProp) {
      if (props.callId > this._lastToId) {
        this._lastToId = props.callId;
      } else {
        return resolve(getCancelledResult(this));
      }
    }
    const { key, defaultProps, animation: anim } = this;
    const { to: prevTo, from: prevFrom } = anim;
    let { to: to2 = prevTo, from = prevFrom } = range2;
    if (hasFromProp && !hasToProp && (!props.default || is.und(to2))) {
      to2 = from;
    }
    if (props.reverse)
      [to2, from] = [from, to2];
    const hasFromChanged = !isEqual(from, prevFrom);
    if (hasFromChanged) {
      anim.from = from;
    }
    from = getFluidValue(from);
    const hasToChanged = !isEqual(to2, prevTo);
    if (hasToChanged) {
      this._focus(to2);
    }
    const hasAsyncTo = isAsyncTo(props.to);
    const { config: config2 } = anim;
    const { decay, velocity } = config2;
    if (hasToProp || hasFromProp) {
      config2.velocity = 0;
    }
    if (props.config && !hasAsyncTo) {
      mergeConfig(config2, callProp(props.config, key), props.config !== defaultProps.config ? callProp(defaultProps.config, key) : undefined);
    }
    let node = getAnimated(this);
    if (!node || is.und(to2)) {
      return resolve(getFinishedResult(this, true));
    }
    const reset = is.und(props.reset) ? hasFromProp && !props.default : !is.und(from) && matchProp(props.reset, key);
    const value = reset ? from : this.get();
    const goal = computeGoal(to2);
    const isAnimatable = is.num(goal) || is.arr(goal) || isAnimatedString(goal);
    const immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps.immediate || props.immediate, key));
    if (hasToChanged) {
      const nodeType = getAnimatedType(to2);
      if (nodeType !== node.constructor) {
        if (immediate) {
          node = this._set(goal);
        } else
          throw Error(`Cannot animate between ${node.constructor.name} and ${nodeType.name}, as the "to" prop suggests`);
      }
    }
    const goalType = node.constructor;
    let started = hasFluidValue(to2);
    let finished = false;
    if (!started) {
      const hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;
      if (hasToChanged || hasValueChanged) {
        finished = isEqual(computeGoal(value), goal);
        started = !finished;
      }
      if (!isEqual(anim.immediate, immediate) && !immediate || !isEqual(config2.decay, decay) || !isEqual(config2.velocity, velocity)) {
        started = true;
      }
    }
    if (finished && isAnimating(this)) {
      if (anim.changed && !reset) {
        started = true;
      } else if (!started) {
        this._stop(prevTo);
      }
    }
    if (!hasAsyncTo) {
      if (started || hasFluidValue(prevTo)) {
        anim.values = node.getPayload();
        anim.toValues = hasFluidValue(to2) ? null : goalType == AnimatedString ? [1] : toArray(goal);
      }
      if (anim.immediate != immediate) {
        anim.immediate = immediate;
        if (!immediate && !reset) {
          this._set(prevTo);
        }
      }
      if (started) {
        const { onRest } = anim;
        each(ACTIVE_EVENTS, (type) => mergeActiveFn(this, props, type));
        const result = getFinishedResult(this, checkFinished(this, prevTo));
        flushCalls(this._pendingCalls, result);
        this._pendingCalls.add(resolve);
        if (anim.changed)
          raf.batchedUpdates(() => {
            anim.changed = !reset;
            onRest?.(result, this);
            if (reset) {
              callProp(defaultProps.onRest, result);
            } else {
              anim.onStart?.(result, this);
            }
          });
      }
    }
    if (reset) {
      this._set(value);
    }
    if (hasAsyncTo) {
      resolve(runAsync(props.to, props, this._state, this));
    } else if (started) {
      this._start();
    } else if (isAnimating(this) && !hasToChanged) {
      this._pendingCalls.add(resolve);
    } else {
      resolve(getNoopResult(value));
    }
  }
  _focus(value) {
    const anim = this.animation;
    if (value !== anim.to) {
      if (getFluidObservers(this)) {
        this._detach();
      }
      anim.to = value;
      if (getFluidObservers(this)) {
        this._attach();
      }
    }
  }
  _attach() {
    let priority2 = 0;
    const { to: to2 } = this.animation;
    if (hasFluidValue(to2)) {
      addFluidObserver(to2, this);
      if (isFrameValue(to2)) {
        priority2 = to2.priority + 1;
      }
    }
    this.priority = priority2;
  }
  _detach() {
    const { to: to2 } = this.animation;
    if (hasFluidValue(to2)) {
      removeFluidObserver(to2, this);
    }
  }
  _set(arg, idle = true) {
    const value = getFluidValue(arg);
    if (!is.und(value)) {
      const oldNode = getAnimated(this);
      if (!oldNode || !isEqual(value, oldNode.getValue())) {
        const nodeType = getAnimatedType(value);
        if (!oldNode || oldNode.constructor != nodeType) {
          setAnimated(this, nodeType.create(value));
        } else {
          oldNode.setValue(value);
        }
        if (oldNode) {
          raf.batchedUpdates(() => {
            this._onChange(value, idle);
          });
        }
      }
    }
    return getAnimated(this);
  }
  _onStart() {
    const anim = this.animation;
    if (!anim.changed) {
      anim.changed = true;
      sendEvent(this, "onStart", getFinishedResult(this, checkFinished(this, anim.to)), this);
    }
  }
  _onChange(value, idle) {
    if (!idle) {
      this._onStart();
      callProp(this.animation.onChange, value, this);
    }
    callProp(this.defaultProps.onChange, value, this);
    super._onChange(value, idle);
  }
  _start() {
    const anim = this.animation;
    getAnimated(this).reset(getFluidValue(anim.to));
    if (!anim.immediate) {
      anim.fromValues = anim.values.map((node) => node.lastPosition);
    }
    if (!isAnimating(this)) {
      setActiveBit(this, true);
      if (!isPaused(this)) {
        this._resume();
      }
    }
  }
  _resume() {
    if (globals_exports.skipAnimation) {
      this.finish();
    } else {
      frameLoop.start(this);
    }
  }
  _stop(goal, cancel) {
    if (isAnimating(this)) {
      setActiveBit(this, false);
      const anim = this.animation;
      each(anim.values, (node) => {
        node.done = true;
      });
      if (anim.toValues) {
        anim.onChange = anim.onPause = anim.onResume = undefined;
      }
      callFluidObservers(this, {
        type: "idle",
        parent: this
      });
      const result = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal ?? anim.to));
      flushCalls(this._pendingCalls, result);
      if (anim.changed) {
        anim.changed = false;
        sendEvent(this, "onRest", result, this);
      }
    }
  }
};
function checkFinished(target, to2) {
  const goal = computeGoal(to2);
  const value = computeGoal(target.get());
  return isEqual(value, goal);
}
function createLoopUpdate(props, loop2 = props.loop, to2 = props.to) {
  const loopRet = callProp(loop2);
  if (loopRet) {
    const overrides = loopRet !== true && inferTo(loopRet);
    const reverse = (overrides || props).reverse;
    const reset = !overrides || overrides.reset;
    return createUpdate({
      ...props,
      loop: loop2,
      default: false,
      pause: undefined,
      to: !reverse || isAsyncTo(to2) ? to2 : undefined,
      from: reset ? props.from : undefined,
      reset,
      ...overrides
    });
  }
}
function createUpdate(props) {
  const { to: to2, from } = props = inferTo(props);
  const keys = /* @__PURE__ */ new Set;
  if (is.obj(to2))
    findDefined(to2, keys);
  if (is.obj(from))
    findDefined(from, keys);
  props.keys = keys.size ? Array.from(keys) : null;
  return props;
}
function declareUpdate(props) {
  const update2 = createUpdate(props);
  if (is.und(update2.default)) {
    update2.default = getDefaultProps(update2);
  }
  return update2;
}
function findDefined(values, keys) {
  eachProp(values, (value, key) => value != null && keys.add(key));
}
var ACTIVE_EVENTS = [
  "onStart",
  "onRest",
  "onChange",
  "onPause",
  "onResume"
];
function mergeActiveFn(target, props, type) {
  target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : undefined;
}
function sendEvent(target, type, ...args) {
  target.animation[type]?.(...args);
  target.defaultProps[type]?.(...args);
}
var BATCHED_EVENTS = ["onStart", "onChange", "onRest"];
var nextId2 = 1;
var Controller = class {
  constructor(props, flush3) {
    this.id = nextId2++;
    this.springs = {};
    this.queue = [];
    this._lastAsyncId = 0;
    this._active = /* @__PURE__ */ new Set;
    this._changed = /* @__PURE__ */ new Set;
    this._started = false;
    this._state = {
      paused: false,
      pauseQueue: /* @__PURE__ */ new Set,
      resumeQueue: /* @__PURE__ */ new Set,
      timeouts: /* @__PURE__ */ new Set
    };
    this._events = {
      onStart: /* @__PURE__ */ new Map,
      onChange: /* @__PURE__ */ new Map,
      onRest: /* @__PURE__ */ new Map
    };
    this._onFrame = this._onFrame.bind(this);
    if (flush3) {
      this._flush = flush3;
    }
    if (props) {
      this.start({ default: true, ...props });
    }
  }
  get idle() {
    return !this._state.asyncTo && Object.values(this.springs).every((spring) => {
      return spring.idle && !spring.isDelayed && !spring.isPaused;
    });
  }
  get item() {
    return this._item;
  }
  set item(item) {
    this._item = item;
  }
  get() {
    const values = {};
    this.each((spring, key) => values[key] = spring.get());
    return values;
  }
  set(values) {
    for (const key in values) {
      const value = values[key];
      if (!is.und(value)) {
        this.springs[key].set(value);
      }
    }
  }
  update(props) {
    if (props) {
      this.queue.push(createUpdate(props));
    }
    return this;
  }
  start(props) {
    let { queue } = this;
    if (props) {
      queue = toArray(props).map(createUpdate);
    } else {
      this.queue = [];
    }
    if (this._flush) {
      return this._flush(this, queue);
    }
    prepareKeys(this, queue);
    return flushUpdateQueue(this, queue);
  }
  stop(arg, keys) {
    if (arg !== !!arg) {
      keys = arg;
    }
    if (keys) {
      const springs = this.springs;
      each(toArray(keys), (key) => springs[key].stop(!!arg));
    } else {
      stopAsync(this._state, this._lastAsyncId);
      this.each((spring) => spring.stop(!!arg));
    }
    return this;
  }
  pause(keys) {
    if (is.und(keys)) {
      this.start({ pause: true });
    } else {
      const springs = this.springs;
      each(toArray(keys), (key) => springs[key].pause());
    }
    return this;
  }
  resume(keys) {
    if (is.und(keys)) {
      this.start({ pause: false });
    } else {
      const springs = this.springs;
      each(toArray(keys), (key) => springs[key].resume());
    }
    return this;
  }
  each(iterator) {
    eachProp(this.springs, iterator);
  }
  _onFrame() {
    const { onStart, onChange, onRest } = this._events;
    const active = this._active.size > 0;
    const changed = this._changed.size > 0;
    if (active && !this._started || changed && !this._started) {
      this._started = true;
      flush(onStart, ([onStart2, result]) => {
        result.value = this.get();
        onStart2(result, this, this._item);
      });
    }
    const idle = !active && this._started;
    const values = changed || idle && onRest.size ? this.get() : null;
    if (changed && onChange.size) {
      flush(onChange, ([onChange2, result]) => {
        result.value = values;
        onChange2(result, this, this._item);
      });
    }
    if (idle) {
      this._started = false;
      flush(onRest, ([onRest2, result]) => {
        result.value = values;
        onRest2(result, this, this._item);
      });
    }
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._changed.add(event.parent);
      if (!event.idle) {
        this._active.add(event.parent);
      }
    } else if (event.type == "idle") {
      this._active.delete(event.parent);
    } else
      return;
    raf.onFrame(this._onFrame);
  }
};
function flushUpdateQueue(ctrl, queue) {
  return Promise.all(queue.map((props) => flushUpdate(ctrl, props))).then((results) => getCombinedResult(ctrl, results));
}
async function flushUpdate(ctrl, props, isLoop) {
  const { keys, to: to2, from, loop: loop2, onRest, onResolve } = props;
  const defaults2 = is.obj(props.default) && props.default;
  if (loop2) {
    props.loop = false;
  }
  if (to2 === false)
    props.to = null;
  if (from === false)
    props.from = null;
  const asyncTo = is.arr(to2) || is.fun(to2) ? to2 : undefined;
  if (asyncTo) {
    props.to = undefined;
    props.onRest = undefined;
    if (defaults2) {
      defaults2.onRest = undefined;
    }
  } else {
    each(BATCHED_EVENTS, (key) => {
      const handler = props[key];
      if (is.fun(handler)) {
        const queue = ctrl["_events"][key];
        props[key] = ({ finished, cancelled }) => {
          const result2 = queue.get(handler);
          if (result2) {
            if (!finished)
              result2.finished = false;
            if (cancelled)
              result2.cancelled = true;
          } else {
            queue.set(handler, {
              value: null,
              finished: finished || false,
              cancelled: cancelled || false
            });
          }
        };
        if (defaults2) {
          defaults2[key] = props[key];
        }
      }
    });
  }
  const state = ctrl["_state"];
  if (props.pause === !state.paused) {
    state.paused = props.pause;
    flushCalls(props.pause ? state.pauseQueue : state.resumeQueue);
  } else if (state.paused) {
    props.pause = true;
  }
  const promises = (keys || Object.keys(ctrl.springs)).map((key) => ctrl.springs[key].start(props));
  const cancel = props.cancel === true || getDefaultProp(props, "cancel") === true;
  if (asyncTo || cancel && state.asyncId) {
    promises.push(scheduleProps(++ctrl["_lastAsyncId"], {
      props,
      state,
      actions: {
        pause: noop,
        resume: noop,
        start(props2, resolve) {
          if (cancel) {
            stopAsync(state, ctrl["_lastAsyncId"]);
            resolve(getCancelledResult(ctrl));
          } else {
            props2.onRest = onRest;
            resolve(runAsync(asyncTo, props2, state, ctrl));
          }
        }
      }
    }));
  }
  if (state.paused) {
    await new Promise((resume) => {
      state.resumeQueue.add(resume);
    });
  }
  const result = getCombinedResult(ctrl, await Promise.all(promises));
  if (loop2 && result.finished && !(isLoop && result.noop)) {
    const nextProps = createLoopUpdate(props, loop2, to2);
    if (nextProps) {
      prepareKeys(ctrl, [nextProps]);
      return flushUpdate(ctrl, nextProps, true);
    }
  }
  if (onResolve) {
    raf.batchedUpdates(() => onResolve(result, ctrl, ctrl.item));
  }
  return result;
}
function getSprings(ctrl, props) {
  const springs = { ...ctrl.springs };
  if (props) {
    each(toArray(props), (props2) => {
      if (is.und(props2.keys)) {
        props2 = createUpdate(props2);
      }
      if (!is.obj(props2.to)) {
        props2 = { ...props2, to: undefined };
      }
      prepareSprings(springs, props2, (key) => {
        return createSpring(key);
      });
    });
  }
  setSprings(ctrl, springs);
  return springs;
}
function setSprings(ctrl, springs) {
  eachProp(springs, (spring, key) => {
    if (!ctrl.springs[key]) {
      ctrl.springs[key] = spring;
      addFluidObserver(spring, ctrl);
    }
  });
}
function createSpring(key, observer) {
  const spring = new SpringValue;
  spring.key = key;
  if (observer) {
    addFluidObserver(spring, observer);
  }
  return spring;
}
function prepareSprings(springs, props, create) {
  if (props.keys) {
    each(props.keys, (key) => {
      const spring = springs[key] || (springs[key] = create(key));
      spring["_prepareNode"](props);
    });
  }
}
function prepareKeys(ctrl, queue) {
  each(queue, (props) => {
    prepareSprings(ctrl.springs, props, (key) => {
      return createSpring(key, ctrl);
    });
  });
}
var SpringContext = ({
  children,
  ...props
}) => {
  const inherited = import_react13.useContext(ctx);
  const pause = props.pause || !!inherited.pause, immediate = props.immediate || !!inherited.immediate;
  props = useMemoOne(() => ({ pause, immediate }), [pause, immediate]);
  const { Provider } = ctx;
  return /* @__PURE__ */ React3.createElement(Provider, { value: props }, children);
};
var ctx = makeContext(SpringContext, {});
SpringContext.Provider = ctx.Provider;
SpringContext.Consumer = ctx.Consumer;
function makeContext(target, init) {
  Object.assign(target, React3.createContext(init));
  target.Provider._context = target;
  target.Consumer._context = target;
  return target;
}
var SpringRef = () => {
  const current = [];
  const SpringRef2 = function(props) {
    deprecateDirectCall();
    const results = [];
    each(current, (ctrl, i) => {
      if (is.und(props)) {
        results.push(ctrl.start());
      } else {
        const update2 = _getProps(props, ctrl, i);
        if (update2) {
          results.push(ctrl.start(update2));
        }
      }
    });
    return results;
  };
  SpringRef2.current = current;
  SpringRef2.add = function(ctrl) {
    if (!current.includes(ctrl)) {
      current.push(ctrl);
    }
  };
  SpringRef2.delete = function(ctrl) {
    const i = current.indexOf(ctrl);
    if (~i)
      current.splice(i, 1);
  };
  SpringRef2.pause = function() {
    each(current, (ctrl) => ctrl.pause(...arguments));
    return this;
  };
  SpringRef2.resume = function() {
    each(current, (ctrl) => ctrl.resume(...arguments));
    return this;
  };
  SpringRef2.set = function(values) {
    each(current, (ctrl, i) => {
      const update2 = is.fun(values) ? values(i, ctrl) : values;
      if (update2) {
        ctrl.set(update2);
      }
    });
  };
  SpringRef2.start = function(props) {
    const results = [];
    each(current, (ctrl, i) => {
      if (is.und(props)) {
        results.push(ctrl.start());
      } else {
        const update2 = this._getProps(props, ctrl, i);
        if (update2) {
          results.push(ctrl.start(update2));
        }
      }
    });
    return results;
  };
  SpringRef2.stop = function() {
    each(current, (ctrl) => ctrl.stop(...arguments));
    return this;
  };
  SpringRef2.update = function(props) {
    each(current, (ctrl, i) => ctrl.update(this._getProps(props, ctrl, i)));
    return this;
  };
  const _getProps = function(arg, ctrl, index) {
    return is.fun(arg) ? arg(index, ctrl) : arg;
  };
  SpringRef2._getProps = _getProps;
  return SpringRef2;
};
function useSprings(length, props, deps) {
  const propsFn = is.fun(props) && props;
  if (propsFn && !deps)
    deps = [];
  const ref = import_react12.useMemo(() => propsFn || arguments.length == 3 ? SpringRef() : undefined, []);
  const layoutId = import_react12.useRef(0);
  const forceUpdate = useForceUpdate();
  const state = import_react12.useMemo(() => ({
    ctrls: [],
    queue: [],
    flush(ctrl, updates2) {
      const springs2 = getSprings(ctrl, updates2);
      const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some((key) => !ctrl.springs[key]);
      return canFlushSync ? flushUpdateQueue(ctrl, updates2) : new Promise((resolve) => {
        setSprings(ctrl, springs2);
        state.queue.push(() => {
          resolve(flushUpdateQueue(ctrl, updates2));
        });
        forceUpdate();
      });
    }
  }), []);
  const ctrls = import_react12.useRef([...state.ctrls]);
  const updates = [];
  const prevLength = usePrev(length) || 0;
  import_react12.useMemo(() => {
    each(ctrls.current.slice(length, prevLength), (ctrl) => {
      detachRefs(ctrl, ref);
      ctrl.stop(true);
    });
    ctrls.current.length = length;
    declareUpdates(prevLength, length);
  }, [length]);
  import_react12.useMemo(() => {
    declareUpdates(0, Math.min(prevLength, length));
  }, deps);
  function declareUpdates(startIndex, endIndex) {
    for (let i = startIndex;i < endIndex; i++) {
      const ctrl = ctrls.current[i] || (ctrls.current[i] = new Controller(null, state.flush));
      const update2 = propsFn ? propsFn(i, ctrl) : props[i];
      if (update2) {
        updates[i] = declareUpdate(update2);
      }
    }
  }
  const springs = ctrls.current.map((ctrl, i) => getSprings(ctrl, updates[i]));
  const context = import_react12.useContext(SpringContext);
  const prevContext = usePrev(context);
  const hasContext = context !== prevContext && hasProps(context);
  useIsomorphicLayoutEffect(() => {
    layoutId.current++;
    state.ctrls = ctrls.current;
    const { queue } = state;
    if (queue.length) {
      state.queue = [];
      each(queue, (cb) => cb());
    }
    each(ctrls.current, (ctrl, i) => {
      ref?.add(ctrl);
      if (hasContext) {
        ctrl.start({ default: context });
      }
      const update2 = updates[i];
      if (update2) {
        replaceRef(ctrl, update2.ref);
        if (ctrl.ref) {
          ctrl.queue.push(update2);
        } else {
          ctrl.start(update2);
        }
      }
    });
  });
  useOnce(() => () => {
    each(state.ctrls, (ctrl) => ctrl.stop(true));
  });
  const values = springs.map((x) => ({ ...x }));
  return ref ? [values, ref] : values;
}
function useSpring(props, deps) {
  const isFn = is.fun(props);
  const [[values], ref] = useSprings(1, isFn ? props : [props], isFn ? deps || [] : deps);
  return isFn || arguments.length == 2 ? [values, ref] : values;
}
var Interpolation = class extends FrameValue {
  constructor(source, args) {
    super();
    this.source = source;
    this.idle = true;
    this._active = /* @__PURE__ */ new Set;
    this.calc = createInterpolator(...args);
    const value = this._get();
    const nodeType = getAnimatedType(value);
    setAnimated(this, nodeType.create(value));
  }
  advance(_dt) {
    const value = this._get();
    const oldValue = this.get();
    if (!isEqual(value, oldValue)) {
      getAnimated(this).setValue(value);
      this._onChange(value, this.idle);
    }
    if (!this.idle && checkIdle(this._active)) {
      becomeIdle(this);
    }
  }
  _get() {
    const inputs = is.arr(this.source) ? this.source.map(getFluidValue) : toArray(getFluidValue(this.source));
    return this.calc(...inputs);
  }
  _start() {
    if (this.idle && !checkIdle(this._active)) {
      this.idle = false;
      each(getPayload(this), (node) => {
        node.done = false;
      });
      if (globals_exports.skipAnimation) {
        raf.batchedUpdates(() => this.advance());
        becomeIdle(this);
      } else {
        frameLoop.start(this);
      }
    }
  }
  _attach() {
    let priority2 = 1;
    each(toArray(this.source), (source) => {
      if (hasFluidValue(source)) {
        addFluidObserver(source, this);
      }
      if (isFrameValue(source)) {
        if (!source.idle) {
          this._active.add(source);
        }
        priority2 = Math.max(priority2, source.priority + 1);
      }
    });
    this.priority = priority2;
    this._start();
  }
  _detach() {
    each(toArray(this.source), (source) => {
      if (hasFluidValue(source)) {
        removeFluidObserver(source, this);
      }
    });
    this._active.clear();
    becomeIdle(this);
  }
  eventObserved(event) {
    if (event.type == "change") {
      if (event.idle) {
        this.advance();
      } else {
        this._active.add(event.parent);
        this._start();
      }
    } else if (event.type == "idle") {
      this._active.delete(event.parent);
    } else if (event.type == "priority") {
      this.priority = toArray(this.source).reduce((highest, parent) => Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1), 0);
    }
  }
};
function isIdle(source) {
  return source.idle !== false;
}
function checkIdle(active) {
  return !active.size || Array.from(active).every(isIdle);
}
function becomeIdle(self2) {
  if (!self2.idle) {
    self2.idle = true;
    each(getPayload(self2), (node) => {
      node.done = true;
    });
    callFluidObservers(self2, {
      type: "idle",
      parent: self2
    });
  }
}
globals_exports.assign({
  createStringInterpolator: createStringInterpolator2,
  to: (source, args) => new Interpolation(source, args)
});
var update2 = frameLoop.advance;

// node_modules/@react-spring/web/dist/react-spring_web.modern.mjs
var import_react_dom = __toESM(require_react_dom(), 1);
var isCustomPropRE = /^--/;
function dangerousStyleValue(name, value) {
  if (value == null || typeof value === "boolean" || value === "")
    return "";
  if (typeof value === "number" && value !== 0 && !isCustomPropRE.test(name) && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]))
    return value + "px";
  return ("" + value).trim();
}
var attributeCache = {};
function applyAnimatedValues(instance, props) {
  if (!instance.nodeType || !instance.setAttribute) {
    return false;
  }
  const isFilterElement = instance.nodeName === "filter" || instance.parentNode && instance.parentNode.nodeName === "filter";
  const {
    className,
    style,
    children,
    scrollTop,
    scrollLeft,
    viewBox,
    ...attributes
  } = props;
  const values = Object.values(attributes);
  const names = Object.keys(attributes).map((name) => isFilterElement || instance.hasAttribute(name) ? name : attributeCache[name] || (attributeCache[name] = name.replace(/([A-Z])/g, (n) => "-" + n.toLowerCase())));
  if (children !== undefined) {
    instance.textContent = children;
  }
  for (const name in style) {
    if (style.hasOwnProperty(name)) {
      const value = dangerousStyleValue(name, style[name]);
      if (isCustomPropRE.test(name)) {
        instance.style.setProperty(name, value);
      } else {
        instance.style[name] = value;
      }
    }
  }
  names.forEach((name, i) => {
    instance.setAttribute(name, values[i]);
  });
  if (className !== undefined) {
    instance.className = className;
  }
  if (scrollTop !== undefined) {
    instance.scrollTop = scrollTop;
  }
  if (scrollLeft !== undefined) {
    instance.scrollLeft = scrollLeft;
  }
  if (viewBox !== undefined) {
    instance.setAttribute("viewBox", viewBox);
  }
}
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};
var prefixKey = (prefix2, key) => prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
var prefixes2 = ["Webkit", "Ms", "Moz", "O"];
isUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {
  prefixes2.forEach((prefix2) => acc[prefixKey(prefix2, prop)] = acc[prop]);
  return acc;
}, isUnitlessNumber);
var domTransforms = /^(matrix|translate|scale|rotate|skew)/;
var pxTransforms = /^(translate)/;
var degTransforms = /^(rotate|skew)/;
var addUnit = (value, unit2) => is.num(value) && value !== 0 ? value + unit2 : value;
var isValueIdentity = (value, id) => is.arr(value) ? value.every((v) => isValueIdentity(v, id)) : is.num(value) ? value === id : parseFloat(value) === id;
var AnimatedStyle = class extends AnimatedObject {
  constructor({ x, y, z, ...style }) {
    const inputs = [];
    const transforms = [];
    if (x || y || z) {
      inputs.push([x || 0, y || 0, z || 0]);
      transforms.push((xyz) => [
        `translate3d(${xyz.map((v) => addUnit(v, "px")).join(",")})`,
        isValueIdentity(xyz, 0)
      ]);
    }
    eachProp(style, (value, key) => {
      if (key === "transform") {
        inputs.push([value || ""]);
        transforms.push((transform) => [transform, transform === ""]);
      } else if (domTransforms.test(key)) {
        delete style[key];
        if (is.und(value))
          return;
        const unit2 = pxTransforms.test(key) ? "px" : degTransforms.test(key) ? "deg" : "";
        inputs.push(toArray(value));
        transforms.push(key === "rotate3d" ? ([x2, y2, z2, deg]) => [
          `rotate3d(${x2},${y2},${z2},${addUnit(deg, unit2)})`,
          isValueIdentity(deg, 0)
        ] : (input) => [
          `${key}(${input.map((v) => addUnit(v, unit2)).join(",")})`,
          isValueIdentity(input, key.startsWith("scale") ? 1 : 0)
        ]);
      }
    });
    if (inputs.length) {
      style.transform = new FluidTransform(inputs, transforms);
    }
    super(style);
  }
};
var FluidTransform = class extends FluidValue {
  constructor(inputs, transforms) {
    super();
    this.inputs = inputs;
    this.transforms = transforms;
    this._value = null;
  }
  get() {
    return this._value || (this._value = this._get());
  }
  _get() {
    let transform = "";
    let identity2 = true;
    each(this.inputs, (input, i) => {
      const arg1 = getFluidValue(input[0]);
      const [t, id] = this.transforms[i](is.arr(arg1) ? arg1 : input.map(getFluidValue));
      transform += " " + t;
      identity2 = identity2 && id;
    });
    return identity2 ? "none" : transform;
  }
  observerAdded(count) {
    if (count == 1)
      each(this.inputs, (input) => each(input, (value) => hasFluidValue(value) && addFluidObserver(value, this)));
  }
  observerRemoved(count) {
    if (count == 0)
      each(this.inputs, (input) => each(input, (value) => hasFluidValue(value) && removeFluidObserver(value, this)));
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._value = null;
    }
    callFluidObservers(this, event);
  }
};
var primitives = [
  "a",
  "abbr",
  "address",
  "area",
  "article",
  "aside",
  "audio",
  "b",
  "base",
  "bdi",
  "bdo",
  "big",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "data",
  "datalist",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "embed",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hgroup",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "keygen",
  "label",
  "legend",
  "li",
  "link",
  "main",
  "map",
  "mark",
  "menu",
  "menuitem",
  "meta",
  "meter",
  "nav",
  "noscript",
  "object",
  "ol",
  "optgroup",
  "option",
  "output",
  "p",
  "param",
  "picture",
  "pre",
  "progress",
  "q",
  "rp",
  "rt",
  "ruby",
  "s",
  "samp",
  "script",
  "section",
  "select",
  "small",
  "source",
  "span",
  "strong",
  "style",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "title",
  "tr",
  "track",
  "u",
  "ul",
  "var",
  "video",
  "wbr",
  "circle",
  "clipPath",
  "defs",
  "ellipse",
  "foreignObject",
  "g",
  "image",
  "line",
  "linearGradient",
  "mask",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "radialGradient",
  "rect",
  "stop",
  "svg",
  "text",
  "tspan"
];
globals_exports.assign({
  batchedUpdates: import_react_dom.unstable_batchedUpdates,
  createStringInterpolator: createStringInterpolator2,
  colors: colors2
});
var host = createHost(primitives, {
  applyAnimatedValues,
  createAnimatedStyle: (style) => new AnimatedStyle(style),
  getComponentProps: ({ scrollTop, scrollLeft, ...props }) => props
});
var animated = host.animated;

// node_modules/@visx/xychart/esm/components/axis/AnimatedAxis.js
var import_react18 = __toESM(require_react(), 1);
var import_AnimatedAxis = __toESM(require_AnimatedAxis(), 1);

// node_modules/@visx/xychart/esm/components/axis/BaseAxis.js
var import_react17 = __toESM(require_react(), 1);
var _excluded = ["AxisComponent"];
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1;i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0;i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function BaseAxis(_ref) {
  var _margin$bottom, _margin$top, _margin$left, _margin$right, _axisStyles$axisLine, _axisStyles$axisLine2, _axisStyles$tickLine;
  var AxisComponent = _ref.AxisComponent, props = _objectWithoutPropertiesLoose(_ref, _excluded);
  var _useContext = import_react17.useContext(DataContext_default), theme = _useContext.theme, xScale = _useContext.xScale, yScale = _useContext.yScale, margin = _useContext.margin, width = _useContext.width, height = _useContext.height;
  var orientation = props.orientation;
  var axisStyles = import_react17.useMemo(function() {
    var _theme$axisStyles, _theme$axisStyles$y, _theme$axisStyles2, _theme$axisStyles2$x;
    return orientation === "left" || orientation === "right" ? theme == null ? undefined : (_theme$axisStyles = theme.axisStyles) == null ? undefined : (_theme$axisStyles$y = _theme$axisStyles.y) == null ? undefined : _theme$axisStyles$y[orientation] : theme == null ? undefined : (_theme$axisStyles2 = theme.axisStyles) == null ? undefined : (_theme$axisStyles2$x = _theme$axisStyles2.x) == null ? undefined : _theme$axisStyles2$x[orientation];
  }, [theme, orientation]);
  var maybeTickLabelProps = props.tickLabelProps;
  var tickLabelProps = import_react17.useMemo(function() {
    return maybeTickLabelProps || axisStyles ? function(value, index, values) {
      return _extends({}, axisStyles == null ? undefined : axisStyles.tickLabel, {
        width: orientation === "left" || orientation === "right" ? margin == null ? undefined : margin[orientation] : undefined
      }, typeof maybeTickLabelProps === "function" ? maybeTickLabelProps(value, index, values) : maybeTickLabelProps);
    } : undefined;
  }, [maybeTickLabelProps, axisStyles, orientation, margin]);
  var topOffset = orientation === "bottom" ? (height != null ? height : 0) - ((_margin$bottom = margin == null ? undefined : margin.bottom) != null ? _margin$bottom : 0) : orientation === "top" ? (_margin$top = margin == null ? undefined : margin.top) != null ? _margin$top : 0 : 0;
  var leftOffset = orientation === "left" ? (_margin$left = margin == null ? undefined : margin.left) != null ? _margin$left : 0 : orientation === "right" ? (width != null ? width : 0) - ((_margin$right = margin == null ? undefined : margin.right) != null ? _margin$right : 0) : 0;
  var scale = orientation === "left" || orientation === "right" ? yScale : xScale;
  return scale ? /* @__PURE__ */ import_react17.default.createElement(AxisComponent, _extends({
    top: topOffset,
    left: leftOffset,
    labelProps: axisStyles == null ? undefined : axisStyles.axisLabel,
    stroke: axisStyles == null ? undefined : (_axisStyles$axisLine = axisStyles.axisLine) == null ? undefined : _axisStyles$axisLine.stroke,
    strokeWidth: axisStyles == null ? undefined : (_axisStyles$axisLine2 = axisStyles.axisLine) == null ? undefined : _axisStyles$axisLine2.strokeWidth,
    tickLength: axisStyles == null ? undefined : axisStyles.tickLength,
    tickStroke: axisStyles == null ? undefined : (_axisStyles$tickLine = axisStyles.tickLine) == null ? undefined : _axisStyles$tickLine.stroke
  }, props, {
    tickLabelProps,
    scale
  })) : null;
}

// node_modules/@visx/xychart/esm/components/axis/AnimatedAxis.js
function _extends2() {
  _extends2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1;i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function AnimatedAxis(props) {
  return /* @__PURE__ */ import_react18.default.createElement(BaseAxis, _extends2({
    AxisComponent: import_AnimatedAxis.default
  }, props));
}
// node_modules/@visx/xychart/esm/components/grid/AnimatedGrid.js
var import_react20 = __toESM(require_react(), 1);
var import_AnimatedGridRows = __toESM(require_AnimatedGridRows(), 1);
var import_AnimatedGridColumns = __toESM(require_AnimatedGridColumns(), 1);

// node_modules/@visx/xychart/esm/components/grid/BaseGrid.js
var import_prop_types = __toESM(require_prop_types(), 1);
var import_react19 = __toESM(require_react(), 1);
var _excluded2 = ["rows", "columns", "GridRowsComponent", "GridColumnsComponent"];
function _extends3() {
  _extends3 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1;i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0;i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function BaseGrid(_ref) {
  var _ref$rows = _ref.rows, rows = _ref$rows === undefined ? true : _ref$rows, _ref$columns = _ref.columns, columns = _ref$columns === undefined ? true : _ref$columns, GridRowsComponent = _ref.GridRowsComponent, GridColumnsComponent = _ref.GridColumnsComponent, props = _objectWithoutPropertiesLoose2(_ref, _excluded2);
  var _useContext = import_react19.useContext(DataContext_default), theme = _useContext.theme, columnsScale = _useContext.xScale, rowsScale = _useContext.yScale, margin = _useContext.margin, innerWidth = _useContext.innerWidth, innerHeight = _useContext.innerHeight;
  var gridLineStyles = theme == null ? undefined : theme.gridStyles;
  return /* @__PURE__ */ import_react19.default.createElement(import_react19.default.Fragment, null, rows && rowsScale && innerWidth != null && /* @__PURE__ */ import_react19.default.createElement(GridRowsComponent, _extends3({
    left: margin == null ? undefined : margin.left,
    lineStyle: gridLineStyles,
    width: innerWidth,
    scale: rowsScale
  }, props)), columns && columnsScale && innerHeight != null && /* @__PURE__ */ import_react19.default.createElement(GridColumnsComponent, _extends3({
    top: margin == null ? undefined : margin.top,
    lineStyle: gridLineStyles,
    height: innerHeight,
    scale: columnsScale
  }, props)));
}
BaseGrid.propTypes = {
  rows: import_prop_types.default.bool,
  columns: import_prop_types.default.bool
};

// node_modules/@visx/xychart/esm/components/grid/AnimatedGrid.js
var _excluded3 = ["animationTrajectory"];
function _extends4() {
  _extends4 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1;i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends4.apply(this, arguments);
}
function _objectWithoutPropertiesLoose3(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0;i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function AnimatedGrid(_ref) {
  var animationTrajectory = _ref.animationTrajectory, props = _objectWithoutPropertiesLoose3(_ref, _excluded3);
  var RowsComponent = import_react20.useMemo(function() {
    return function RowsFC(rowProps) {
      return /* @__PURE__ */ import_react20.default.createElement(import_AnimatedGridRows.default, _extends4({}, rowProps, {
        animationTrajectory
      }));
    };
  }, [animationTrajectory]);
  var ColumnsComponent = import_react20.useMemo(function() {
    return function ColumnsFC(rowProps) {
      return /* @__PURE__ */ import_react20.default.createElement(import_AnimatedGridColumns.default, _extends4({}, rowProps, {
        animationTrajectory
      }));
    };
  }, [animationTrajectory]);
  return /* @__PURE__ */ import_react20.default.createElement(BaseGrid, _extends4({
    GridRowsComponent: RowsComponent,
    GridColumnsComponent: ColumnsComponent
  }, props));
}
// node_modules/@visx/xychart/esm/components/Tooltip.js
var import_prop_types5 = __toESM(require_prop_types(), 1);
var import_react29 = __toESM(require_react(), 1);

// node_modules/@visx/tooltip/esm/hooks/useTooltip.js
var import_react21 = __toESM(require_react(), 1);
var _excluded4 = ["tooltipOpen"];
function _objectWithoutPropertiesLoose4(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0;i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends5() {
  _extends5 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1;i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends5.apply(this, arguments);
}
function useTooltip(initialTooltipState) {
  var _useState = import_react21.useState(_extends5({
    tooltipOpen: false
  }, initialTooltipState)), tooltipState = _useState[0], setTooltipState = _useState[1];
  var showTooltip = import_react21.useCallback(function(showArgs) {
    return setTooltipState(typeof showArgs === "function" ? function(_ref) {
      var tooltipOpen = _ref.tooltipOpen, show = _objectWithoutPropertiesLoose4(_ref, _excluded4);
      return _extends5({}, showArgs(show), {
        tooltipOpen: true
      });
    } : {
      tooltipOpen: true,
      tooltipLeft: showArgs.tooltipLeft,
      tooltipTop: showArgs.tooltipTop,
      tooltipData: showArgs.tooltipData
    });
  }, [setTooltipState]);
  var hideTooltip = import_react21.useCallback(function() {
    return setTooltipState({
      tooltipOpen: false,
      tooltipLeft: undefined,
      tooltipTop: undefined,
      tooltipData: undefined
    });
  }, [setTooltipState]);
  return {
    tooltipOpen: tooltipState.tooltipOpen,
    tooltipLeft: tooltipState.tooltipLeft,
    tooltipTop: tooltipState.tooltipTop,
    tooltipData: tooltipState.tooltipData,
    updateTooltip: setTooltipState,
    showTooltip,
    hideTooltip
  };
}
// node_modules/@visx/tooltip/esm/hooks/useTooltipInPortal.js
var import_react27 = __toESM(require_react(), 1);

// node_modules/@visx/tooltip/esm/Portal.js
var import_prop_types2 = __toESM(require_prop_types(), 1);
var import_react22 = __toESM(require_react(), 1);
var import_react_dom2 = __toESM(require_react_dom(), 1);
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p2) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o2, p3) {
    o2.__proto__ = p3;
    return o2;
  };
  return _setPrototypeOf(o, p2);
}
var Portal = /* @__PURE__ */ function(_React$PureComponent) {
  _inheritsLoose(Portal2, _React$PureComponent);
  function Portal2() {
    return _React$PureComponent.apply(this, arguments) || this;
  }
  var _proto = Portal2.prototype;
  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.node && document.body) {
      document.body.removeChild(this.node);
      delete this.node;
    }
  };
  _proto.render = function render() {
    if (!this.node && typeof document !== "undefined") {
      this.node = document.createElement("div");
      if (this.props.zIndex != null)
        this.node.style.zIndex = "" + this.props.zIndex;
      document.body.append(this.node);
    }
    if (!this.node) {
      return null;
    }
    return /* @__PURE__ */ import_react_dom2.default.createPortal(this.props.children, this.node);
  };
  return Portal2;
}(import_react22.default.PureComponent);
Portal.propTypes = {
  zIndex: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string])
};

// node_modules/@visx/tooltip/esm/tooltips/Tooltip.js
var import_prop_types3 = __toESM(require_prop_types(), 1);
var import_react23 = __toESM(require_react(), 1);
var import_classnames = __toESM(require_classnames(), 1);
var _excluded5 = ["className", "top", "left", "offsetLeft", "offsetTop", "style", "children", "unstyled", "applyPositionStyle"];
function _extends6() {
  _extends6 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1;i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends6.apply(this, arguments);
}
function _objectWithoutPropertiesLoose5(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0;i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var defaultStyles = {
  position: "absolute",
  backgroundColor: "white",
  color: "#666666",
  padding: ".3rem .5rem",
  borderRadius: "3px",
  fontSize: "14px",
  boxShadow: "0 1px 2px rgba(33,33,33,0.2)",
  lineHeight: "1em",
  pointerEvents: "none"
};
var Tooltip = /* @__PURE__ */ import_react23.default.forwardRef(function(_ref, ref) {
  var { className, top, left, offsetLeft: _ref$offsetLeft } = _ref, offsetLeft = _ref$offsetLeft === undefined ? 10 : _ref$offsetLeft, _ref$offsetTop = _ref.offsetTop, offsetTop = _ref$offsetTop === undefined ? 10 : _ref$offsetTop, _ref$style = _ref.style, style = _ref$style === undefined ? defaultStyles : _ref$style, children = _ref.children, _ref$unstyled = _ref.unstyled, unstyled = _ref$unstyled === undefined ? false : _ref$unstyled, _ref$applyPositionSty = _ref.applyPositionStyle, applyPositionStyle = _ref$applyPositionSty === undefined ? false : _ref$applyPositionSty, restProps = _objectWithoutPropertiesLoose5(_ref, _excluded5);
  return /* @__PURE__ */ import_react23.default.createElement("div", _extends6({
    ref,
    className: import_classnames.default("visx-tooltip", className),
    style: _extends6({
      top: top == null || offsetTop == null ? top : top + offsetTop,
      left: left == null || offsetLeft == null ? left : left + offsetLeft
    }, applyPositionStyle && {
      position: "absolute"
    }, !unstyled && style)
  }, restProps), children);
});
Tooltip.propTypes = {
  children: import_prop_types3.default.node,
  className: import_prop_types3.default.string,
  left: import_prop_types3.default.number,
  offsetLeft: import_prop_types3.default.number,
  offsetTop: import_prop_types3.default.number,
  top: import_prop_types3.default.number,
  applyPositionStyle: import_prop_types3.default.bool,
  unstyled: import_prop_types3.default.bool
};
Tooltip.displayName = "Tooltip";
var Tooltip_default = Tooltip;

// node_modules/@visx/tooltip/esm/tooltips/TooltipWithBounds.js
var import_prop_types4 = __toESM(require_prop_types(), 1);
var import_react26 = __toESM(require_react(), 1);

// node_modules/@visx/bounds/esm/enhancers/withBoundingRects.js
var import_react24 = __toESM(require_react(), 1);
var import_react_dom3 = __toESM(require_react_dom(), 1);
function _extends7() {
  _extends7 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1;i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends7.apply(this, arguments);
}
function _assertThisInitialized(self2) {
  if (self2 === undefined) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _inheritsLoose2(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf2(subClass, superClass);
}
function _setPrototypeOf2(o, p2) {
  _setPrototypeOf2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o2, p3) {
    o2.__proto__ = p3;
    return o2;
  };
  return _setPrototypeOf2(o, p2);
}
var emptyRect = {
  top: 0,
  right: 0,
  bottom: 0,
  left: 0,
  width: 0,
  height: 0
};
function withBoundingRects(BaseComponent) {
  var _class;
  return _class = /* @__PURE__ */ function(_React$PureComponent) {
    _inheritsLoose2(WrappedComponent, _React$PureComponent);
    function WrappedComponent(props) {
      var _this;
      _this = _React$PureComponent.call(this, props) || this;
      _this.state = {
        rect: undefined,
        parentRect: undefined
      };
      _this.nodeRef = /* @__PURE__ */ import_react24.default.createRef();
      _this.getRects = _this.getRects.bind(_assertThisInitialized(_this));
      return _this;
    }
    var _proto = WrappedComponent.prototype;
    _proto.componentDidMount = function componentDidMount() {
      var _this$nodeRef, _this2 = this;
      this.node = (_this$nodeRef = this.nodeRef) != null && _this$nodeRef.current ? this.nodeRef.current : import_react_dom3.default.findDOMNode(this);
      this.setState(function() {
        return _this2.getRects();
      });
    };
    _proto.getRects = function getRects() {
      if (!this.node)
        return this.state;
      var node = this.node;
      var parentNode = node.parentNode;
      var rect = node.getBoundingClientRect ? node.getBoundingClientRect() : emptyRect;
      var parentRect = parentNode != null && parentNode.getBoundingClientRect ? parentNode.getBoundingClientRect() : emptyRect;
      return {
        rect,
        parentRect
      };
    };
    _proto.render = function render() {
      return /* @__PURE__ */ import_react24.default.createElement(BaseComponent, _extends7({
        nodeRef: this.nodeRef,
        getRects: this.getRects
      }, this.state, this.props));
    };
    return WrappedComponent;
  }(import_react24.default.PureComponent), _class.displayName = "withBoundingRects(" + (BaseComponent.displayName || "") + ")", _class;
}
// node_modules/@visx/tooltip/esm/context/TooltipPositionContext.js
var import_react25 = __toESM(require_react(), 1);
var TooltipPositionContext = /* @__PURE__ */ import_react25.createContext({
  isFlippedVertically: false,
  isFlippedHorizontally: false
});
var TooltipPositionProvider = TooltipPositionContext.Provider;
var TooltipPositionConsumer = TooltipPositionContext.Consumer;

// node_modules/@visx/tooltip/esm/tooltips/TooltipWithBounds.js
var _excluded6 = ["children", "getRects", "left", "offsetLeft", "offsetTop", "parentRect", "rect", "style", "top", "unstyled", "nodeRef"];
function _extends8() {
  _extends8 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1;i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends8.apply(this, arguments);
}
function _objectWithoutPropertiesLoose6(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0;i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function TooltipWithBounds(_ref) {
  var { children, getRects, left: _ref$left } = _ref, initialLeft = _ref$left === undefined ? 0 : _ref$left, _ref$offsetLeft = _ref.offsetLeft, offsetLeft = _ref$offsetLeft === undefined ? 10 : _ref$offsetLeft, _ref$offsetTop = _ref.offsetTop, offsetTop = _ref$offsetTop === undefined ? 10 : _ref$offsetTop, parentBounds = _ref.parentRect, ownBounds = _ref.rect, _ref$style = _ref.style, style = _ref$style === undefined ? defaultStyles : _ref$style, _ref$top = _ref.top, initialTop = _ref$top === undefined ? 0 : _ref$top, _ref$unstyled = _ref.unstyled, unstyled = _ref$unstyled === undefined ? false : _ref$unstyled, nodeRef = _ref.nodeRef, otherProps = _objectWithoutPropertiesLoose6(_ref, _excluded6);
  var transform;
  var placeTooltipLeft = false;
  var placeTooltipUp = false;
  if (ownBounds && parentBounds) {
    var left = initialLeft;
    var top = initialTop;
    if (parentBounds.width) {
      var rightPlacementClippedPx = left + offsetLeft + ownBounds.width - parentBounds.width;
      var leftPlacementClippedPx = ownBounds.width - left - offsetLeft;
      placeTooltipLeft = rightPlacementClippedPx > 0 && rightPlacementClippedPx > leftPlacementClippedPx;
    } else {
      var _rightPlacementClippedPx = left + offsetLeft + ownBounds.width - window.innerWidth;
      var _leftPlacementClippedPx = ownBounds.width - left - offsetLeft;
      placeTooltipLeft = _rightPlacementClippedPx > 0 && _rightPlacementClippedPx > _leftPlacementClippedPx;
    }
    if (parentBounds.height) {
      var bottomPlacementClippedPx = top + offsetTop + ownBounds.height - parentBounds.height;
      var topPlacementClippedPx = ownBounds.height - top - offsetTop;
      placeTooltipUp = bottomPlacementClippedPx > 0 && bottomPlacementClippedPx > topPlacementClippedPx;
    } else {
      placeTooltipUp = top + offsetTop + ownBounds.height > window.innerHeight;
    }
    left = placeTooltipLeft ? left - ownBounds.width - offsetLeft : left + offsetLeft;
    top = placeTooltipUp ? top - ownBounds.height - offsetTop : top + offsetTop;
    left = Math.round(left);
    top = Math.round(top);
    transform = "translate(" + left + "px, " + top + "px)";
  }
  return /* @__PURE__ */ import_react26.default.createElement(Tooltip_default, _extends8({
    ref: nodeRef,
    style: _extends8({
      left: 0,
      top: 0,
      transform
    }, !unstyled && style)
  }, otherProps), /* @__PURE__ */ import_react26.default.createElement(TooltipPositionProvider, {
    value: {
      isFlippedVertically: !placeTooltipUp,
      isFlippedHorizontally: !placeTooltipLeft
    }
  }, children));
}
TooltipWithBounds.propTypes = {
  nodeRef: import_prop_types4.default.oneOfType([import_prop_types4.default.string, import_prop_types4.default.func, import_prop_types4.default.object])
};
var TooltipWithBounds_default = withBoundingRects(TooltipWithBounds);

// node_modules/@visx/tooltip/esm/hooks/useTooltipInPortal.js
var _excluded7 = ["detectBounds", "zIndex"];
var _excluded22 = ["left", "top", "detectBounds", "zIndex"];
function _extends9() {
  _extends9 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1;i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends9.apply(this, arguments);
}
function _objectWithoutPropertiesLoose7(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0;i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function useTooltipInPortal(_temp) {
  var _ref = _temp === undefined ? {} : _temp, _ref$detectBounds = _ref.detectBounds, detectBoundsOption = _ref$detectBounds === undefined ? true : _ref$detectBounds, zIndexOption = _ref.zIndex, useMeasureOptions = _objectWithoutPropertiesLoose7(_ref, _excluded7);
  var _useMeasure = j(useMeasureOptions), containerRef = _useMeasure[0], containerBounds = _useMeasure[1], forceRefreshBounds = _useMeasure[2];
  var _useState = import_react27.useState(false), isSsr = _useState[0], setIsSsr = _useState[1];
  import_react27.useEffect(function() {
    setIsSsr(false);
  }, []);
  var TooltipInPortal = import_react27.useMemo(function() {
    return function(_ref2) {
      var _ref2$left = _ref2.left, containerLeft = _ref2$left === undefined ? 0 : _ref2$left, _ref2$top = _ref2.top, containerTop = _ref2$top === undefined ? 0 : _ref2$top, detectBoundsProp = _ref2.detectBounds, zIndexProp = _ref2.zIndex, tooltipProps = _objectWithoutPropertiesLoose7(_ref2, _excluded22);
      var detectBounds = detectBoundsProp == null ? detectBoundsOption : detectBoundsProp;
      var zIndex = zIndexProp == null ? zIndexOption : zIndexProp;
      var TooltipComponent = detectBounds ? TooltipWithBounds_default : Tooltip_default;
      var scrollX = isSsr ? 0 : window.scrollX;
      var scrollY = isSsr ? 0 : window.scrollY;
      var portalLeft = containerLeft + (containerBounds.left || 0) + scrollX;
      var portalTop = containerTop + (containerBounds.top || 0) + scrollY;
      return /* @__PURE__ */ import_react27.default.createElement(Portal, {
        zIndex
      }, /* @__PURE__ */ import_react27.default.createElement(TooltipComponent, _extends9({
        left: portalLeft,
        top: portalTop
      }, tooltipProps)));
    };
  }, [detectBoundsOption, zIndexOption, containerBounds.left, containerBounds.top, isSsr]);
  return {
    containerRef,
    containerBounds,
    forceRefreshBounds,
    TooltipInPortal
  };
}
// node_modules/@visx/xychart/esm/context/TooltipContext.js
var import_react28 = __toESM(require_react(), 1);
var TooltipContext = /* @__PURE__ */ import_react28.createContext(null);
var TooltipContext_default = TooltipContext;

// node_modules/@visx/xychart/esm/components/Tooltip.js
var _excluded8 = ["debounce", "detectBounds", "horizontalCrosshairStyle", "glyphStyle", "renderTooltip", "renderGlyph", "resizeObserverPolyfill", "scroll", "showDatumGlyph", "showHorizontalCrosshair", "showSeriesGlyphs", "showVerticalCrosshair", "snapTooltipToDatumX", "snapTooltipToDatumY", "verticalCrosshairStyle", "zIndex"];
var _excluded23 = ["x", "y"];
function _objectWithoutPropertiesLoose8(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0;i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends10() {
  _extends10 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1;i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends10.apply(this, arguments);
}
var TOOLTIP_NO_STYLE = {
  position: "absolute",
  pointerEvents: "none",
  fontSize: 0,
  lineHeight: 0
};
var INVISIBLE_STYLES = {
  position: "absolute",
  left: 0,
  top: 0,
  opacity: 0,
  width: 0,
  height: 0,
  pointerEvents: "none"
};
function DefaultGlyph(props) {
  var _ref = import_react29.useContext(DataContext_default) || {}, theme = _ref.theme;
  return /* @__PURE__ */ import_react29.default.createElement("circle", _extends10({
    cx: props.x,
    cy: props.y,
    r: props.size,
    fill: props.color,
    stroke: theme == null ? undefined : theme.backgroundColor,
    strokeWidth: 1.5,
    paintOrder: "fill"
  }, props.glyphStyle));
}
DefaultGlyph.propTypes = {
  isNearestDatum: import_prop_types5.default.bool.isRequired
};
function defaultRenderGlyph(props) {
  return /* @__PURE__ */ import_react29.default.createElement(DefaultGlyph, props);
}
function TooltipInner(_ref2) {
  var _tooltipContext$toolt, _nearestDatum$key, _ref12, _theme$gridStyles$str, _theme$gridStyles2, _theme$htmlLabel3, _ref13, _theme$gridStyles$str2, _theme$gridStyles3, _theme$htmlLabel4, _theme$backgroundColo, _theme$htmlLabel5, _theme$htmlLabel6;
  var { debounce, detectBounds, horizontalCrosshairStyle, glyphStyle, renderTooltip, renderGlyph: _ref2$renderGlyph } = _ref2, renderGlyph = _ref2$renderGlyph === undefined ? defaultRenderGlyph : _ref2$renderGlyph, resizeObserverPolyfillProp = _ref2.resizeObserverPolyfill, _ref2$scroll = _ref2.scroll, scroll = _ref2$scroll === undefined ? true : _ref2$scroll, _ref2$showDatumGlyph = _ref2.showDatumGlyph, showDatumGlyph = _ref2$showDatumGlyph === undefined ? false : _ref2$showDatumGlyph, _ref2$showHorizontalC = _ref2.showHorizontalCrosshair, showHorizontalCrosshair = _ref2$showHorizontalC === undefined ? false : _ref2$showHorizontalC, _ref2$showSeriesGlyph = _ref2.showSeriesGlyphs, showSeriesGlyphs = _ref2$showSeriesGlyph === undefined ? false : _ref2$showSeriesGlyph, _ref2$showVerticalCro = _ref2.showVerticalCrosshair, showVerticalCrosshair = _ref2$showVerticalCro === undefined ? false : _ref2$showVerticalCro, _ref2$snapTooltipToDa = _ref2.snapTooltipToDatumX, snapTooltipToDatumX = _ref2$snapTooltipToDa === undefined ? false : _ref2$snapTooltipToDa, _ref2$snapTooltipToDa2 = _ref2.snapTooltipToDatumY, snapTooltipToDatumY = _ref2$snapTooltipToDa2 === undefined ? false : _ref2$snapTooltipToDa2, verticalCrosshairStyle = _ref2.verticalCrosshairStyle, zIndex = _ref2.zIndex, tooltipProps = _objectWithoutPropertiesLoose8(_ref2, _excluded8);
  var _ref3 = import_react29.useContext(DataContext_default) || {}, colorScale = _ref3.colorScale, theme = _ref3.theme, innerHeight = _ref3.innerHeight, innerWidth = _ref3.innerWidth, margin = _ref3.margin, xScale = _ref3.xScale, yScale = _ref3.yScale, dataRegistry = _ref3.dataRegistry, resizeObserverPolyfill = _ref3.resizeObserverPolyfill;
  var tooltipContext = import_react29.useContext(TooltipContext_default);
  var _useTooltipInPortal = useTooltipInPortal({
    debounce,
    detectBounds,
    polyfill: resizeObserverPolyfill || resizeObserverPolyfillProp,
    scroll,
    zIndex
  }), containerRef = _useTooltipInPortal.containerRef, TooltipInPortal = _useTooltipInPortal.TooltipInPortal, forceRefreshBounds = _useTooltipInPortal.forceRefreshBounds;
  var setContainerRef = import_react29.useCallback(function(ownRef) {
    var _ownRef$parentElement;
    containerRef((_ownRef$parentElement = ownRef == null ? undefined : ownRef.parentElement) != null ? _ownRef$parentElement : null);
  }, [containerRef]);
  var tooltipContent = tooltipContext != null && tooltipContext.tooltipOpen ? renderTooltip(_extends10({}, tooltipContext, {
    colorScale
  })) : null;
  var showTooltip = (tooltipContext == null ? undefined : tooltipContext.tooltipOpen) && tooltipContent != null;
  var lastShowTooltip = import_react29.useRef(false);
  import_react29.useEffect(function() {
    if (showTooltip && !lastShowTooltip.current) {
      forceRefreshBounds();
    }
    lastShowTooltip.current = showTooltip;
  }, [showTooltip, forceRefreshBounds]);
  var tooltipLeft = tooltipContext == null ? undefined : tooltipContext.tooltipLeft;
  var tooltipTop = tooltipContext == null ? undefined : tooltipContext.tooltipTop;
  var xScaleBandwidth = xScale ? getScaleBandwidth(xScale) : 0;
  var yScaleBandwidth = yScale ? getScaleBandwidth(yScale) : 0;
  var getDatumLeftTop = import_react29.useCallback(function(key, datum) {
    var _ref4, _ref5;
    var entry = dataRegistry == null ? undefined : dataRegistry.get(key);
    var xAccessor = entry == null ? undefined : entry.xAccessor;
    var yAccessor = entry == null ? undefined : entry.yAccessor;
    var left2 = xScale && xAccessor ? (_ref4 = Number(xScale(xAccessor(datum))) + xScaleBandwidth / 2) != null ? _ref4 : 0 : undefined;
    var top2 = yScale && yAccessor ? (_ref5 = Number(yScale(yAccessor(datum))) + yScaleBandwidth / 2) != null ? _ref5 : 0 : undefined;
    return {
      left: left2,
      top: top2
    };
  }, [dataRegistry, xScaleBandwidth, yScaleBandwidth, xScale, yScale]);
  var nearestDatum = tooltipContext == null ? undefined : (_tooltipContext$toolt = tooltipContext.tooltipData) == null ? undefined : _tooltipContext$toolt.nearestDatum;
  var nearestDatumKey = (_nearestDatum$key = nearestDatum == null ? undefined : nearestDatum.key) != null ? _nearestDatum$key : "";
  if (showTooltip && nearestDatum && (snapTooltipToDatumX || snapTooltipToDatumY)) {
    var _getDatumLeftTop = getDatumLeftTop(nearestDatumKey, nearestDatum.datum), left = _getDatumLeftTop.left, top = _getDatumLeftTop.top;
    tooltipLeft = snapTooltipToDatumX && isValidNumber(left) ? left : tooltipLeft;
    tooltipTop = snapTooltipToDatumY && isValidNumber(top) ? top : tooltipTop;
  }
  var glyphProps = [];
  if (showTooltip && (showDatumGlyph || showSeriesGlyphs)) {
    var _glyphStyle$radius;
    var size = Number((_glyphStyle$radius = glyphStyle == null ? undefined : glyphStyle.radius) != null ? _glyphStyle$radius : 4);
    if (showSeriesGlyphs) {
      var _tooltipContext$toolt2, _tooltipContext$toolt3;
      Object.values((_tooltipContext$toolt2 = tooltipContext == null ? undefined : (_tooltipContext$toolt3 = tooltipContext.tooltipData) == null ? undefined : _tooltipContext$toolt3.datumByKey) != null ? _tooltipContext$toolt2 : {}).forEach(function(_ref6) {
        var _ref7, _colorScale, _theme$htmlLabel;
        var { key, datum, index } = _ref6;
        var color3 = (_ref7 = (_colorScale = colorScale == null ? undefined : colorScale(key)) != null ? _colorScale : theme == null ? undefined : (_theme$htmlLabel = theme.htmlLabel) == null ? undefined : _theme$htmlLabel.color) != null ? _ref7 : "#222";
        var _getDatumLeftTop2 = getDatumLeftTop(key, datum), left2 = _getDatumLeftTop2.left, top2 = _getDatumLeftTop2.top;
        if (!isValidNumber(left2) || !isValidNumber(top2))
          return;
        glyphProps.push({
          key,
          color: color3,
          datum,
          index,
          size,
          x: left2,
          y: top2,
          glyphStyle,
          isNearestDatum: nearestDatum ? nearestDatum.key === key : false
        });
      });
    } else if (nearestDatum) {
      var _getDatumLeftTop3 = getDatumLeftTop(nearestDatumKey, nearestDatum.datum), _left = _getDatumLeftTop3.left, _top = _getDatumLeftTop3.top;
      if (isValidNumber(_left) && isValidNumber(_top)) {
        var _ref8, _ref9, _ref10, _ref11, _theme$gridStyles, _theme$htmlLabel2;
        var color2 = (_ref8 = (_ref9 = (_ref10 = (_ref11 = nearestDatumKey && (colorScale == null ? undefined : colorScale(nearestDatumKey))) != null ? _ref11 : null) != null ? _ref10 : theme == null ? undefined : (_theme$gridStyles = theme.gridStyles) == null ? undefined : _theme$gridStyles.stroke) != null ? _ref9 : theme == null ? undefined : (_theme$htmlLabel2 = theme.htmlLabel) == null ? undefined : _theme$htmlLabel2.color) != null ? _ref8 : "#222";
        glyphProps.push({
          key: nearestDatumKey,
          color: color2,
          datum: nearestDatum.datum,
          index: nearestDatum.index,
          size,
          x: _left,
          y: _top,
          glyphStyle,
          isNearestDatum: true
        });
      }
    }
  }
  return /* @__PURE__ */ import_react29.default.createElement(import_react29.default.Fragment, null, /* @__PURE__ */ import_react29.default.createElement("svg", {
    ref: setContainerRef,
    style: INVISIBLE_STYLES
  }), showTooltip && /* @__PURE__ */ import_react29.default.createElement(import_react29.default.Fragment, null, showVerticalCrosshair && /* @__PURE__ */ import_react29.default.createElement(TooltipInPortal, {
    className: "visx-crosshair visx-crosshair-vertical",
    left: tooltipLeft,
    top: margin == null ? undefined : margin.top,
    offsetLeft: 0,
    offsetTop: 0,
    detectBounds: false,
    style: TOOLTIP_NO_STYLE
  }, /* @__PURE__ */ import_react29.default.createElement("svg", {
    width: "1",
    height: innerHeight,
    overflow: "visible"
  }, /* @__PURE__ */ import_react29.default.createElement("line", _extends10({
    x1: 0,
    x2: 0,
    y1: 0,
    y2: innerHeight,
    strokeWidth: 1.5,
    stroke: (_ref12 = (_theme$gridStyles$str = theme == null ? undefined : (_theme$gridStyles2 = theme.gridStyles) == null ? undefined : _theme$gridStyles2.stroke) != null ? _theme$gridStyles$str : theme == null ? undefined : (_theme$htmlLabel3 = theme.htmlLabel) == null ? undefined : _theme$htmlLabel3.color) != null ? _ref12 : "#222"
  }, verticalCrosshairStyle)))), showHorizontalCrosshair && /* @__PURE__ */ import_react29.default.createElement(TooltipInPortal, {
    className: "visx-crosshair visx-crosshair-horizontal",
    left: margin == null ? undefined : margin.left,
    top: tooltipTop,
    offsetLeft: 0,
    offsetTop: 0,
    detectBounds: false,
    style: TOOLTIP_NO_STYLE
  }, /* @__PURE__ */ import_react29.default.createElement("svg", {
    width: innerWidth,
    height: "1",
    overflow: "visible"
  }, /* @__PURE__ */ import_react29.default.createElement("line", _extends10({
    x1: 0,
    x2: innerWidth,
    y1: 0,
    y2: 0,
    strokeWidth: 1.5,
    stroke: (_ref13 = (_theme$gridStyles$str2 = theme == null ? undefined : (_theme$gridStyles3 = theme.gridStyles) == null ? undefined : _theme$gridStyles3.stroke) != null ? _theme$gridStyles$str2 : theme == null ? undefined : (_theme$htmlLabel4 = theme.htmlLabel) == null ? undefined : _theme$htmlLabel4.color) != null ? _ref13 : "#222"
  }, horizontalCrosshairStyle)))), glyphProps.map(function(_ref14, i) {
    var { x, y } = _ref14, props = _objectWithoutPropertiesLoose8(_ref14, _excluded23);
    return /* @__PURE__ */ import_react29.default.createElement(TooltipInPortal, {
      key: i,
      className: "visx-tooltip-glyph",
      left: x,
      top: y,
      offsetLeft: 0,
      offsetTop: 0,
      detectBounds: false,
      style: TOOLTIP_NO_STYLE
    }, /* @__PURE__ */ import_react29.default.createElement("svg", {
      overflow: "visible"
    }, renderGlyph(_extends10({
      x: 0,
      y: 0
    }, props))));
  }), /* @__PURE__ */ import_react29.default.createElement(TooltipInPortal, _extends10({
    left: tooltipLeft,
    top: tooltipTop,
    style: _extends10({}, defaultStyles, {
      background: (_theme$backgroundColo = theme == null ? undefined : theme.backgroundColor) != null ? _theme$backgroundColo : "white",
      boxShadow: "0 1px 2px " + (theme != null && (_theme$htmlLabel5 = theme.htmlLabel) != null && _theme$htmlLabel5.color ? (theme == null ? undefined : (_theme$htmlLabel6 = theme.htmlLabel) == null ? undefined : _theme$htmlLabel6.color) + "55" : "#22222255")
    }, theme == null ? undefined : theme.htmlLabel)
  }, tooltipProps), tooltipContent)));
}
TooltipInner.propTypes = {
  renderTooltip: import_prop_types5.default.func.isRequired,
  renderGlyph: import_prop_types5.default.func,
  snapTooltipToDatumX: import_prop_types5.default.bool,
  snapTooltipToDatumY: import_prop_types5.default.bool,
  showVerticalCrosshair: import_prop_types5.default.bool,
  showHorizontalCrosshair: import_prop_types5.default.bool,
  showDatumGlyph: import_prop_types5.default.bool,
  showSeriesGlyphs: import_prop_types5.default.bool
};
function Tooltip2(props) {
  var tooltipContext = import_react29.useContext(TooltipContext_default);
  if (!(tooltipContext != null && tooltipContext.tooltipOpen))
    return null;
  return /* @__PURE__ */ import_react29.default.createElement(TooltipInner, props);
}
Tooltip2.propTypes = {
  renderTooltip: import_prop_types5.default.func.isRequired,
  renderGlyph: import_prop_types5.default.func,
  snapTooltipToDatumX: import_prop_types5.default.bool,
  snapTooltipToDatumY: import_prop_types5.default.bool,
  showVerticalCrosshair: import_prop_types5.default.bool,
  showHorizontalCrosshair: import_prop_types5.default.bool,
  showDatumGlyph: import_prop_types5.default.bool,
  showSeriesGlyphs: import_prop_types5.default.bool
};
// node_modules/@visx/xychart/esm/components/XYChart.js
var import_prop_types8 = __toESM(require_prop_types(), 1);
var import_react41 = __toESM(require_react(), 1);
var import_ParentSize = __toESM(require_ParentSize(), 1);

// node_modules/@visx/xychart/esm/hooks/useEventEmitter.js
var import_react31 = __toESM(require_react(), 1);

// node_modules/@visx/event/esm/localPointGeneric.js
var import_point2 = __toESM(require_lib5(), 1);

// node_modules/@visx/event/esm/typeGuards.js
function isElement(elem) {
  return !!elem && elem instanceof Element;
}
function isSVGElement(elem) {
  return !!elem && (elem instanceof SVGElement || ("ownerSVGElement" in elem));
}
function isSVGSVGElement(elem) {
  return !!elem && "createSVGPoint" in elem;
}
function isSVGGraphicsElement(elem) {
  return !!elem && "getScreenCTM" in elem;
}
function isTouchEvent(event) {
  return !!event && "changedTouches" in event;
}
function isMouseEvent(event) {
  return !!event && "clientX" in event;
}
function isEvent(event) {
  return !!event && (event instanceof Event || ("nativeEvent" in event) && event.nativeEvent instanceof Event);
}

// node_modules/@visx/event/esm/getXAndYFromEvent.js
function _extends11() {
  _extends11 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1;i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends11.apply(this, arguments);
}
var DEFAULT_POINT = {
  x: 0,
  y: 0
};
function getXAndYFromEvent(event) {
  if (!event)
    return _extends11({}, DEFAULT_POINT);
  if (isTouchEvent(event)) {
    return event.changedTouches.length > 0 ? {
      x: event.changedTouches[0].clientX,
      y: event.changedTouches[0].clientY
    } : _extends11({}, DEFAULT_POINT);
  }
  if (isMouseEvent(event)) {
    return {
      x: event.clientX,
      y: event.clientY
    };
  }
  var target = event == null ? undefined : event.target;
  var boundingClientRect = target && "getBoundingClientRect" in target ? target.getBoundingClientRect() : null;
  if (!boundingClientRect)
    return _extends11({}, DEFAULT_POINT);
  return {
    x: boundingClientRect.x + boundingClientRect.width / 2,
    y: boundingClientRect.y + boundingClientRect.height / 2
  };
}

// node_modules/@visx/event/esm/localPointGeneric.js
function localPoint(node, event) {
  if (!node || !event)
    return null;
  var coords = getXAndYFromEvent(event);
  var svg = isSVGElement(node) ? node.ownerSVGElement : node;
  var screenCTM = isSVGGraphicsElement(svg) ? svg.getScreenCTM() : null;
  if (isSVGSVGElement(svg) && screenCTM) {
    var point2 = svg.createSVGPoint();
    point2.x = coords.x;
    point2.y = coords.y;
    point2 = point2.matrixTransform(screenCTM.inverse());
    return new import_point2.Point({
      x: point2.x,
      y: point2.y
    });
  }
  var rect = node.getBoundingClientRect();
  return new import_point2.Point({
    x: coords.x - rect.left - node.clientLeft,
    y: coords.y - rect.top - node.clientTop
  });
}

// node_modules/@visx/event/esm/localPoint.js
function localPoint2(nodeOrEvent, maybeEvent) {
  if (isElement(nodeOrEvent) && maybeEvent) {
    return localPoint(nodeOrEvent, maybeEvent);
  }
  if (isEvent(nodeOrEvent)) {
    var event = nodeOrEvent;
    var node = event.target;
    if (node)
      return localPoint(node, event);
  }
  return null;
}
// node_modules/@visx/xychart/esm/context/EventEmitterContext.js
var import_react30 = __toESM(require_react(), 1);
var EventEmitterContext = /* @__PURE__ */ import_react30.createContext(null);
var EventEmitterContext_default = EventEmitterContext;

// node_modules/@visx/xychart/esm/hooks/useEventEmitter.js
function useEventEmitter(eventType, handler, allowedSources) {
  var emitter = import_react31.useContext(EventEmitterContext_default);
  var allowedSourcesRef = import_react31.useRef();
  allowedSourcesRef.current = allowedSources;
  var emit = import_react31.useCallback(function(type, event, source) {
    if (emitter) {
      emitter.emit(type, {
        event,
        svgPoint: localPoint2(event),
        source
      });
    }
  }, [emitter]);
  import_react31.useEffect(function() {
    if (emitter && eventType && handler) {
      var handlerWithSourceFilter = function handlerWithSourceFilter(params) {
        var _allowedSourcesRef$cu;
        if (!allowedSourcesRef.current || params != null && params.source && (_allowedSourcesRef$cu = allowedSourcesRef.current) != null && _allowedSourcesRef$cu.includes(params.source)) {
          handler(params);
        }
      };
      emitter.on(eventType, handlerWithSourceFilter);
      return function() {
        return emitter == null ? undefined : emitter.off(eventType, handlerWithSourceFilter);
      };
    }
    return;
  }, [emitter, eventType, handler]);
  return emitter ? emit : null;
}

// node_modules/@visx/xychart/esm/providers/EventEmitterProvider.js
var import_react32 = __toESM(require_react(), 1);

// node_modules/mitt/dist/mitt.es.js
function mitt_es_default(n) {
  return { all: n = n || new Map, on: function(t, e) {
    var i = n.get(t);
    i && i.push(e) || n.set(t, [e]);
  }, off: function(t, e) {
    var i = n.get(t);
    i && i.splice(i.indexOf(e) >>> 0, 1);
  }, emit: function(t, e) {
    (n.get(t) || []).slice().map(function(n2) {
      n2(e);
    }), (n.get("*") || []).slice().map(function(n2) {
      n2(t, e);
    });
  } };
}

// node_modules/@visx/xychart/esm/providers/EventEmitterProvider.js
function EventEmitterProvider(_ref) {
  var children = _ref.children;
  var emitter = import_react32.useMemo(function() {
    return mitt_es_default();
  }, []);
  return /* @__PURE__ */ import_react32.default.createElement(EventEmitterContext_default.Provider, {
    value: emitter
  }, children);
}

// node_modules/@visx/xychart/esm/providers/TooltipProvider.js
var import_prop_types6 = __toESM(require_prop_types(), 1);
var import_react33 = __toESM(require_react(), 1);
var import_debounce = __toESM(require_debounce(), 1);
function _extends12() {
  _extends12 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1;i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends12.apply(this, arguments);
}
function TooltipProvider(_ref) {
  var _ref$hideTooltipDebou = _ref.hideTooltipDebounceMs, hideTooltipDebounceMs = _ref$hideTooltipDebou === undefined ? 400 : _ref$hideTooltipDebou, children = _ref.children;
  var _useTooltip = useTooltip(undefined), tooltipOpen = _useTooltip.tooltipOpen, tooltipLeft = _useTooltip.tooltipLeft, tooltipTop = _useTooltip.tooltipTop, tooltipData = _useTooltip.tooltipData, updateTooltip = _useTooltip.updateTooltip, privateHideTooltip = _useTooltip.hideTooltip;
  var debouncedHideTooltip = import_react33.useRef(null);
  function cancelDeboundedHideTooltip() {
    if (debouncedHideTooltip.current) {
      debouncedHideTooltip.current.cancel();
      debouncedHideTooltip.current = null;
    }
  }
  import_react33.useEffect(function() {
    return cancelDeboundedHideTooltip;
  }, []);
  var showTooltip = import_react33.useRef(function(_ref2) {
    var { svgPoint, index, key, datum, distanceX, distanceY } = _ref2;
    cancelDeboundedHideTooltip();
    var cleanDistanceX = isValidNumber(distanceX) ? distanceX : Infinity;
    var cleanDistanceY = isValidNumber(distanceY) ? distanceY : Infinity;
    var distance = Math.sqrt(Math.pow(cleanDistanceX, 2) + Math.pow(cleanDistanceY, 2));
    updateTooltip(function(_ref3) {
      var _currData$nearestDatu, _currData$nearestDatu2, _extends22;
      var currData = _ref3.tooltipData;
      var currNearestDatumDistance = currData != null && currData.nearestDatum && isValidNumber(currData.nearestDatum.distance) ? currData.nearestDatum.distance : Infinity;
      return {
        tooltipOpen: true,
        tooltipLeft: svgPoint == null ? undefined : svgPoint.x,
        tooltipTop: svgPoint == null ? undefined : svgPoint.y,
        tooltipData: {
          nearestDatum: ((_currData$nearestDatu = currData == null ? undefined : (_currData$nearestDatu2 = currData.nearestDatum) == null ? undefined : _currData$nearestDatu2.key) != null ? _currData$nearestDatu : "") !== key && currNearestDatumDistance < distance ? currData == null ? undefined : currData.nearestDatum : {
            key,
            index,
            datum,
            distance
          },
          datumByKey: _extends12({}, currData == null ? undefined : currData.datumByKey, (_extends22 = {}, _extends22[key] = {
            datum,
            index,
            key
          }, _extends22))
        }
      };
    });
  });
  var hideTooltip = import_react33.useCallback(function() {
    debouncedHideTooltip.current = import_debounce.default(privateHideTooltip, hideTooltipDebounceMs);
    debouncedHideTooltip.current();
  }, [privateHideTooltip, hideTooltipDebounceMs]);
  var value = import_react33.useMemo(function() {
    return {
      tooltipOpen,
      tooltipLeft,
      tooltipTop,
      tooltipData,
      updateTooltip,
      showTooltip: showTooltip.current,
      hideTooltip
    };
  }, [hideTooltip, tooltipData, tooltipLeft, tooltipOpen, tooltipTop, updateTooltip]);
  return /* @__PURE__ */ import_react33.default.createElement(TooltipContext_default.Provider, {
    value
  }, children);
}
TooltipProvider.propTypes = {
  hideTooltipDebounceMs: import_prop_types6.default.number,
  children: import_prop_types6.default.node.isRequired
};

// node_modules/@visx/xychart/esm/providers/DataProvider.js
var import_prop_types7 = __toESM(require_prop_types(), 1);
var import_react38 = __toESM(require_react(), 1);
var import_ordinal4 = __toESM(require_ordinal2(), 1);

// node_modules/@visx/xychart/esm/context/ThemeContext.js
var import_react34 = __toESM(require_react(), 1);

// node_modules/@visx/xychart/esm/theme/colors.js
var allColors = {
  red: ["#fff5f5", "#ffe3e3", "#ffc9c9", "#ffa8a8", "#ff8787", "#ff6b6b", "#fa5252", "#f03e3e", "#e03131", "#c92a2a"],
  pink: ["#fff0f6", "#ffdeeb", "#fcc2d7", "#faa2c1", "#f783ac", "#f06595", "#e64980", "#d6336c", "#c2255c", "#a61e4d"],
  grape: ["#f8f0fc", "#f3d9fa", "#eebefa", "#e599f7", "#da77f2", "#cc5de8", "#be4bdb", "#ae3ec9", "#9c36b5", "#862e9c"],
  violet: ["#f3f0ff", "#e5dbff", "#d0bfff", "#b197fc", "#9775fa", "#845ef7", "#7950f2", "#7048e8", "#6741d9", "#5f3dc4"],
  indigo: ["#edf2ff", "#dbe4ff", "#bac8ff", "#91a7ff", "#748ffc", "#5c7cfa", "#4c6ef5", "#4263eb", "#3b5bdb", "#364fc7"],
  blue: ["#e8f7ff", "#ccedff", "#a3daff", "#72c3fc", "#4dadf7", "#329af0", "#228ae6", "#1c7cd6", "#1b6ec2", "#1862ab"],
  cyan: ["#e3fafc", "#c5f6fa", "#99e9f2", "#66d9e8", "#3bc9db", "#22b8cf", "#15aabf", "#1098ad", "#0c8599", "#0b7285"],
  teal: ["#e6fcf5", "#c3fae8", "#96f2d7", "#63e6be", "#38d9a9", "#20c997", "#12b886", "#0ca678", "#099268", "#087f5b"],
  green: ["#ebfbee", "#d3f9d8", "#b2f2bb", "#8ce99a", "#69db7c", "#51cf66", "#40c057", "#37b24d", "#2f9e44", "#2b8a3e"],
  lime: ["#f4fce3", "#e9fac8", "#d8f5a2", "#c0eb75", "#a9e34b", "#94d82d", "#82c91e", "#74b816", "#66a80f", "#5c940d"],
  yellow: ["#fff9db", "#fff3bf", "#ffec99", "#ffe066", "#ffd43b", "#fcc419", "#fab005", "#f59f00", "#f08c00", "#e67700"],
  orange: ["#fff4e6", "#ffe8cc", "#ffd8a8", "#ffc078", "#ffa94d", "#ff922b", "#fd7e14", "#f76707", "#e8590c", "#d9480f"],
  gray: ["#f8f9fa", "#f1f3f5", "#e9ecef", "#dee2e6", "#ced4da", "#adb5bd", "#868e96", "#495057", "#343a40", "#212529"]
};
var grayColors = allColors.gray;
var textColor = grayColors[7];
var defaultColors = [allColors.cyan[9], allColors.cyan[3], allColors.yellow[5], allColors.red[4], allColors.grape[8], allColors.grape[5], allColors.pink[9]];

// node_modules/@visx/xychart/esm/theme/buildChartTheme.js
function _extends13() {
  _extends13 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1;i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends13.apply(this, arguments);
}
var defaultLabelStyles = {
  fontFamily: "-apple-system,BlinkMacSystemFont,Roboto,Helvetica Neue,sans-serif",
  fontWeight: 700,
  fontSize: 12,
  textAnchor: "middle",
  pointerEvents: "none",
  letterSpacing: 0.4
};
function buildChartTheme(config2) {
  var _ref, _ref2, _config$htmlLabel$col, _config$htmlLabel, _config$svgLabelBig, _config$svgLabelSmall;
  var baseSvgLabel = _extends13({}, defaultLabelStyles, {
    fill: textColor,
    stroke: "none"
  }, config2.svgLabelBig);
  var baseTickLabel = _extends13({}, defaultLabelStyles, {
    fontWeight: 200,
    fontSize: 11,
    fill: textColor,
    stroke: "none"
  }, config2.svgLabelSmall);
  var baseHtmlLabel = _extends13({
    color: (_ref = (_ref2 = (_config$htmlLabel$col = (_config$htmlLabel = config2.htmlLabel) == null ? undefined : _config$htmlLabel.color) != null ? _config$htmlLabel$col : (_config$svgLabelBig = config2.svgLabelBig) == null ? undefined : _config$svgLabelBig.fill) != null ? _ref2 : (_config$svgLabelSmall = config2.svgLabelSmall) == null ? undefined : _config$svgLabelSmall.fill) != null ? _ref : textColor
  }, defaultLabelStyles, config2.htmlLabel);
  return {
    backgroundColor: config2.backgroundColor,
    colors: [].concat(config2.colors),
    htmlLabel: _extends13({}, baseHtmlLabel),
    svgLabelSmall: _extends13({}, baseTickLabel),
    svgLabelBig: _extends13({}, baseSvgLabel),
    gridStyles: _extends13({
      stroke: config2.gridColor,
      strokeWidth: 1
    }, config2.gridStyles),
    axisStyles: {
      x: {
        top: {
          axisLabel: _extends13({}, baseSvgLabel, {
            dy: "-0.25em"
          }),
          axisLine: _extends13({
            stroke: config2.gridColorDark,
            strokeWidth: 2
          }, config2.xAxisLineStyles),
          tickLabel: _extends13({}, baseTickLabel, {
            dy: "-0.25em"
          }),
          tickLength: config2.tickLength,
          tickLine: _extends13({
            strokeWidth: 1,
            stroke: config2.gridColor
          }, config2.xTickLineStyles)
        },
        bottom: {
          axisLabel: _extends13({}, baseSvgLabel, {
            dy: "-0.25em"
          }),
          axisLine: _extends13({
            stroke: config2.gridColorDark,
            strokeWidth: 2
          }, config2.xAxisLineStyles),
          tickLabel: _extends13({}, baseTickLabel, {
            dy: "0.125em"
          }),
          tickLength: config2.tickLength,
          tickLine: _extends13({
            strokeWidth: 1,
            stroke: config2.gridColor
          }, config2.xTickLineStyles)
        }
      },
      y: {
        left: {
          axisLabel: _extends13({}, baseSvgLabel, {
            dx: "-1.25em"
          }),
          axisLine: _extends13({
            stroke: config2.gridColor,
            strokeWidth: 1
          }, config2.yAxisLineStyles),
          tickLabel: _extends13({}, baseTickLabel, {
            textAnchor: "end",
            dx: "-0.25em",
            dy: "0.25em"
          }),
          tickLength: config2.tickLength,
          tickLine: _extends13({
            strokeWidth: 1,
            stroke: config2.gridColor
          }, config2.yTickLineStyles)
        },
        right: {
          axisLabel: _extends13({}, baseSvgLabel, {
            dx: "1.25em"
          }),
          axisLine: _extends13({
            stroke: config2.gridColor,
            strokeWidth: 1
          }, config2.yAxisLineStyles),
          tickLabel: _extends13({}, baseTickLabel, {
            textAnchor: "start",
            dx: "0.25em",
            dy: "0.25em"
          }),
          tickLength: config2.tickLength,
          tickLine: _extends13({
            strokeWidth: 1,
            stroke: config2.gridColor
          }, config2.yTickLineStyles)
        }
      }
    }
  };
}

// node_modules/@visx/xychart/esm/theme/themes/light.js
var light_default = buildChartTheme({
  backgroundColor: "#fff",
  colors: defaultColors,
  tickLength: 4,
  svgLabelSmall: {
    fill: grayColors[7]
  },
  svgLabelBig: {
    fill: grayColors[9]
  },
  gridColor: grayColors[5],
  gridColorDark: grayColors[9]
});

// node_modules/@visx/xychart/esm/context/ThemeContext.js
var ThemeContext = /* @__PURE__ */ import_react34.default.createContext(light_default);
var ThemeContext_default = ThemeContext;

// node_modules/@visx/xychart/esm/hooks/useDataRegistry.js
var import_react35 = __toESM(require_react(), 1);

// node_modules/@visx/xychart/esm/classes/DataRegistry.js
var DataRegistry = /* @__PURE__ */ function() {
  function DataRegistry2() {
    this.registry = {};
    this.registryKeys = [];
  }
  var _proto = DataRegistry2.prototype;
  _proto.registerData = function registerData(entryOrEntries) {
    var _this = this;
    var entries = Array.isArray(entryOrEntries) ? entryOrEntries : [entryOrEntries];
    entries.forEach(function(currEntry) {
      if (currEntry.key in _this.registry && _this.registry[currEntry.key] != null) {
        console.debug("Overriding data registry key", currEntry.key);
      }
      _this.registry[currEntry.key] = currEntry;
      _this.registryKeys = Object.keys(_this.registry);
    });
  };
  _proto.unregisterData = function unregisterData(keyOrKeys) {
    var _this2 = this;
    var keys = Array.isArray(keyOrKeys) ? keyOrKeys : [keyOrKeys];
    keys.forEach(function(currKey) {
      delete _this2.registry[currKey];
      _this2.registryKeys = Object.keys(_this2.registry);
    });
  };
  _proto.entries = function entries() {
    return Object.values(this.registry);
  };
  _proto.get = function get(key) {
    return this.registry[key];
  };
  _proto.keys = function keys() {
    return this.registryKeys;
  };
  return DataRegistry2;
}();

// node_modules/@visx/xychart/esm/hooks/useDataRegistry.js
function useDataRegistry() {
  var _useState = import_react35.useState(Math.random()), forceUpdate = _useState[1];
  var privateRegistry = import_react35.useMemo(function() {
    return new DataRegistry;
  }, []);
  return import_react35.useMemo(function() {
    return {
      registerData: function registerData() {
        privateRegistry.registerData.apply(privateRegistry, arguments);
        forceUpdate(Math.random());
      },
      unregisterData: function unregisterData() {
        privateRegistry.unregisterData.apply(privateRegistry, arguments);
        forceUpdate(Math.random());
      },
      entries: function entries() {
        return privateRegistry.entries();
      },
      get: function get(key) {
        return privateRegistry.get(key);
      },
      keys: function keys() {
        return privateRegistry.keys();
      }
    };
  }, [privateRegistry]);
}

// node_modules/@visx/xychart/esm/hooks/useDimensions.js
var import_react36 = __toESM(require_react(), 1);
var DEFAULT_DIMS = {
  width: 0,
  height: 0,
  margin: {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  }
};
function useDimensions(initialDims) {
  var _useState = import_react36.useState({
    width: (initialDims == null ? undefined : initialDims.width) == null ? DEFAULT_DIMS.width : initialDims.width,
    height: (initialDims == null ? undefined : initialDims.height) == null ? DEFAULT_DIMS.height : initialDims.height,
    margin: (initialDims == null ? undefined : initialDims.margin) == null ? DEFAULT_DIMS.margin : initialDims.margin
  }), dimensions = _useState[0], privateSetDimensions = _useState[1];
  var publicSetDimensions = import_react36.useCallback(function(dims) {
    if (dims.width !== dimensions.width || dims.height !== dimensions.height || dims.margin.left !== dimensions.margin.left || dims.margin.right !== dimensions.margin.right || dims.margin.top !== dimensions.margin.top || dims.margin.bottom !== dimensions.margin.bottom) {
      privateSetDimensions(dims);
    }
  }, [dimensions.width, dimensions.height, dimensions.margin.left, dimensions.margin.right, dimensions.margin.bottom, dimensions.margin.top]);
  return [dimensions, publicSetDimensions];
}

// node_modules/@visx/xychart/esm/hooks/useScales.js
var import_react37 = __toESM(require_react(), 1);

// node_modules/@visx/xychart/esm/utils/isDiscreteScale.js
function isDiscreteScale(scaleConfig) {
  return (scaleConfig == null ? undefined : scaleConfig.type) === "band" || (scaleConfig == null ? undefined : scaleConfig.type) === "ordinal" || (scaleConfig == null ? undefined : scaleConfig.type) === "point";
}

// node_modules/@visx/xychart/esm/hooks/useScales.js
function _extends14() {
  _extends14 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1;i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends14.apply(this, arguments);
}
function useScales(_ref) {
  var { dataRegistry, xRange, xScaleConfig, yRange, yScaleConfig } = _ref;
  var registryKeys = dataRegistry.keys();
  var xMin = xRange[0], xMax = xRange[1];
  var yMin = yRange[0], yMax = yRange[1];
  var memoizedXScale = import_react37.useMemo(function() {
    var registryEntries = registryKeys.map(function(key) {
      return dataRegistry.get(key);
    });
    var xValues = registryEntries.reduce(function(combined, entry) {
      return entry ? combined.concat(entry.data.map(function(d) {
        return entry.xAccessor(d);
      })) : combined;
    }, []);
    if (xValues.length === 0)
      return;
    var xDomain = isDiscreteScale(xScaleConfig) ? xValues : extent(xValues);
    var xScale = scaleCanBeZeroed(xScaleConfig) ? createScale_default(_extends14({
      range: [xMin, xMax],
      domain: xDomain,
      zero: true
    }, xScaleConfig)) : createScale_default(_extends14({
      range: [xMin, xMax],
      domain: xDomain
    }, xScaleConfig));
    registryEntries.forEach(function(entry) {
      if (entry != null && entry.xScale)
        xScale = entry.xScale(xScale);
    });
    return xScale;
  }, [dataRegistry, xScaleConfig, registryKeys, xMin, xMax]);
  var memoizedYScale = import_react37.useMemo(function() {
    var registryEntries = registryKeys.map(function(key) {
      return dataRegistry.get(key);
    });
    var yValues = registryEntries.reduce(function(combined, entry) {
      return entry ? combined.concat(entry.data.map(function(d) {
        return entry.yAccessor(d);
      })) : combined;
    }, []);
    if (yValues.length === 0)
      return;
    var yDomain = isDiscreteScale(yScaleConfig) ? yValues : extent(yValues);
    var yScale = scaleCanBeZeroed(yScaleConfig) ? createScale_default(_extends14({
      range: [yMin, yMax],
      domain: yDomain,
      zero: true
    }, yScaleConfig)) : createScale_default(_extends14({
      range: [yMin, yMax],
      domain: yDomain
    }, yScaleConfig));
    registryEntries.forEach(function(entry) {
      if (entry != null && entry.yScale)
        yScale = entry.yScale(yScale);
    });
    return yScale;
  }, [dataRegistry, yScaleConfig, registryKeys, yMin, yMax]);
  return {
    xScale: memoizedXScale,
    yScale: memoizedYScale
  };
}

// node_modules/@visx/xychart/esm/providers/DataProvider.js
function DataProvider(_ref) {
  var { initialDimensions, theme: propsTheme, xScale: xScaleConfig, yScale: yScaleConfig, children, horizontal: _ref$horizontal } = _ref, initialHorizontal = _ref$horizontal === undefined ? "auto" : _ref$horizontal, resizeObserverPolyfill = _ref.resizeObserverPolyfill;
  var contextTheme = import_react38.useContext(ThemeContext_default);
  var theme = propsTheme || contextTheme;
  var _useDimensions = useDimensions(initialDimensions), _useDimensions$ = _useDimensions[0], width = _useDimensions$.width, height = _useDimensions$.height, margin = _useDimensions$.margin, setDimensions = _useDimensions[1];
  var innerWidth = Math.max(0, width - margin.left - margin.right);
  var innerHeight = Math.max(0, height - margin.top - margin.bottom);
  var dataRegistry = useDataRegistry();
  var _useScales = useScales({
    dataRegistry,
    xScaleConfig,
    yScaleConfig,
    xRange: [margin.left, Math.max(0, width - margin.right)],
    yRange: [Math.max(0, height - margin.bottom), margin.top]
  }), xScale = _useScales.xScale, yScale = _useScales.yScale;
  var registryKeys = dataRegistry.keys();
  var colorScale = import_react38.useMemo(function() {
    return import_ordinal4.default({
      domain: registryKeys,
      range: theme.colors
    });
  }, [registryKeys, theme.colors]);
  var horizontal = initialHorizontal === "auto" ? isDiscreteScale(yScaleConfig) || yScaleConfig.type === "time" || yScaleConfig.type === "utc" : initialHorizontal;
  var value = import_react38.useMemo(function() {
    return {
      dataRegistry,
      registerData: dataRegistry.registerData,
      unregisterData: dataRegistry.unregisterData,
      xScale,
      yScale,
      colorScale,
      theme,
      width,
      height,
      margin,
      innerWidth,
      innerHeight,
      setDimensions,
      horizontal,
      resizeObserverPolyfill
    };
  }, [colorScale, dataRegistry, height, horizontal, innerHeight, innerWidth, margin, setDimensions, theme, width, xScale, yScale, resizeObserverPolyfill]);
  return /* @__PURE__ */ import_react38.default.createElement(DataContext_default.Provider, {
    value
  }, children);
}
DataProvider.propTypes = {
  children: import_prop_types7.default.node.isRequired,
  horizontal: import_prop_types7.default.oneOfType([import_prop_types7.default.bool, import_prop_types7.default.oneOf(["auto"])])
};

// node_modules/@visx/xychart/esm/hooks/useEventEmitters.js
var import_react39 = __toESM(require_react(), 1);
function usePointerEventEmitters(_ref) {
  var { source, onPointerOut: _ref$onPointerOut } = _ref, onPointerOut = _ref$onPointerOut === undefined ? true : _ref$onPointerOut, _ref$onPointerMove = _ref.onPointerMove, onPointerMove = _ref$onPointerMove === undefined ? true : _ref$onPointerMove, _ref$onPointerUp = _ref.onPointerUp, onPointerUp = _ref$onPointerUp === undefined ? true : _ref$onPointerUp, _ref$onPointerDown = _ref.onPointerDown, onPointerDown = _ref$onPointerDown === undefined ? true : _ref$onPointerDown, _ref$onFocus = _ref.onFocus, onFocus = _ref$onFocus === undefined ? false : _ref$onFocus, _ref$onBlur = _ref.onBlur, onBlur = _ref$onBlur === undefined ? false : _ref$onBlur;
  var emit = useEventEmitter();
  var emitPointerMove = import_react39.useCallback(function(event) {
    return emit == null ? undefined : emit("pointermove", event, source);
  }, [emit, source]);
  var emitPointerOut = import_react39.useCallback(function(event) {
    return emit == null ? undefined : emit("pointerout", event, source);
  }, [emit, source]);
  var emitPointerUp = import_react39.useCallback(function(event) {
    return emit == null ? undefined : emit("pointerup", event, source);
  }, [emit, source]);
  var emitPointerDown = import_react39.useCallback(function(event) {
    return emit == null ? undefined : emit("pointerdown", event, source);
  }, [emit, source]);
  var emitFocus = import_react39.useCallback(function(event) {
    return emit == null ? undefined : emit("focus", event, source);
  }, [emit, source]);
  var emitBlur = import_react39.useCallback(function(event) {
    return emit == null ? undefined : emit("blur", event, source);
  }, [emit, source]);
  return {
    onPointerMove: onPointerMove ? emitPointerMove : undefined,
    onFocus: onFocus ? emitFocus : undefined,
    onBlur: onBlur ? emitBlur : undefined,
    onPointerOut: onPointerOut ? emitPointerOut : undefined,
    onPointerUp: onPointerUp ? emitPointerUp : undefined,
    onPointerDown: onPointerDown ? emitPointerDown : undefined
  };
}

// node_modules/@visx/xychart/esm/constants.js
var GLYPHSERIES_EVENT_SOURCE = "GLYPHSERIES_EVENT_SOURCE";
var LINESERIES_EVENT_SOURCE = "LINESERIES_EVENT_SOURCE";
var XYCHART_EVENT_SOURCE = "XYCHART_EVENT_SOURCE";

// node_modules/@visx/xychart/esm/hooks/useEventHandlers.js
var import_react40 = __toESM(require_react(), 1);

// node_modules/@visx/xychart/esm/typeguards/events.js
function isPointerEvent(event) {
  return !!event && (("clientX" in event) || ("changedTouches" in event));
}
function isFocusEvent(event) {
  return !!event && !isPointerEvent(event);
}

// node_modules/@visx/xychart/esm/utils/findNearestDatumSingleDimension.js
function findNearestDatumSingleDimension(_ref) {
  var { scale, accessor, scaledValue, data } = _ref;
  var coercedScale = scale;
  var nearestDatum;
  var nearestDatumIndex;
  if ("invert" in coercedScale && typeof coercedScale.invert === "function") {
    var bisect = bisector(accessor).left;
    var dataValue = Number(coercedScale.invert(scaledValue));
    var index = bisect(data, dataValue);
    var nearestDatum0 = data[index - 1];
    var nearestDatum1 = data[index];
    nearestDatum = !nearestDatum0 || Math.abs(dataValue - accessor(nearestDatum0)) > Math.abs(dataValue - accessor(nearestDatum1)) ? nearestDatum1 : nearestDatum0;
    nearestDatumIndex = nearestDatum === nearestDatum0 ? index - 1 : index;
  } else if ("step" in coercedScale && typeof coercedScale.step !== "undefined") {
    var domain = scale.domain();
    var range2 = scale.range().map(Number);
    var sortedRange = [].concat(range2).sort(function(a, b) {
      return a - b;
    });
    var rangePoints = range(sortedRange[0], sortedRange[1], coercedScale.step());
    var domainIndex = bisectLeft(rangePoints, scaledValue);
    var sortedDomain = range2[0] < range2[1] ? domain : domain.reverse();
    var domainValue = sortedDomain[domainIndex - 1];
    var _index = data.findIndex(function(d) {
      return String(accessor(d)) === String(domainValue);
    });
    nearestDatum = data[_index];
    nearestDatumIndex = _index;
  } else {
    console.warn("[visx/xychart/findNearestDatum] encountered incompatible scale type, bailing");
    return null;
  }
  if (nearestDatum == null || nearestDatumIndex == null)
    return null;
  var distance = Math.abs(Number(coercedScale(accessor(nearestDatum))) - scaledValue);
  return {
    datum: nearestDatum,
    index: nearestDatumIndex,
    distance
  };
}

// node_modules/@visx/xychart/esm/utils/findNearestDatumX.js
function findNearestDatumX(_ref) {
  var { xScale: scale, xAccessor: accessor, yScale, yAccessor, point: point2, data } = _ref;
  if (!point2)
    return null;
  var nearestDatum = findNearestDatumSingleDimension({
    scale,
    accessor,
    scaledValue: point2.x,
    data
  });
  return nearestDatum ? {
    datum: nearestDatum.datum,
    index: nearestDatum.index,
    distanceX: nearestDatum.distance,
    distanceY: Math.abs(Number(yScale(yAccessor(nearestDatum.datum))) - point2.y)
  } : null;
}

// node_modules/@visx/xychart/esm/utils/findNearestDatumY.js
function findNearestDatumY(_ref) {
  var { yScale: scale, yAccessor: accessor, xScale, xAccessor, point: point2, data } = _ref;
  if (!point2)
    return null;
  var nearestDatum = findNearestDatumSingleDimension({
    scale,
    accessor,
    scaledValue: point2.y,
    data
  });
  return nearestDatum ? {
    datum: nearestDatum.datum,
    index: nearestDatum.index,
    distanceY: nearestDatum.distance,
    distanceX: Math.abs(Number(xScale(xAccessor(nearestDatum.datum))) - point2.x)
  } : null;
}

// node_modules/@visx/xychart/esm/hooks/useEventHandlers.js
function _extends15() {
  _extends15 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1;i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends15.apply(this, arguments);
}
var POINTER_EVENTS_ALL = "__POINTER_EVENTS_ALL";
var POINTER_EVENTS_NEAREST = "__POINTER_EVENTS_NEAREST";
function usePointerEventHandlers(_ref) {
  var { dataKey, findNearestDatum: findNearestDatumProps, onBlur, onFocus, onPointerMove, onPointerOut, onPointerUp, onPointerDown, allowedSources } = _ref;
  var _ref2 = import_react40.useContext(DataContext_default), width = _ref2.width, height = _ref2.height, horizontal = _ref2.horizontal, dataRegistry = _ref2.dataRegistry, xScale = _ref2.xScale, yScale = _ref2.yScale;
  var findNearestDatum = findNearestDatumProps || (horizontal ? findNearestDatumY : findNearestDatumX);
  var getHandlerParams = import_react40.useCallback(function(params) {
    var _ref3 = params || {}, svgPoint = _ref3.svgPoint, event = _ref3.event;
    var pointerParamsByKey = {};
    var nearestDatumPointerParams = null;
    var nearestDatumDistance = Infinity;
    if (params && event && svgPoint && width && height && xScale && yScale) {
      var _dataRegistry$keys;
      var considerAllKeys = dataKey === POINTER_EVENTS_NEAREST || dataKey === POINTER_EVENTS_ALL;
      var dataKeys = considerAllKeys ? (_dataRegistry$keys = dataRegistry == null ? undefined : dataRegistry.keys()) != null ? _dataRegistry$keys : [] : Array.isArray(dataKey) ? dataKey : [dataKey];
      dataKeys.forEach(function(key) {
        var entry = dataRegistry == null ? undefined : dataRegistry.get(key);
        if (entry) {
          var nearestDatum = findNearestDatum({
            dataKey: key,
            data: entry.data,
            height,
            point: svgPoint,
            width,
            xAccessor: entry.xAccessor,
            xScale,
            yAccessor: entry.yAccessor,
            yScale
          });
          if (nearestDatum) {
            pointerParamsByKey[key] = _extends15({
              key,
              svgPoint,
              event
            }, nearestDatum);
            if (dataKey === POINTER_EVENTS_NEAREST) {
              var _nearestDatum$distanc, _nearestDatum$distanc2;
              var distance = Math.sqrt(((_nearestDatum$distanc = nearestDatum.distanceX) != null ? _nearestDatum$distanc : Math.pow(Infinity, 2)) + ((_nearestDatum$distanc2 = nearestDatum.distanceY) != null ? _nearestDatum$distanc2 : Math.pow(Infinity, 2)));
              nearestDatumPointerParams = distance < nearestDatumDistance ? pointerParamsByKey[key] : nearestDatumPointerParams;
              nearestDatumDistance = Math.min(nearestDatumDistance, distance);
            }
          }
        }
      });
      var pointerParams = dataKey === POINTER_EVENTS_NEAREST ? [nearestDatumPointerParams] : dataKey === POINTER_EVENTS_ALL || Array.isArray(dataKey) ? Object.values(pointerParamsByKey) : [pointerParamsByKey[dataKey]];
      return pointerParams.filter(function(param) {
        return param;
      });
    }
    return [];
  }, [dataKey, dataRegistry, xScale, yScale, width, height, findNearestDatum]);
  var handlePointerMove = import_react40.useCallback(function(params) {
    if (onPointerMove) {
      getHandlerParams(params).forEach(function(p2) {
        return onPointerMove(p2);
      });
    }
  }, [getHandlerParams, onPointerMove]);
  var handlePointerUp = import_react40.useCallback(function(params) {
    if (onPointerUp) {
      getHandlerParams(params).forEach(function(p2) {
        return onPointerUp(p2);
      });
    }
  }, [getHandlerParams, onPointerUp]);
  var handlePointerDown = import_react40.useCallback(function(params) {
    if (onPointerDown) {
      getHandlerParams(params).forEach(function(p2) {
        return onPointerDown(p2);
      });
    }
  }, [getHandlerParams, onPointerDown]);
  var handleFocus = import_react40.useCallback(function(params) {
    if (onFocus) {
      getHandlerParams(params).forEach(function(p2) {
        return onFocus(p2);
      });
    }
  }, [getHandlerParams, onFocus]);
  var handlePointerOut = import_react40.useCallback(function(params) {
    var event = params == null ? undefined : params.event;
    if (event && isPointerEvent(event) && onPointerOut)
      onPointerOut(event);
  }, [onPointerOut]);
  var handleBlur = import_react40.useCallback(function(params) {
    var event = params == null ? undefined : params.event;
    if (event && isFocusEvent(event) && onBlur)
      onBlur(event);
  }, [onBlur]);
  useEventEmitter("pointermove", onPointerMove ? handlePointerMove : undefined, allowedSources);
  useEventEmitter("pointerout", onPointerOut ? handlePointerOut : undefined, allowedSources);
  useEventEmitter("pointerup", onPointerUp ? handlePointerUp : undefined, allowedSources);
  useEventEmitter("pointerdown", onPointerDown ? handlePointerDown : undefined, allowedSources);
  useEventEmitter("focus", onFocus ? handleFocus : undefined, allowedSources);
  useEventEmitter("blur", onBlur ? handleBlur : undefined, allowedSources);
}

// node_modules/@visx/xychart/esm/components/XYChart.js
function _extends16() {
  _extends16 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1;i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends16.apply(this, arguments);
}
var DEFAULT_MARGIN = {
  top: 50,
  right: 50,
  bottom: 50,
  left: 50
};
var allowedEventSources = [XYCHART_EVENT_SOURCE];
function XYChart(props) {
  var _props$accessibilityL = props.accessibilityLabel, accessibilityLabel = _props$accessibilityL === undefined ? "XYChart" : _props$accessibilityL, _props$captureEvents = props.captureEvents, captureEvents = _props$captureEvents === undefined ? true : _props$captureEvents, children = props.children, height = props.height, horizontal = props.horizontal, _props$margin = props.margin, margin = _props$margin === undefined ? DEFAULT_MARGIN : _props$margin, onPointerMove = props.onPointerMove, onPointerOut = props.onPointerOut, onPointerUp = props.onPointerUp, onPointerDown = props.onPointerDown, _props$pointerEventsD = props.pointerEventsDataKey, pointerEventsDataKey = _props$pointerEventsD === undefined ? "nearest" : _props$pointerEventsD, theme = props.theme, width = props.width, xScale = props.xScale, yScale = props.yScale, resizeObserverPolyfillProp = props.resizeObserverPolyfill;
  var _useContext = import_react41.useContext(DataContext_default), setDimensions = _useContext.setDimensions, resizeObserverPolyfill = _useContext.resizeObserverPolyfill;
  var tooltipContext = import_react41.useContext(TooltipContext_default);
  var emit = useEventEmitter();
  import_react41.useEffect(function() {
    if (setDimensions && width != null && height != null && width > 0 && height > 0) {
      setDimensions({
        width,
        height,
        margin
      });
    }
  }, [setDimensions, width, height, margin]);
  var eventEmitters = usePointerEventEmitters({
    source: XYCHART_EVENT_SOURCE
  });
  usePointerEventHandlers({
    dataKey: pointerEventsDataKey === "nearest" ? POINTER_EVENTS_NEAREST : POINTER_EVENTS_ALL,
    onPointerMove,
    onPointerOut,
    onPointerUp,
    onPointerDown,
    allowedSources: allowedEventSources
  });
  if (!setDimensions) {
    if (!xScale || !yScale) {
      console.warn("[@visx/xychart] XYChart: When no DataProvider is available in context, you must pass xScale & yScale config to XYChart.");
      return null;
    }
    return /* @__PURE__ */ import_react41.default.createElement(DataProvider, {
      xScale,
      yScale,
      theme,
      initialDimensions: {
        width,
        height,
        margin
      },
      horizontal,
      resizeObserverPolyfill: resizeObserverPolyfillProp
    }, /* @__PURE__ */ import_react41.default.createElement(XYChart, props));
  }
  if (width == null || height == null) {
    return /* @__PURE__ */ import_react41.default.createElement(import_ParentSize.default, {
      resizeObserverPolyfill
    }, function(dims) {
      return /* @__PURE__ */ import_react41.default.createElement(XYChart, _extends16({}, props, {
        width: props.width == null ? dims.width : props.width,
        height: props.height == null ? dims.height : props.height
      }));
    });
  }
  if (tooltipContext == null) {
    return /* @__PURE__ */ import_react41.default.createElement(TooltipProvider, null, /* @__PURE__ */ import_react41.default.createElement(XYChart, props));
  }
  if (emit == null) {
    return /* @__PURE__ */ import_react41.default.createElement(EventEmitterProvider, null, /* @__PURE__ */ import_react41.default.createElement(XYChart, props));
  }
  if (width <= 0 || height <= 0) {
    if (true) {
      console.info("XYChart has a zero width or height, bailing", {
        width,
        height
      });
    }
    return null;
  }
  return /* @__PURE__ */ import_react41.default.createElement("svg", {
    width,
    height,
    "aria-label": accessibilityLabel
  }, children, captureEvents && /* @__PURE__ */ import_react41.default.createElement("rect", _extends16({
    x: margin.left,
    y: margin.top,
    width: width - margin.left - margin.right,
    height: height - margin.top - margin.bottom,
    fill: "transparent"
  }, eventEmitters)));
}
XYChart.propTypes = {
  accessibilityLabel: import_prop_types8.default.string,
  captureEvents: import_prop_types8.default.bool,
  width: import_prop_types8.default.number,
  height: import_prop_types8.default.number,
  children: import_prop_types8.default.node.isRequired,
  horizontal: import_prop_types8.default.oneOfType([import_prop_types8.default.bool, import_prop_types8.default.oneOf(["auto"])]),
  onPointerMove: import_prop_types8.default.func,
  onPointerOut: import_prop_types8.default.func,
  onPointerUp: import_prop_types8.default.func,
  onPointerDown: import_prop_types8.default.func,
  pointerEventsDataKey: import_prop_types8.default.oneOf(["all", "nearest"])
};
// node_modules/@visx/xychart/esm/enhancers/withRegisteredData.js
var import_react42 = __toESM(require_react(), 1);
function _extends17() {
  _extends17 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1;i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends17.apply(this, arguments);
}
function withRegisteredData(BaseSeriesComponent) {
  function WrappedComponent(props) {
    var { dataKey, data, xAccessor, yAccessor } = props;
    var _ref = import_react42.useContext(DataContext_default), xScale = _ref.xScale, yScale = _ref.yScale, dataRegistry = _ref.dataRegistry;
    import_react42.useEffect(function() {
      if (dataRegistry)
        dataRegistry.registerData({
          key: dataKey,
          data,
          xAccessor,
          yAccessor
        });
      return function() {
        return dataRegistry == null ? undefined : dataRegistry.unregisterData(dataKey);
      };
    }, [dataRegistry, dataKey, data, xAccessor, yAccessor]);
    var registryEntry = dataRegistry == null ? undefined : dataRegistry.get(dataKey);
    if (!xScale || !yScale || !registryEntry)
      return null;
    var BaseComponent = BaseSeriesComponent;
    return /* @__PURE__ */ import_react42.default.createElement(BaseComponent, _extends17({}, props, {
      xScale,
      yScale,
      data: registryEntry.data,
      xAccessor: registryEntry.xAccessor,
      yAccessor: registryEntry.yAccessor
    }));
  }
  return WrappedComponent;
}

// node_modules/@visx/xychart/esm/utils/getScaledValueFactory.js
function getScaledValueFactory(scale, accessor, align) {
  if (align === undefined) {
    align = "center";
  }
  return function(d) {
    var scaledValue = scale(accessor(d));
    if (isValidNumber(scaledValue)) {
      var bandwidthOffset = (align === "start" ? 0 : getScaleBandwidth(scale)) / (align === "center" ? 2 : 1);
      return scaledValue + bandwidthOffset;
    }
    return NaN;
  };
}

// node_modules/@visx/xychart/esm/components/series/private/BaseGlyphSeries.js
var import_prop_types9 = __toESM(require_prop_types(), 1);
var import_react44 = __toESM(require_react(), 1);

// node_modules/@visx/xychart/esm/hooks/useSeriesEvents.js
var import_react43 = __toESM(require_react(), 1);
function useSeriesEvents(_ref) {
  var _useContext;
  var { dataKey, enableEvents, findNearestDatum, onBlur: onBlurProps, onFocus: onFocusProps, onPointerMove: onPointerMoveProps, onPointerOut: onPointerOutProps, onPointerUp: onPointerUpProps, onPointerDown: onPointerDownProps, source, allowedSources } = _ref;
  var _ref2 = (_useContext = import_react43.useContext(TooltipContext_default)) != null ? _useContext : {}, showTooltip = _ref2.showTooltip, hideTooltip = _ref2.hideTooltip;
  var onPointerMove = import_react43.useCallback(function(params) {
    showTooltip(params);
    if (onPointerMoveProps)
      onPointerMoveProps(params);
  }, [showTooltip, onPointerMoveProps]);
  var onFocus = import_react43.useCallback(function(params) {
    showTooltip(params);
    if (onFocusProps)
      onFocusProps(params);
  }, [showTooltip, onFocusProps]);
  var onPointerOut = import_react43.useCallback(function(event) {
    hideTooltip();
    if (event && onPointerOutProps)
      onPointerOutProps(event);
  }, [hideTooltip, onPointerOutProps]);
  var onBlur = import_react43.useCallback(function(event) {
    hideTooltip();
    if (event && onBlurProps)
      onBlurProps(event);
  }, [hideTooltip, onBlurProps]);
  var onPointerDown = import_react43.useCallback(function(params) {
    showTooltip(params);
    if (onPointerDownProps)
      onPointerDownProps(params);
  }, [showTooltip, onPointerDownProps]);
  usePointerEventHandlers({
    dataKey,
    findNearestDatum,
    onBlur: enableEvents ? onBlur : undefined,
    onFocus: enableEvents ? onFocus : undefined,
    onPointerMove: enableEvents ? onPointerMove : undefined,
    onPointerOut: enableEvents ? onPointerOut : undefined,
    onPointerUp: enableEvents ? onPointerUpProps : undefined,
    onPointerDown: enableEvents ? onPointerDown : undefined,
    allowedSources
  });
  return usePointerEventEmitters({
    source,
    onBlur: !!onBlurProps && enableEvents,
    onFocus: !!onFocusProps && enableEvents,
    onPointerMove: !!onPointerMoveProps && enableEvents,
    onPointerOut: !!onPointerOutProps && enableEvents,
    onPointerUp: !!onPointerUpProps && enableEvents,
    onPointerDown: !!onPointerDownProps && enableEvents
  });
}

// node_modules/@visx/xychart/esm/components/series/private/BaseGlyphSeries.js
function _extends18() {
  _extends18 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1;i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends18.apply(this, arguments);
}
function BaseGlyphSeries(_ref) {
  var _ref2, _colorScale, _theme$colors;
  var { colorAccessor, data, dataKey, onBlur, onFocus, onPointerMove, onPointerOut, onPointerUp, onPointerDown, enableEvents: _ref$enableEvents } = _ref, enableEvents = _ref$enableEvents === undefined ? true : _ref$enableEvents, renderGlyphs = _ref.renderGlyphs, _ref$size = _ref.size, size = _ref$size === undefined ? 8 : _ref$size, xAccessor = _ref.xAccessor, xScale = _ref.xScale, yAccessor = _ref.yAccessor, yScale = _ref.yScale;
  var _useContext = import_react44.useContext(DataContext_default), colorScale = _useContext.colorScale, theme = _useContext.theme, horizontal = _useContext.horizontal;
  var getScaledX = import_react44.useMemo(function() {
    return getScaledValueFactory(xScale, xAccessor);
  }, [xScale, xAccessor]);
  var getScaledY = import_react44.useMemo(function() {
    return getScaledValueFactory(yScale, yAccessor);
  }, [yScale, yAccessor]);
  var color2 = (_ref2 = (_colorScale = colorScale == null ? undefined : colorScale(dataKey)) != null ? _colorScale : theme == null ? undefined : (_theme$colors = theme.colors) == null ? undefined : _theme$colors[0]) != null ? _ref2 : "#222";
  var ownEventSourceKey = GLYPHSERIES_EVENT_SOURCE + "-" + dataKey;
  var eventEmitters = useSeriesEvents({
    dataKey,
    enableEvents,
    onBlur,
    onFocus,
    onPointerMove,
    onPointerOut,
    onPointerUp,
    onPointerDown,
    source: ownEventSourceKey,
    allowedSources: [XYCHART_EVENT_SOURCE, ownEventSourceKey]
  });
  var glyphs = import_react44.useMemo(function() {
    return data.map(function(datum, i) {
      var _colorAccessor;
      var x = getScaledX(datum);
      if (!isValidNumber(x))
        return null;
      var y = getScaledY(datum);
      if (!isValidNumber(y))
        return null;
      return {
        key: "" + i,
        x,
        y,
        color: (_colorAccessor = colorAccessor == null ? undefined : colorAccessor(datum, i)) != null ? _colorAccessor : color2,
        size: typeof size === "function" ? size(datum) : size,
        datum
      };
    }).filter(function(point2) {
      return point2;
    });
  }, [color2, colorAccessor, data, getScaledX, getScaledY, size]);
  return /* @__PURE__ */ import_react44.default.createElement(import_react44.default.Fragment, null, renderGlyphs(_extends18({
    glyphs,
    xScale,
    yScale,
    horizontal
  }, eventEmitters)));
}
BaseGlyphSeries.propTypes = {
  colorAccessor: import_prop_types9.default.func,
  size: import_prop_types9.default.oneOfType([import_prop_types9.default.number, import_prop_types9.default.func]),
  renderGlyphs: import_prop_types9.default.func.isRequired
};
var BaseGlyphSeries_default = withRegisteredData(BaseGlyphSeries);

// node_modules/@visx/xychart/esm/components/series/private/defaultRenderGlyph.js
var import_react45 = __toESM(require_react(), 1);
function defaultRenderGlyph2(_ref) {
  var { key, color: color2, x, y, size, onBlur, onFocus, onPointerMove, onPointerOut, onPointerUp } = _ref;
  return /* @__PURE__ */ import_react45.default.createElement("circle", {
    className: "visx-circle-glyph",
    key,
    tabIndex: onBlur || onFocus ? 0 : undefined,
    fill: color2,
    r: size / 2,
    cx: x,
    cy: y,
    onBlur,
    onFocus,
    onPointerMove,
    onPointerOut,
    onPointerUp
  });
}

// node_modules/@visx/xychart/esm/components/series/private/BaseLineSeries.js
var import_prop_types10 = __toESM(require_prop_types(), 1);
var import_react46 = __toESM(require_react(), 1);
var import_LinePath = __toESM(require_LinePath(), 1);
var _excluded9 = ["colorAccessor", "curve", "data", "dataKey", "onBlur", "onFocus", "onPointerMove", "onPointerOut", "onPointerUp", "onPointerDown", "enableEvents", "xAccessor", "xScale", "yAccessor", "yScale", "PathComponent"];
function _extends19() {
  _extends19 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1;i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends19.apply(this, arguments);
}
function _objectWithoutPropertiesLoose9(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0;i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function BaseLineSeries(_ref) {
  var _ref2, _colorScale, _theme$colors;
  var { colorAccessor, curve, data, dataKey, onBlur, onFocus, onPointerMove, onPointerOut, onPointerUp, onPointerDown, enableEvents: _ref$enableEvents } = _ref, enableEvents = _ref$enableEvents === undefined ? true : _ref$enableEvents, xAccessor = _ref.xAccessor, xScale = _ref.xScale, yAccessor = _ref.yAccessor, yScale = _ref.yScale, _ref$PathComponent = _ref.PathComponent, PathComponent = _ref$PathComponent === undefined ? "path" : _ref$PathComponent, lineProps = _objectWithoutPropertiesLoose9(_ref, _excluded9);
  var _useContext = import_react46.useContext(DataContext_default), colorScale = _useContext.colorScale, theme = _useContext.theme;
  var getScaledX = import_react46.useMemo(function() {
    return getScaledValueFactory(xScale, xAccessor);
  }, [xScale, xAccessor]);
  var getScaledY = import_react46.useMemo(function() {
    return getScaledValueFactory(yScale, yAccessor);
  }, [yScale, yAccessor]);
  var isDefined = import_react46.useCallback(function(d) {
    return isValidNumber(xScale(xAccessor(d))) && isValidNumber(yScale(yAccessor(d)));
  }, [xScale, xAccessor, yScale, yAccessor]);
  var color2 = (_ref2 = (_colorScale = colorScale == null ? undefined : colorScale(dataKey)) != null ? _colorScale : theme == null ? undefined : (_theme$colors = theme.colors) == null ? undefined : _theme$colors[0]) != null ? _ref2 : "#222";
  var ownEventSourceKey = LINESERIES_EVENT_SOURCE + "-" + dataKey;
  var eventEmitters = useSeriesEvents({
    dataKey,
    enableEvents,
    onBlur,
    onFocus,
    onPointerMove,
    onPointerOut,
    onPointerUp,
    onPointerDown,
    source: ownEventSourceKey,
    allowedSources: [XYCHART_EVENT_SOURCE, ownEventSourceKey]
  });
  var captureFocusEvents = Boolean(onFocus || onBlur);
  var renderGlyphs = import_react46.useCallback(function(_ref3) {
    var glyphs = _ref3.glyphs;
    return captureFocusEvents ? glyphs.map(function(glyph) {
      return /* @__PURE__ */ import_react46.default.createElement(import_react46.default.Fragment, {
        key: glyph.key
      }, defaultRenderGlyph2(_extends19({}, glyph, {
        color: "transparent",
        onFocus: eventEmitters.onFocus,
        onBlur: eventEmitters.onBlur
      })));
    }) : null;
  }, [captureFocusEvents, eventEmitters.onFocus, eventEmitters.onBlur]);
  return /* @__PURE__ */ import_react46.default.createElement(import_react46.default.Fragment, null, /* @__PURE__ */ import_react46.default.createElement(import_LinePath.default, _extends19({
    x: getScaledX,
    y: getScaledY,
    defined: isDefined,
    curve
  }, lineProps), function(_ref4) {
    var _colorAccessor;
    var path = _ref4.path;
    return /* @__PURE__ */ import_react46.default.createElement(PathComponent, _extends19({
      stroke: (_colorAccessor = colorAccessor == null ? undefined : colorAccessor(dataKey)) != null ? _colorAccessor : color2,
      strokeWidth: 2,
      fill: "transparent",
      strokeLinecap: "round"
    }, lineProps, {
      d: path(data) || ""
    }, eventEmitters));
  }), captureFocusEvents && /* @__PURE__ */ import_react46.default.createElement(BaseGlyphSeries, {
    dataKey,
    data,
    xAccessor,
    yAccessor,
    xScale,
    yScale,
    renderGlyphs
  }));
}
BaseLineSeries.propTypes = {
  colorAccessor: import_prop_types10.default.func
};
var BaseLineSeries_default = withRegisteredData(BaseLineSeries);

// node_modules/@visx/xychart/esm/components/series/private/AnimatedPath.js
var import_react47 = __toESM(require_react(), 1);

// node_modules/d3-interpolate-path/src/split.js
function decasteljau(points, t) {
  const left = [];
  const right = [];
  function decasteljauRecurse(points2, t4) {
    if (points2.length === 1) {
      left.push(points2[0]);
      right.push(points2[0]);
    } else {
      const newPoints = Array(points2.length - 1);
      for (let i = 0;i < newPoints.length; i++) {
        if (i === 0) {
          left.push(points2[0]);
        }
        if (i === newPoints.length - 1) {
          right.push(points2[i + 1]);
        }
        newPoints[i] = [
          (1 - t4) * points2[i][0] + t4 * points2[i + 1][0],
          (1 - t4) * points2[i][1] + t4 * points2[i + 1][1]
        ];
      }
      decasteljauRecurse(newPoints, t4);
    }
  }
  if (points.length) {
    decasteljauRecurse(points, t);
  }
  return { left, right: right.reverse() };
}
function pointsToCommand(points) {
  const command = {};
  if (points.length === 4) {
    command.x2 = points[2][0];
    command.y2 = points[2][1];
  }
  if (points.length >= 3) {
    command.x1 = points[1][0];
    command.y1 = points[1][1];
  }
  command.x = points[points.length - 1][0];
  command.y = points[points.length - 1][1];
  if (points.length === 4) {
    command.type = "C";
  } else if (points.length === 3) {
    command.type = "Q";
  } else {
    command.type = "L";
  }
  return command;
}
function splitCurveAsPoints(points, segmentCount) {
  segmentCount = segmentCount || 2;
  const segments = [];
  let remainingCurve = points;
  const tIncrement = 1 / segmentCount;
  for (let i = 0;i < segmentCount - 1; i++) {
    const tRelative = tIncrement / (1 - tIncrement * i);
    const split = decasteljau(remainingCurve, tRelative);
    segments.push(split.left);
    remainingCurve = split.right;
  }
  segments.push(remainingCurve);
  return segments;
}
function splitCurve(commandStart, commandEnd, segmentCount) {
  const points = [[commandStart.x, commandStart.y]];
  if (commandEnd.x1 != null) {
    points.push([commandEnd.x1, commandEnd.y1]);
  }
  if (commandEnd.x2 != null) {
    points.push([commandEnd.x2, commandEnd.y2]);
  }
  points.push([commandEnd.x, commandEnd.y]);
  return splitCurveAsPoints(points, segmentCount).map(pointsToCommand);
}

// node_modules/d3-interpolate-path/src/interpolatePath.js
var commandTokenRegex = /[MLCSTQAHVZmlcstqahv]|-?[\d.e+-]+/g;
var typeMap = {
  M: ["x", "y"],
  L: ["x", "y"],
  H: ["x"],
  V: ["y"],
  C: ["x1", "y1", "x2", "y2", "x", "y"],
  S: ["x2", "y2", "x", "y"],
  Q: ["x1", "y1", "x", "y"],
  T: ["x", "y"],
  A: ["rx", "ry", "xAxisRotation", "largeArcFlag", "sweepFlag", "x", "y"],
  Z: []
};
Object.keys(typeMap).forEach((key) => {
  typeMap[key.toLowerCase()] = typeMap[key];
});
function arrayOfLength(length, value) {
  const array = Array(length);
  for (let i = 0;i < length; i++) {
    array[i] = value;
  }
  return array;
}
function commandToString(command) {
  return `${command.type}${typeMap[command.type].map((p2) => command[p2]).join(",")}`;
}
function convertToSameType(aCommand, bCommand) {
  const conversionMap = {
    x1: "x",
    y1: "y",
    x2: "x",
    y2: "y"
  };
  const readFromBKeys = ["xAxisRotation", "largeArcFlag", "sweepFlag"];
  if (aCommand.type !== bCommand.type && bCommand.type.toUpperCase() !== "M") {
    const aConverted = {};
    Object.keys(bCommand).forEach((bKey) => {
      const bValue = bCommand[bKey];
      let aValue = aCommand[bKey];
      if (aValue === undefined) {
        if (readFromBKeys.includes(bKey)) {
          aValue = bValue;
        } else {
          if (aValue === undefined && conversionMap[bKey]) {
            aValue = aCommand[conversionMap[bKey]];
          }
          if (aValue === undefined) {
            aValue = 0;
          }
        }
      }
      aConverted[bKey] = aValue;
    });
    aConverted.type = bCommand.type;
    aCommand = aConverted;
  }
  return aCommand;
}
function splitSegment(commandStart, commandEnd, segmentCount) {
  let segments = [];
  if (commandEnd.type === "L" || commandEnd.type === "Q" || commandEnd.type === "C") {
    segments = segments.concat(splitCurve(commandStart, commandEnd, segmentCount));
  } else {
    const copyCommand = Object.assign({}, commandStart);
    if (copyCommand.type === "M") {
      copyCommand.type = "L";
    }
    segments = segments.concat(arrayOfLength(segmentCount - 1).map(() => copyCommand));
    segments.push(commandEnd);
  }
  return segments;
}
function extend2(commandsToExtend, referenceCommands, excludeSegment) {
  const numSegmentsToExtend = commandsToExtend.length - 1;
  const numReferenceSegments = referenceCommands.length - 1;
  const segmentRatio = numSegmentsToExtend / numReferenceSegments;
  const countPointsPerSegment = arrayOfLength(numReferenceSegments).reduce((accum, d, i) => {
    let insertIndex = Math.floor(segmentRatio * i);
    if (excludeSegment && insertIndex < commandsToExtend.length - 1 && excludeSegment(commandsToExtend[insertIndex], commandsToExtend[insertIndex + 1])) {
      const addToPriorSegment = segmentRatio * i % 1 < 0.5;
      if (accum[insertIndex]) {
        if (addToPriorSegment) {
          if (insertIndex > 0) {
            insertIndex -= 1;
          } else if (insertIndex < commandsToExtend.length - 1) {
            insertIndex += 1;
          }
        } else if (insertIndex < commandsToExtend.length - 1) {
          insertIndex += 1;
        } else if (insertIndex > 0) {
          insertIndex -= 1;
        }
      }
    }
    accum[insertIndex] = (accum[insertIndex] || 0) + 1;
    return accum;
  }, []);
  const extended = countPointsPerSegment.reduce((extended2, segmentCount, i) => {
    if (i === commandsToExtend.length - 1) {
      const lastCommandCopies = arrayOfLength(segmentCount, Object.assign({}, commandsToExtend[commandsToExtend.length - 1]));
      if (lastCommandCopies[0].type === "M") {
        lastCommandCopies.forEach((d) => {
          d.type = "L";
        });
      }
      return extended2.concat(lastCommandCopies);
    }
    return extended2.concat(splitSegment(commandsToExtend[i], commandsToExtend[i + 1], segmentCount));
  }, []);
  extended.unshift(commandsToExtend[0]);
  return extended;
}
function pathCommandsFromString(d) {
  const tokens = (d || "").match(commandTokenRegex) || [];
  const commands = [];
  let commandArgs;
  let command;
  for (let i = 0;i < tokens.length; ++i) {
    commandArgs = typeMap[tokens[i]];
    if (commandArgs) {
      command = {
        type: tokens[i]
      };
      for (let a = 0;a < commandArgs.length; ++a) {
        command[commandArgs[a]] = +tokens[i + a + 1];
      }
      i += commandArgs.length;
      commands.push(command);
    }
  }
  return commands;
}
function interpolatePathCommands(aCommandsInput, bCommandsInput, excludeSegment) {
  let aCommands = aCommandsInput == null ? [] : aCommandsInput.slice();
  let bCommands = bCommandsInput == null ? [] : bCommandsInput.slice();
  if (!aCommands.length && !bCommands.length) {
    return function nullInterpolator() {
      return [];
    };
  }
  const addZ = (aCommands.length === 0 || aCommands[aCommands.length - 1].type === "Z") && (bCommands.length === 0 || bCommands[bCommands.length - 1].type === "Z");
  if (aCommands.length > 0 && aCommands[aCommands.length - 1].type === "Z") {
    aCommands.pop();
  }
  if (bCommands.length > 0 && bCommands[bCommands.length - 1].type === "Z") {
    bCommands.pop();
  }
  if (!aCommands.length) {
    aCommands.push(bCommands[0]);
  } else if (!bCommands.length) {
    bCommands.push(aCommands[0]);
  }
  const numPointsToExtend = Math.abs(bCommands.length - aCommands.length);
  if (numPointsToExtend !== 0) {
    if (bCommands.length > aCommands.length) {
      aCommands = extend2(aCommands, bCommands, excludeSegment);
    } else if (bCommands.length < aCommands.length) {
      bCommands = extend2(bCommands, aCommands, excludeSegment);
    }
  }
  aCommands = aCommands.map((aCommand, i) => convertToSameType(aCommand, bCommands[i]));
  const interpolatedCommands = aCommands.map((aCommand) => ({ ...aCommand }));
  if (addZ) {
    interpolatedCommands.push({ type: "Z" });
  }
  return function pathCommandInterpolator(t) {
    if (t === 1) {
      return bCommandsInput == null ? [] : bCommandsInput;
    }
    if (t > 0) {
      for (let i = 0;i < interpolatedCommands.length; ++i) {
        const aCommand = aCommands[i];
        const bCommand = bCommands[i];
        const interpolatedCommand = interpolatedCommands[i];
        for (const arg of typeMap[interpolatedCommand.type]) {
          interpolatedCommand[arg] = (1 - t) * aCommand[arg] + t * bCommand[arg];
          if (arg === "largeArcFlag" || arg === "sweepFlag") {
            interpolatedCommand[arg] = Math.round(interpolatedCommand[arg]);
          }
        }
      }
    }
    return interpolatedCommands;
  };
}
function interpolatePath(a, b, excludeSegment) {
  let aCommands = pathCommandsFromString(a);
  let bCommands = pathCommandsFromString(b);
  if (!aCommands.length && !bCommands.length) {
    return function nullInterpolator() {
      return "";
    };
  }
  const commandInterpolator = interpolatePathCommands(aCommands, bCommands, excludeSegment);
  return function pathStringInterpolator(t) {
    if (t === 1) {
      return b == null ? "" : b;
    }
    const interpolatedCommands = commandInterpolator(t);
    let interpolatedString = "";
    for (const interpolatedCommand of interpolatedCommands) {
      interpolatedString += commandToString(interpolatedCommand);
    }
    return interpolatedString;
  };
}
// node_modules/@visx/xychart/esm/components/series/private/AnimatedPath.js
var import_debounce2 = __toESM(require_debounce(), 1);
var _excluded10 = ["d", "stroke", "fill"];
function _extends20() {
  _extends20 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1;i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends20.apply(this, arguments);
}
function _objectWithoutPropertiesLoose10(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0;i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function AnimatedPath(_ref) {
  var { d, stroke: _ref$stroke } = _ref, stroke = _ref$stroke === undefined ? "transparent" : _ref$stroke, _ref$fill = _ref.fill, fill = _ref$fill === undefined ? "transparent" : _ref$fill, lineProps = _objectWithoutPropertiesLoose10(_ref, _excluded10);
  var previousD = import_react47.useRef(d);
  var setPreviousD = import_react47.useCallback(import_debounce2.default(function(dValue) {
    previousD.current = dValue;
  }, 50), []);
  var interpolator = interpolatePath(previousD.current, d);
  setPreviousD(d);
  var _useSpring = useSpring({
    from: {
      t: 0
    },
    to: {
      t: 1
    },
    reset: true,
    delay: 0
  }), t = _useSpring.t;
  var tweened = useSpring({
    stroke,
    fill
  });
  return /* @__PURE__ */ import_react47.default.createElement(animated.path, _extends20({
    className: "visx-path",
    d: t.to(interpolator),
    stroke: tweened.stroke,
    fill: tweened.fill
  }, lineProps));
}
var AnimatedPath_default = /* @__PURE__ */ import_react47.memo(AnimatedPath);

// node_modules/@visx/xychart/esm/components/series/AnimatedLineSeries.js
var import_react48 = __toESM(require_react(), 1);
function _extends21() {
  _extends21 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1;i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends21.apply(this, arguments);
}
function AnimatedLineSeries(props) {
  return /* @__PURE__ */ import_react48.default.createElement(BaseLineSeries_default, _extends21({}, props, {
    PathComponent: AnimatedPath_default
  }));
}
// assets/component/system_usage.js
var jsx_dev_runtime = __toESM(require_jsx_dev_runtime(), 1);
var accessors = {
  xAccessor: (d) => d.x,
  yAccessor: (d) => d.y
};
var Component = ({ cpu, mem }) => /* @__PURE__ */ jsx_dev_runtime.jsxDEV(XYChart, {
  width: 800,
  height: 400,
  xScale: { type: "band" },
  yScale: { type: "linear" },
  children: [
    /* @__PURE__ */ jsx_dev_runtime.jsxDEV(AnimatedAxis, {
      orientation: "bottom"
    }, undefined, false, undefined, this),
    /* @__PURE__ */ jsx_dev_runtime.jsxDEV(AnimatedGrid, {
      columns: false,
      numTicks: 4
    }, undefined, false, undefined, this),
    /* @__PURE__ */ jsx_dev_runtime.jsxDEV(AnimatedLineSeries, {
      dataKey: "CPU",
      data: cpu,
      ...accessors
    }, undefined, false, undefined, this),
    /* @__PURE__ */ jsx_dev_runtime.jsxDEV(AnimatedLineSeries, {
      dataKey: "MEM",
      data: mem,
      ...accessors
    }, undefined, false, undefined, this),
    /* @__PURE__ */ jsx_dev_runtime.jsxDEV(Tooltip2, {
      snapTooltipToDatumX: true,
      snapTooltipToDatumY: true,
      showVerticalCrosshair: true,
      showSeriesGlyphs: true,
      renderTooltip: ({ tooltipData, colorScale }) => /* @__PURE__ */ jsx_dev_runtime.jsxDEV("div", {
        children: [
          /* @__PURE__ */ jsx_dev_runtime.jsxDEV("div", {
            style: { color: colorScale(tooltipData.nearestDatum.key) },
            children: tooltipData.nearestDatum.key
          }, undefined, false, undefined, this),
          accessors.xAccessor(tooltipData.nearestDatum.datum),
          ", ",
          accessors.yAccessor(tooltipData.nearestDatum.datum)
        ]
      }, undefined, true, undefined, this)
    }, undefined, false, undefined, this)
  ]
}, undefined, true, undefined, this);
export {
  Component
};
